
NN_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a38  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007698  08003bc0  08003bc0  00004bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b258  0800b258  0000d05c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b258  0800b258  0000d05c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b258  0800b258  0000d05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b258  0800b258  0000c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b25c  0800b25c  0000c25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800b260  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d05c  2**0
                  CONTENTS
 10 .bss          000001bc  2000005c  2000005c  0000d05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  0000d05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000094da  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f7  00000000  00000000  00016566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  00017d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f59b  00000000  00000000  00018730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b413  00000000  00000000  00037ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be6b4  00000000  00000000  000430de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101792  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000076c  00000000  00000000  001017d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002d50  00000000  00000000  00101f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  00104c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ba8 	.word	0x08003ba8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08003ba8 	.word	0x08003ba8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <relu>:
#include "func.h"
#include "weights.h"
#include "data.h"
#include <math.h>

float relu(float x) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	ed87 0a01 	vstr	s0, [r7, #4]
    return x > 0 ? x : 0;
 8000b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7a:	dd01      	ble.n	8000b80 <relu+0x1c>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	e001      	b.n	8000b84 <relu+0x20>
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	ee07 3a90 	vmov	s15, r3
}
 8000b88:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <sigmoid>:

float sigmoid(float x) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0 / (1.0 + exp(-x));
 8000ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba6:	eef1 7a67 	vneg.f32	s15, s15
 8000baa:	ee17 3a90 	vmov	r3, s15
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fc6e 	bl	8000490 <__aeabi_f2d>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	ec43 2b10 	vmov	d0, r2, r3
 8000bbc:	f002 fde8 	bl	8003790 <exp>
 8000bc0:	ec51 0b10 	vmov	r0, r1, d0
 8000bc4:	f04f 0200 	mov.w	r2, #0
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <sigmoid+0x60>)
 8000bca:	f7ff fb03 	bl	80001d4 <__adddf3>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4908      	ldr	r1, [pc, #32]	@ (8000bf8 <sigmoid+0x60>)
 8000bd8:	f7ff fddc 	bl	8000794 <__aeabi_ddiv>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4610      	mov	r0, r2
 8000be2:	4619      	mov	r1, r3
 8000be4:	f7ff ff6e 	bl	8000ac4 <__aeabi_d2f>
 8000be8:	4603      	mov	r3, r0
 8000bea:	ee07 3a90 	vmov	s15, r3
}
 8000bee:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	3ff00000 	.word	0x3ff00000

08000bfc <softmax>:

void softmax(float* inputs, int length) {
 8000bfc:	b5b0      	push	{r4, r5, r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
    float sum = 0;
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < length; i++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	e023      	b.n	8000c5a <softmax+0x5e>
        sum += exp(inputs[i]);
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fc37 	bl	8000490 <__aeabi_f2d>
 8000c22:	4602      	mov	r2, r0
 8000c24:	460b      	mov	r3, r1
 8000c26:	ec43 2b10 	vmov	d0, r2, r3
 8000c2a:	f002 fdb1 	bl	8003790 <exp>
 8000c2e:	ec55 4b10 	vmov	r4, r5, d0
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff fc2c 	bl	8000490 <__aeabi_f2d>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	4629      	mov	r1, r5
 8000c40:	f7ff fac8 	bl	80001d4 <__adddf3>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff ff3a 	bl	8000ac4 <__aeabi_d2f>
 8000c50:	4603      	mov	r3, r0
 8000c52:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < length; i++) {
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	3301      	adds	r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbd7      	blt.n	8000c12 <softmax+0x16>
    }
    for (int i = 0; i < length; i++) {
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	e027      	b.n	8000cb8 <softmax+0xbc>
        inputs[i] = exp(inputs[i]) / sum;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fc0c 	bl	8000490 <__aeabi_f2d>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	ec43 2b10 	vmov	d0, r2, r3
 8000c80:	f002 fd86 	bl	8003790 <exp>
 8000c84:	ec55 4b10 	vmov	r4, r5, d0
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff fc01 	bl	8000490 <__aeabi_f2d>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4620      	mov	r0, r4
 8000c94:	4629      	mov	r1, r5
 8000c96:	f7ff fd7d 	bl	8000794 <__aeabi_ddiv>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	18d4      	adds	r4, r2, r3
 8000caa:	f7ff ff0b 	bl	8000ac4 <__aeabi_d2f>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < length; i++) {
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbd3      	blt.n	8000c68 <softmax+0x6c>
    }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ccc <dense_layer>:

void dense_layer(const float * inputs, float * outputs, int number_inputs, int number_outputs){
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	603b      	str	r3, [r7, #0]
    for (int i = 0; i<number_outputs; i++){
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e04a      	b.n	8000d76 <dense_layer+0xaa>
        outputs[i] = dense_bias[i];
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4927      	ldr	r1, [pc, #156]	@ (8000d88 <dense_layer+0xbc>)
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	440a      	add	r2, r1
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	601a      	str	r2, [r3, #0]
        for (int j=0; j<number_inputs; j++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	e024      	b.n	8000d44 <dense_layer+0x78>
            outputs[i] = outputs[i] + inputs[j]*dense_weights[j][i];
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	4413      	add	r3, r2
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	edd3 6a00 	vldr	s13, [r3]
 8000d12:	491e      	ldr	r1, [pc, #120]	@ (8000d8c <dense_layer+0xc0>)
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4613      	mov	r3, r2
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	4413      	add	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	440b      	add	r3, r1
 8000d26:	edd3 7a00 	vldr	s15, [r3]
 8000d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	4413      	add	r3, r2
 8000d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3a:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<number_inputs; j++){
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	3301      	adds	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbd6      	blt.n	8000cfa <dense_layer+0x2e>
        }
        outputs[i] = relu(outputs[i]);
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	4413      	add	r3, r2
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	18d4      	adds	r4, r2, r3
 8000d60:	eeb0 0a67 	vmov.f32	s0, s15
 8000d64:	f7ff fefe 	bl	8000b64 <relu>
 8000d68:	eef0 7a40 	vmov.f32	s15, s0
 8000d6c:	edc4 7a00 	vstr	s15, [r4]
    for (int i = 0; i<number_outputs; i++){
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbb0      	blt.n	8000ce0 <dense_layer+0x14>
    }
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	080061f8 	.word	0x080061f8
 8000d8c:	08004d58 	.word	0x08004d58

08000d90 <dense_1_layer>:

void dense_1_layer(float * inputs, float * outputs, int number_inputs, int number_outputs){
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
    for (int i = 0; i<number_outputs; i++){
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e04a      	b.n	8000e3a <dense_1_layer+0xaa>
        outputs[i] = dense_1_bias[i];
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	4413      	add	r3, r2
 8000dac:	4927      	ldr	r1, [pc, #156]	@ (8000e4c <dense_1_layer+0xbc>)
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	440a      	add	r2, r1
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	601a      	str	r2, [r3, #0]
        for (int j=0; j<number_inputs; j++){
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	e024      	b.n	8000e08 <dense_1_layer+0x78>
            outputs[i] = outputs[i] + inputs[j]*dense_1_weights[j][i];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	ed93 7a00 	vldr	s14, [r3]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	edd3 6a00 	vldr	s13, [r3]
 8000dd6:	491e      	ldr	r1, [pc, #120]	@ (8000e50 <dense_1_layer+0xc0>)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4413      	add	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	edd3 7a00 	vldr	s15, [r3]
 8000dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	4413      	add	r3, r2
 8000dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfe:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<number_inputs; j++){
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	3301      	adds	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbd6      	blt.n	8000dbe <dense_1_layer+0x2e>
        }
        outputs[i] = sigmoid(outputs[i]);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	4413      	add	r3, r2
 8000e18:	edd3 7a00 	vldr	s15, [r3]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	18d4      	adds	r4, r2, r3
 8000e24:	eeb0 0a67 	vmov.f32	s0, s15
 8000e28:	f7ff feb6 	bl	8000b98 <sigmoid>
 8000e2c:	eef0 7a40 	vmov.f32	s15, s0
 8000e30:	edc4 7a00 	vstr	s15, [r4]
    for (int i = 0; i<number_outputs; i++){
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dbb0      	blt.n	8000da4 <dense_1_layer+0x14>
    }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}
 8000e4c:	0800aed8 	.word	0x0800aed8
 8000e50:	080063d8 	.word	0x080063d8

08000e54 <dense_2_layer>:

void dense_2_layer(float * inputs, float * outputs, int number_inputs, int number_outputs){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
    for (int i = 0; i<number_outputs; i++){
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e035      	b.n	8000ed4 <dense_2_layer+0x80>
        outputs[i] = dense_2_bias[i];
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	4413      	add	r3, r2
 8000e70:	491e      	ldr	r1, [pc, #120]	@ (8000eec <dense_2_layer+0x98>)
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	440a      	add	r2, r1
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
        for (int j=0; j<number_inputs; j++){
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	e021      	b.n	8000ec6 <dense_2_layer+0x72>
            outputs[i] = outputs[i] + inputs[j]*dense_2_weights[j][i];
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	4413      	add	r3, r2
 8000e8a:	ed93 7a00 	vldr	s14, [r3]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	edd3 6a00 	vldr	s13, [r3]
 8000e9a:	4915      	ldr	r1, [pc, #84]	@ (8000ef0 <dense_2_layer+0x9c>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	009a      	lsls	r2, r3, #2
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ebc:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<number_inputs; j++){
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dbd9      	blt.n	8000e82 <dense_2_layer+0x2e>
    for (int i = 0; i<number_outputs; i++){
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbc5      	blt.n	8000e68 <dense_2_layer+0x14>
        }
    }
    softmax(outputs, 4);
 8000edc:	2104      	movs	r1, #4
 8000ede:	68b8      	ldr	r0, [r7, #8]
 8000ee0:	f7ff fe8c 	bl	8000bfc <softmax>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	0800b1f8 	.word	0x0800b1f8
 8000ef0:	0800af78 	.word	0x0800af78

08000ef4 <forward_network>:

void forward_network(const float* input, float* output) {
 8000ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef8:	b08b      	sub	sp, #44	@ 0x2c
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	466b      	mov	r3, sp
 8000f02:	461e      	mov	r6, r3
    int hidden1_number = 120;
 8000f04:	2378      	movs	r3, #120	@ 0x78
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
    int hidden2_number = 40;
 8000f08:	2328      	movs	r3, #40	@ 0x28
 8000f0a:	623b      	str	r3, [r7, #32]
    float hidden1[hidden1_number];
 8000f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f0e:	1e4b      	subs	r3, r1, #1
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	460a      	mov	r2, r1
 8000f14:	2300      	movs	r3, #0
 8000f16:	603a      	str	r2, [r7, #0]
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	0143      	lsls	r3, r0, #5
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f2c:	6838      	ldr	r0, [r7, #0]
 8000f2e:	0142      	lsls	r2, r0, #5
 8000f30:	460a      	mov	r2, r1
 8000f32:	2300      	movs	r3, #0
 8000f34:	4692      	mov	sl, r2
 8000f36:	469b      	mov	fp, r3
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000f44:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000f48:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	3307      	adds	r3, #7
 8000f52:	08db      	lsrs	r3, r3, #3
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	ebad 0d03 	sub.w	sp, sp, r3
 8000f5a:	466b      	mov	r3, sp
 8000f5c:	3303      	adds	r3, #3
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    float hidden2[hidden2_number];
 8000f64:	6a39      	ldr	r1, [r7, #32]
 8000f66:	1e4b      	subs	r3, r1, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	460a      	mov	r2, r1
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4690      	mov	r8, r2
 8000f70:	4699      	mov	r9, r3
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000f7e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000f82:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000f86:	460a      	mov	r2, r1
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4614      	mov	r4, r2
 8000f8c:	461d      	mov	r5, r3
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	016b      	lsls	r3, r5, #5
 8000f98:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000f9c:	0162      	lsls	r2, r4, #5
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	3307      	adds	r3, #7
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	ebad 0d03 	sub.w	sp, sp, r3
 8000fac:	466b      	mov	r3, sp
 8000fae:	3303      	adds	r3, #3
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	613b      	str	r3, [r7, #16]
    dense_layer(input, hidden1, INPUT_SIZE, hidden1_number);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	220b      	movs	r2, #11
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff fe85 	bl	8000ccc <dense_layer>
    dense_1_layer(hidden1, hidden2, hidden1_number, hidden2_number);
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fc6:	6939      	ldr	r1, [r7, #16]
 8000fc8:	69b8      	ldr	r0, [r7, #24]
 8000fca:	f7ff fee1 	bl	8000d90 <dense_1_layer>
    dense_2_layer(hidden2, output, hidden2_number, 4);
 8000fce:	2304      	movs	r3, #4
 8000fd0:	6a3a      	ldr	r2, [r7, #32]
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	6938      	ldr	r0, [r7, #16]
 8000fd6:	f7ff ff3d 	bl	8000e54 <dense_2_layer>
 8000fda:	46b5      	mov	sp, r6
}
 8000fdc:	bf00      	nop
 8000fde:	372c      	adds	r7, #44	@ 0x2c
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000fe6 <get_result_from_softmax>:


int get_result_from_softmax(float * result_softmax, int lenght){
 8000fe6:	b480      	push	{r7}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
    int max = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
    for (int i=1; i<lenght; i++){
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	e015      	b.n	8001026 <get_result_from_softmax+0x40>
        if (result_softmax[max] < result_softmax[i]) max = i;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	ed93 7a00 	vldr	s14, [r3]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	d501      	bpl.n	8001020 <get_result_from_softmax+0x3a>
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60fb      	str	r3, [r7, #12]
    for (int i=1; i<lenght; i++){
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	3301      	adds	r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbe5      	blt.n	8000ffa <get_result_from_softmax+0x14>
    }
    return max;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f000 f9ec 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f81c 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001048:	f000 f8a4 	bl	8001194 <MX_GPIO_Init>
  MX_TIM2_Init();
 800104c:	f000 f854 	bl	80010f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001050:	480a      	ldr	r0, [pc, #40]	@ (800107c <main+0x40>)
 8001052:	f001 ff6f 	bl	8002f34 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2120      	movs	r1, #32
 800105a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105e:	f000 fceb 	bl	8001a38 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001062:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001066:	f000 fa3f 	bl	80014e8 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001072:	f000 fce1 	bl	8001a38 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001076:	bf00      	nop
 8001078:	e7fd      	b.n	8001076 <main+0x3a>
 800107a:	bf00      	nop
 800107c:	20000078 	.word	0x20000078

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	@ 0x40
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2228      	movs	r2, #40	@ 0x28
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fb4a 	bl	8003728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a6:	2301      	movs	r3, #1
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010aa:	2310      	movs	r3, #16
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fcd6 	bl	8001a68 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010c2:	f000 f8e7 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 fd00 	bl	8002ae4 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ea:	f000 f8d3 	bl	8001294 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3740      	adds	r7, #64	@ 0x40
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_TIM2_Init+0x98>)
 8001118:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800111c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_TIM2_Init+0x98>)
 8001120:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001124:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_TIM2_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_TIM2_Init+0x98>)
 800112e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_TIM2_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_TIM2_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	@ (8001190 <MX_TIM2_Init+0x98>)
 8001142:	f001 fe9f 	bl	8002e84 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800114c:	f000 f8a2 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001154:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <MX_TIM2_Init+0x98>)
 800115e:	f002 f847 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001168:	f000 f894 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_TIM2_Init+0x98>)
 800117a:	f002 fa49 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001184:	f000 f886 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000078 	.word	0x20000078

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_GPIO_Init+0x5c>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	4a10      	ldr	r2, [pc, #64]	@ (80011f0 <MX_GPIO_Init+0x5c>)
 80011ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b2:	6153      	str	r3, [r2, #20]
 80011b4:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_GPIO_Init+0x5c>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c8:	f000 fc36 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011cc:	2320      	movs	r3, #32
 80011ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e4:	f000 fab6 	bl	8001754 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001204:	d139      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x86>
    {
    	forward_network(data_array[currentData], outputs);
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	222c      	movs	r2, #44	@ 0x2c
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	4a1d      	ldr	r2, [pc, #116]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001212:	4413      	add	r3, r2
 8001214:	491d      	ldr	r1, [pc, #116]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fe6c 	bl	8000ef4 <forward_network>
    	result = get_result_from_softmax(outputs, 4);
 800121c:	2104      	movs	r1, #4
 800121e:	481b      	ldr	r0, [pc, #108]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001220:	f7ff fee1 	bl	8000fe6 <get_result_from_softmax>
 8001224:	4603      	mov	r3, r0
 8001226:	4a1a      	ldr	r2, [pc, #104]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001228:	6013      	str	r3, [r2, #0]
    	if (currentData >= DATA_ROWS) currentData = 0;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b65      	cmp	r3, #101	@ 0x65
 8001230:	dd03      	ble.n	800123a <HAL_TIM_PeriodElapsedCallback+0x46>
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e004      	b.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x50>
    	else currentData++;
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001242:	6013      	str	r3, [r2, #0]
  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2120      	movs	r1, #32
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f000 fbf4 	bl	8001a38 <HAL_GPIO_WritePin>
  	  for(int i=0; i<(result + 1) * 250; i++){};
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e002      	b.n	800125c <HAL_TIM_PeriodElapsedCallback+0x68>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3301      	adds	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	22fa      	movs	r2, #250	@ 0xfa
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	429a      	cmp	r2, r3
 800126c:	dbf3      	blt.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x62>
  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2120      	movs	r1, #32
 8001272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001276:	f000 fbdf 	bl	8001a38 <HAL_GPIO_WritePin>

    }
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000d8 	.word	0x200000d8
 8001288:	08003bc0 	.word	0x08003bc0
 800128c:	200000c4 	.word	0x200000c4
 8001290:	200000d4 	.word	0x200000d4

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <Error_Handler+0x8>

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_MspInit+0x44>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	@ (80012e4 <HAL_MspInit+0x44>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <HAL_MspInit+0x44>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <HAL_MspInit+0x44>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <HAL_MspInit+0x44>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_MspInit+0x44>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f8:	d113      	bne.n	8001322 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_TIM_Base_MspInit+0x44>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_TIM_Base_MspInit+0x44>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_TIM_Base_MspInit+0x44>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	201c      	movs	r0, #28
 8001318:	f000 f9e5 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800131c:	201c      	movs	r0, #28
 800131e:	f000 f9fe 	bl	800171e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <NMI_Handler+0x4>

08001338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <MemManage_Handler+0x4>

08001348 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <UsageFault_Handler+0x4>

08001358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f88f 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <TIM2_IRQHandler+0x10>)
 8001396:	f001 fe29 	bl	8002fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000078 	.word	0x20000078

080013a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001400 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff ffea 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001414 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f002 f9a5 	bl	8003744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fa:	f7ff fe1f 	bl	800103c <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001400:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800140c:	0800b260 	.word	0x0800b260
  ldr r2, =_sbss
 8001410:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001414:	20000218 	.word	0x20000218

08001418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_2_IRQHandler>
	...

0800141c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_Init+0x28>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_Init+0x28>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f94f 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff ff32 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40022000 	.word	0x40022000

08001448 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f967 	bl	800173a <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f92f 	bl	80016e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	200000dc 	.word	0x200000dc

080014d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200000dc 	.word	0x200000dc

080014e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	@ (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	@ (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	@ (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	@ 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f7ff ff8e 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff29 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff3e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff8e 	bl	8001624 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5d 	bl	80015d0 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff31 	bl	8001594 <__NVIC_EnableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffa2 	bl	800168c <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	e14e      	b.n	8001a02 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8140 	beq.w	80019fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d005      	beq.n	8001794 <HAL_GPIO_Init+0x40>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d130      	bne.n	80017f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ca:	2201      	movs	r2, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 0201 	and.w	r2, r3, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d017      	beq.n	8001832 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d123      	bne.n	8001886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	6939      	ldr	r1, [r7, #16]
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 809a 	beq.w	80019fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	4b55      	ldr	r3, [pc, #340]	@ (8001a20 <HAL_GPIO_Init+0x2cc>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a54      	ldr	r2, [pc, #336]	@ (8001a20 <HAL_GPIO_Init+0x2cc>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b52      	ldr	r3, [pc, #328]	@ (8001a20 <HAL_GPIO_Init+0x2cc>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018e0:	4a50      	ldr	r2, [pc, #320]	@ (8001a24 <HAL_GPIO_Init+0x2d0>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800190a:	d013      	beq.n	8001934 <HAL_GPIO_Init+0x1e0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a46      	ldr	r2, [pc, #280]	@ (8001a28 <HAL_GPIO_Init+0x2d4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00d      	beq.n	8001930 <HAL_GPIO_Init+0x1dc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a45      	ldr	r2, [pc, #276]	@ (8001a2c <HAL_GPIO_Init+0x2d8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d007      	beq.n	800192c <HAL_GPIO_Init+0x1d8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a44      	ldr	r2, [pc, #272]	@ (8001a30 <HAL_GPIO_Init+0x2dc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_GPIO_Init+0x1d4>
 8001924:	2303      	movs	r3, #3
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x1e2>
 8001928:	2305      	movs	r3, #5
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x1e2>
 800192c:	2302      	movs	r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x1e2>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x1e2>
 8001934:	2300      	movs	r3, #0
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001946:	4937      	ldr	r1, [pc, #220]	@ (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001954:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <HAL_GPIO_Init+0x2e0>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001978:	4a2e      	ldr	r2, [pc, #184]	@ (8001a34 <HAL_GPIO_Init+0x2e0>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800197e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <HAL_GPIO_Init+0x2e0>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a2:	4a24      	ldr	r2, [pc, #144]	@ (8001a34 <HAL_GPIO_Init+0x2e0>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a8:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_GPIO_Init+0x2e0>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019cc:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <HAL_GPIO_Init+0x2e0>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_GPIO_Init+0x2e0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a34 <HAL_GPIO_Init+0x2e0>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f aea9 	bne.w	8001764 <HAL_GPIO_Init+0x10>
  }
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
 8001a44:	4613      	mov	r3, r2
 8001a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a48:	787b      	ldrb	r3, [r7, #1]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f001 b823 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 817d 	beq.w	8001d9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aa4:	4bbc      	ldr	r3, [pc, #752]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d00c      	beq.n	8001aca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab0:	4bb9      	ldr	r3, [pc, #740]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d15c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x10e>
 8001abc:	4bb6      	ldr	r3, [pc, #728]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac8:	d155      	bne.n	8001b76 <HAL_RCC_OscConfig+0x10e>
 8001aca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ace:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ade:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d102      	bne.n	8001afc <HAL_RCC_OscConfig+0x94>
 8001af6:	4ba8      	ldr	r3, [pc, #672]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	e015      	b.n	8001b28 <HAL_RCC_OscConfig+0xc0>
 8001afc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b00:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b14:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001b24:	4b9c      	ldr	r3, [pc, #624]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b2c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001b30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b34:	fa92 f2a2 	rbit	r2, r2
 8001b38:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001b3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001b40:	fab2 f282 	clz	r2, r2
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	f042 0220 	orr.w	r2, r2, #32
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f002 021f 	and.w	r2, r2, #31
 8001b50:	2101      	movs	r1, #1
 8001b52:	fa01 f202 	lsl.w	r2, r1, r2
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 811f 	beq.w	8001d9c <HAL_RCC_OscConfig+0x334>
 8001b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 8116 	bne.w	8001d9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f000 bfaf 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12e>
 8001b88:	4b83      	ldr	r3, [pc, #524]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a82      	ldr	r2, [pc, #520]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e036      	b.n	8001c04 <HAL_RCC_OscConfig+0x19c>
 8001b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x158>
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7b      	ldr	r2, [pc, #492]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b79      	ldr	r3, [pc, #484]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a78      	ldr	r2, [pc, #480]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e021      	b.n	8001c04 <HAL_RCC_OscConfig+0x19c>
 8001bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x184>
 8001bd2:	4b71      	ldr	r3, [pc, #452]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a70      	ldr	r2, [pc, #448]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b6e      	ldr	r3, [pc, #440]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6d      	ldr	r2, [pc, #436]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x19c>
 8001bec:	4b6a      	ldr	r3, [pc, #424]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a69      	ldr	r2, [pc, #420]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b67      	ldr	r3, [pc, #412]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a66      	ldr	r2, [pc, #408]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c04:	4b64      	ldr	r3, [pc, #400]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c08:	f023 020f 	bic.w	r2, r3, #15
 8001c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	495f      	ldr	r1, [pc, #380]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d059      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fc4f 	bl	80014d0 <HAL_GetTick>
 8001c32:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fc4a 	bl	80014d0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b64      	cmp	r3, #100	@ 0x64
 8001c46:	d902      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	f000 bf43 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8001c4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c52:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001c62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	095b      	lsrs	r3, r3, #5
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <HAL_RCC_OscConfig+0x218>
 8001c7a:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	e015      	b.n	8001cac <HAL_RCC_OscConfig+0x244>
 8001c80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c84:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c98:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cb0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001cb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001cb8:	fa92 f2a2 	rbit	r2, r2
 8001cbc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001cc0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0ab      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1d0>
 8001ce0:	e05d      	b.n	8001d9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fbf5 	bl	80014d0 <HAL_GetTick>
 8001ce6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fbf0 	bl	80014d0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b64      	cmp	r3, #100	@ 0x64
 8001cfa:	d902      	bls.n	8001d02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f000 bee9 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8001d02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d06:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	095b      	lsrs	r3, r3, #5
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2cc>
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	e015      	b.n	8001d60 <HAL_RCC_OscConfig+0x2f8>
 8001d34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d38:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d4c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d64:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001d68:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d6c:	fa92 f2a2 	rbit	r2, r2
 8001d70:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001d74:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001d78:	fab2 f282 	clz	r2, r2
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f002 021f 	and.w	r2, r2, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ab      	bne.n	8001cec <HAL_RCC_OscConfig+0x284>
 8001d94:	e003      	b.n	8001d9e <HAL_RCC_OscConfig+0x336>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 817d 	beq.w	80020ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001db4:	4ba6      	ldr	r3, [pc, #664]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dc0:	4ba3      	ldr	r3, [pc, #652]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d172      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x44a>
 8001dcc:	4ba0      	ldr	r3, [pc, #640]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d16c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x44a>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001dea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <HAL_RCC_OscConfig+0x3a0>
 8001e02:	4b93      	ldr	r3, [pc, #588]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e013      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c8>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e20:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e2c:	4b88      	ldr	r3, [pc, #544]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	2202      	movs	r2, #2
 8001e32:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001e36:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e3a:	fa92 f2a2 	rbit	r2, r2
 8001e3e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001e42:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_RCC_OscConfig+0x410>
 8001e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f000 be2e 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b75      	ldr	r3, [pc, #468]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	21f8      	movs	r1, #248	@ 0xf8
 8001e8e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e96:	fa91 f1a1 	rbit	r1, r1
 8001e9a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001e9e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001ea2:	fab1 f181 	clz	r1, r1
 8001ea6:	b2c9      	uxtb	r1, r1
 8001ea8:	408b      	lsls	r3, r1
 8001eaa:	4969      	ldr	r1, [pc, #420]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb0:	e0fd      	b.n	80020ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8088 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x56c>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001ed6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ee4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	2301      	movs	r3, #1
 8001eee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff faee 	bl	80014d0 <HAL_GetTick>
 8001ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efa:	f7ff fae9 	bl	80014d0 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d902      	bls.n	8001f10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	f000 bde2 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f22:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4d8>
 8001f3a:	4b45      	ldr	r3, [pc, #276]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	e013      	b.n	8001f68 <HAL_RCC_OscConfig+0x500>
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f58:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001f64:	4b3a      	ldr	r3, [pc, #232]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001f6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f72:	fa92 f2a2 	rbit	r2, r2
 8001f76:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001f7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f042 0220 	orr.w	r2, r2, #32
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f002 021f 	and.w	r2, r2, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0af      	beq.n	8001efa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	21f8      	movs	r1, #248	@ 0xf8
 8001fb0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001fb8:	fa91 f1a1 	rbit	r1, r1
 8001fbc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001fc0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001fc4:	fab1 f181 	clz	r1, r1
 8001fc8:	b2c9      	uxtb	r1, r1
 8001fca:	408b      	lsls	r3, r1
 8001fcc:	4920      	ldr	r1, [pc, #128]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
 8001fd2:	e06c      	b.n	80020ae <HAL_RCC_OscConfig+0x646>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001fe6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ff4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fa66 	bl	80014d0 <HAL_GetTick>
 8002004:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff fa61 	bl	80014d0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d902      	bls.n	8002020 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	f000 bd5a 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002032:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d104      	bne.n	8002054 <HAL_RCC_OscConfig+0x5ec>
 800204a:	4b01      	ldr	r3, [pc, #4]	@ (8002050 <HAL_RCC_OscConfig+0x5e8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e015      	b.n	800207c <HAL_RCC_OscConfig+0x614>
 8002050:	40021000 	.word	0x40021000
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800206c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002078:	4bc8      	ldr	r3, [pc, #800]	@ (800239c <HAL_RCC_OscConfig+0x934>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	2202      	movs	r2, #2
 800207e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002082:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002086:	fa92 f2a2 	rbit	r2, r2
 800208a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800208e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002092:	fab2 f282 	clz	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f002 021f 	and.w	r2, r2, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ad      	bne.n	800200a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8110 	beq.w	80022e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d079      	beq.n	80021c8 <HAL_RCC_OscConfig+0x760>
 80020d4:	2301      	movs	r3, #1
 80020d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80020e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	4bab      	ldr	r3, [pc, #684]	@ (80023a0 <HAL_RCC_OscConfig+0x938>)
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	461a      	mov	r2, r3
 80020fa:	2301      	movs	r3, #1
 80020fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff f9e7 	bl	80014d0 <HAL_GetTick>
 8002102:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e00a      	b.n	800211e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff f9e2 	bl	80014d0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d902      	bls.n	800211e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	f000 bcdb 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002140:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800215c:	2202      	movs	r2, #2
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002172:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002176:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002178:	4b88      	ldr	r3, [pc, #544]	@ (800239c <HAL_RCC_OscConfig+0x934>)
 800217a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800217c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002180:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002184:	2102      	movs	r1, #2
 8002186:	6019      	str	r1, [r3, #0]
 8002188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f1a3 	rbit	r1, r3
 8002196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800219e:	6019      	str	r1, [r3, #0]
  return result;
 80021a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0a0      	beq.n	8002108 <HAL_RCC_OscConfig+0x6a0>
 80021c6:	e08d      	b.n	80022e4 <HAL_RCC_OscConfig+0x87c>
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021ea:	601a      	str	r2, [r3, #0]
  return result;
 80021ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b68      	ldr	r3, [pc, #416]	@ (80023a0 <HAL_RCC_OscConfig+0x938>)
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	461a      	mov	r2, r3
 8002206:	2300      	movs	r3, #0
 8002208:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff f961 	bl	80014d0 <HAL_GetTick>
 800220e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002212:	e00a      	b.n	800222a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002214:	f7ff f95c 	bl	80014d0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d902      	bls.n	800222a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	f000 bc55 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 800222a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002252:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002256:	2202      	movs	r2, #2
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	fa93 f2a3 	rbit	r2, r3
 8002268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800227a:	2202      	movs	r2, #2
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002282:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002290:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002294:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002296:	4b41      	ldr	r3, [pc, #260]	@ (800239c <HAL_RCC_OscConfig+0x934>)
 8002298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800229a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022a2:	2102      	movs	r1, #2
 80022a4:	6019      	str	r1, [r3, #0]
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f1a3 	rbit	r1, r3
 80022b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022bc:	6019      	str	r1, [r3, #0]
  return result;
 80022be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d197      	bne.n	8002214 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 81a1 	beq.w	800263c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002300:	4b26      	ldr	r3, [pc, #152]	@ (800239c <HAL_RCC_OscConfig+0x934>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d116      	bne.n	800233a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b23      	ldr	r3, [pc, #140]	@ (800239c <HAL_RCC_OscConfig+0x934>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4a22      	ldr	r2, [pc, #136]	@ (800239c <HAL_RCC_OscConfig+0x934>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002316:	61d3      	str	r3, [r2, #28]
 8002318:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_RCC_OscConfig+0x934>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002332:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002334:	2301      	movs	r3, #1
 8002336:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <HAL_RCC_OscConfig+0x93c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <HAL_RCC_OscConfig+0x93c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a16      	ldr	r2, [pc, #88]	@ (80023a4 <HAL_RCC_OscConfig+0x93c>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002350:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7ff f8bd 	bl	80014d0 <HAL_GetTick>
 8002356:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	e009      	b.n	8002370 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235c:	f7ff f8b8 	bl	80014d0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	@ 0x64
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e3b1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <HAL_RCC_OscConfig+0x93c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ef      	beq.n	800235c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002380:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10d      	bne.n	80023a8 <HAL_RCC_OscConfig+0x940>
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_RCC_OscConfig+0x934>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a02      	ldr	r2, [pc, #8]	@ (800239c <HAL_RCC_OscConfig+0x934>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e03c      	b.n	8002414 <HAL_RCC_OscConfig+0x9ac>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	10908120 	.word	0x10908120
 80023a4:	40007000 	.word	0x40007000
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x96a>
 80023b8:	4bc1      	ldr	r3, [pc, #772]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4ac0      	ldr	r2, [pc, #768]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4bbe      	ldr	r3, [pc, #760]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4abd      	ldr	r2, [pc, #756]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e020      	b.n	8002414 <HAL_RCC_OscConfig+0x9ac>
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x994>
 80023e2:	4bb7      	ldr	r3, [pc, #732]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4ab6      	ldr	r2, [pc, #728]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4bb4      	ldr	r3, [pc, #720]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4ab3      	ldr	r2, [pc, #716]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0x9ac>
 80023fc:	4bb0      	ldr	r3, [pc, #704]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4aaf      	ldr	r2, [pc, #700]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	4bad      	ldr	r3, [pc, #692]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4aac      	ldr	r2, [pc, #688]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 800240e:	f023 0304 	bic.w	r3, r3, #4
 8002412:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8081 	beq.w	8002528 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7ff f853 	bl	80014d0 <HAL_GetTick>
 800242a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7ff f84e 	bl	80014d0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e345      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8002448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002458:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002466:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002470:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002474:	2202      	movs	r2, #2
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f2a3 	rbit	r2, r3
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800248e:	601a      	str	r2, [r3, #0]
  return result;
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002498:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d102      	bne.n	80024b4 <HAL_RCC_OscConfig+0xa4c>
 80024ae:	4b84      	ldr	r3, [pc, #528]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	e013      	b.n	80024dc <HAL_RCC_OscConfig+0xa74>
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	4b79      	ldr	r3, [pc, #484]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80024e4:	2102      	movs	r1, #2
 80024e6:	6011      	str	r1, [r2, #0]
 80024e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	fa92 f1a2 	rbit	r1, r2
 80024f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024fa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024fe:	6011      	str	r1, [r2, #0]
  return result;
 8002500:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002504:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	fab2 f282 	clz	r2, r2
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f002 021f 	and.w	r2, r2, #31
 800251a:	2101      	movs	r1, #1
 800251c:	fa01 f202 	lsl.w	r2, r1, r2
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d084      	beq.n	8002430 <HAL_RCC_OscConfig+0x9c8>
 8002526:	e07f      	b.n	8002628 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7fe ffd2 	bl	80014d0 <HAL_GetTick>
 800252c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	e00b      	b.n	800254a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe ffcd 	bl	80014d0 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e2c4      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002576:	2202      	movs	r2, #2
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002590:	601a      	str	r2, [r3, #0]
  return result;
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800259a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_OscConfig+0xb4e>
 80025b0:	4b43      	ldr	r3, [pc, #268]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	e013      	b.n	80025de <HAL_RCC_OscConfig+0xb76>
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	4b39      	ldr	r3, [pc, #228]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025e2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80025e6:	2102      	movs	r1, #2
 80025e8:	6011      	str	r1, [r2, #0]
 80025ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ee:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	fa92 f1a2 	rbit	r1, r2
 80025f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025fc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002600:	6011      	str	r1, [r2, #0]
  return result;
 8002602:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002606:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	fab2 f282 	clz	r2, r2
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f002 021f 	and.w	r2, r2, #31
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d184      	bne.n	8002532 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002628:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a22      	ldr	r2, [pc, #136]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002640:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8242 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264e:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <HAL_RCC_OscConfig+0xc58>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	f000 8213 	beq.w	8002a82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002660:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b02      	cmp	r3, #2
 800266a:	f040 8162 	bne.w	8002932 <HAL_RCC_OscConfig+0xeca>
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002676:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800267a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002692:	601a      	str	r2, [r3, #0]
  return result;
 8002694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002698:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800269c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	461a      	mov	r2, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe ff0c 	bl	80014d0 <HAL_GetTick>
 80026b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	e00c      	b.n	80026d8 <HAL_RCC_OscConfig+0xc70>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe ff04 	bl	80014d0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1fd      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80026e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026fc:	601a      	str	r2, [r3, #0]
  return result;
 80026fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002702:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002706:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d102      	bne.n	8002722 <HAL_RCC_OscConfig+0xcba>
 800271c:	4bb0      	ldr	r3, [pc, #704]	@ (80029e0 <HAL_RCC_OscConfig+0xf78>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	e027      	b.n	8002772 <HAL_RCC_OscConfig+0xd0a>
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800272a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800272e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002750:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f2a3 	rbit	r2, r3
 8002764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002768:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	4b9c      	ldr	r3, [pc, #624]	@ (80029e0 <HAL_RCC_OscConfig+0xf78>)
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002776:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800277a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800277e:	6011      	str	r1, [r2, #0]
 8002780:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002784:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	fa92 f1a2 	rbit	r1, r2
 800278e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002792:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002796:	6011      	str	r1, [r2, #0]
  return result;
 8002798:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800279c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	fab2 f282 	clz	r2, r2
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f042 0220 	orr.w	r2, r2, #32
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	f002 021f 	and.w	r2, r2, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d182      	bne.n	80026c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027be:	4b88      	ldr	r3, [pc, #544]	@ (80029e0 <HAL_RCC_OscConfig+0xf78>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	430b      	orrs	r3, r1
 80027e0:	497f      	ldr	r1, [pc, #508]	@ (80029e0 <HAL_RCC_OscConfig+0xf78>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80027ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002806:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800280a:	601a      	str	r2, [r3, #0]
  return result;
 800280c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002810:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002814:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002820:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	461a      	mov	r2, r3
 8002828:	2301      	movs	r3, #1
 800282a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fe50 	bl	80014d0 <HAL_GetTick>
 8002830:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002834:	e009      	b.n	800284a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe fe4b 	bl	80014d0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e144      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002852:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fa93 f2a3 	rbit	r2, r3
 8002866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800286e:	601a      	str	r2, [r3, #0]
  return result;
 8002870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002874:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002878:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d102      	bne.n	8002894 <HAL_RCC_OscConfig+0xe2c>
 800288e:	4b54      	ldr	r3, [pc, #336]	@ (80029e0 <HAL_RCC_OscConfig+0xf78>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	e027      	b.n	80028e4 <HAL_RCC_OscConfig+0xe7c>
 8002894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002898:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800289c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	fa93 f2a3 	rbit	r2, r3
 80028b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028be:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028cc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b3f      	ldr	r3, [pc, #252]	@ (80029e0 <HAL_RCC_OscConfig+0xf78>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028e8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80028ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028f0:	6011      	str	r1, [r2, #0]
 80028f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028f6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	fa92 f1a2 	rbit	r1, r2
 8002900:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002904:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002908:	6011      	str	r1, [r2, #0]
  return result;
 800290a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800290e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	fab2 f282 	clz	r2, r2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f042 0220 	orr.w	r2, r2, #32
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f002 021f 	and.w	r2, r2, #31
 8002924:	2101      	movs	r1, #1
 8002926:	fa01 f202 	lsl.w	r2, r1, r2
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d082      	beq.n	8002836 <HAL_RCC_OscConfig+0xdce>
 8002930:	e0cf      	b.n	8002ad2 <HAL_RCC_OscConfig+0x106a>
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800293a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800293e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002944:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f2a3 	rbit	r2, r3
 800294e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002952:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002956:	601a      	str	r2, [r3, #0]
  return result;
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002960:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800296c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	461a      	mov	r2, r3
 8002974:	2300      	movs	r3, #0
 8002976:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fdaa 	bl	80014d0 <HAL_GetTick>
 800297c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002980:	e009      	b.n	8002996 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002982:	f7fe fda5 	bl	80014d0 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e09e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8002996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800299e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fa93 f2a3 	rbit	r2, r3
 80029b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029ba:	601a      	str	r2, [r3, #0]
  return result;
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d104      	bne.n	80029e4 <HAL_RCC_OscConfig+0xf7c>
 80029da:	4b01      	ldr	r3, [pc, #4]	@ (80029e0 <HAL_RCC_OscConfig+0xf78>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e029      	b.n	8002a34 <HAL_RCC_OscConfig+0xfcc>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f2a3 	rbit	r2, r3
 8002a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a04:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae0 <HAL_RCC_OscConfig+0x1078>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a38:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a3c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a40:	6011      	str	r1, [r2, #0]
 8002a42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a46:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fa92 f1a2 	rbit	r1, r2
 8002a50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a54:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a58:	6011      	str	r1, [r2, #0]
  return result;
 8002a5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a5e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d180      	bne.n	8002982 <HAL_RCC_OscConfig+0xf1a>
 8002a80:	e027      	b.n	8002ad2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e01e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a96:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <HAL_RCC_OscConfig+0x1078>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002aa2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aaa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d10b      	bne.n	8002ace <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002aba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b09e      	sub	sp, #120	@ 0x78
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e162      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b90      	ldr	r3, [pc, #576]	@ (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d910      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b8d      	ldr	r3, [pc, #564]	@ (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	498b      	ldr	r1, [pc, #556]	@ (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b89      	ldr	r3, [pc, #548]	@ (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e14a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b38:	4b82      	ldr	r3, [pc, #520]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	497f      	ldr	r1, [pc, #508]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80dc 	beq.w	8002d10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d13c      	bne.n	8002bda <HAL_RCC_ClockConfig+0xf6>
 8002b60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b64:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xa6>
 8002b84:	4b6f      	ldr	r3, [pc, #444]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	e00f      	b.n	8002baa <HAL_RCC_ClockConfig+0xc6>
 8002b8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ba6:	4b67      	ldr	r3, [pc, #412]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bae:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bb2:	fa92 f2a2 	rbit	r2, r2
 8002bb6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002bb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bba:	fab2 f282 	clz	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f042 0220 	orr.w	r2, r2, #32
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f002 021f 	and.w	r2, r2, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d17b      	bne.n	8002cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0f3      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d13c      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x178>
 8002be2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002be6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x128>
 8002c06:	4b4f      	ldr	r3, [pc, #316]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	e00f      	b.n	8002c2c <HAL_RCC_ClockConfig+0x148>
 8002c0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c28:	4b46      	ldr	r3, [pc, #280]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c30:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c34:	fa92 f2a2 	rbit	r2, r2
 8002c38:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c3c:	fab2 f282 	clz	r2, r2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f042 0220 	orr.w	r2, r2, #32
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f002 021f 	and.w	r2, r2, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d13a      	bne.n	8002cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b2      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
 8002c7e:	4b31      	ldr	r3, [pc, #196]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	e00d      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1bc>
 8002c84:	2302      	movs	r3, #2
 8002c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c90:	2302      	movs	r3, #2
 8002c92:	623b      	str	r3, [r7, #32]
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	4b29      	ldr	r3, [pc, #164]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	61ba      	str	r2, [r7, #24]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	fa92 f2a2 	rbit	r2, r2
 8002caa:	617a      	str	r2, [r7, #20]
  return result;
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	fab2 f282 	clz	r2, r2
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f042 0220 	orr.w	r2, r2, #32
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	f002 021f 	and.w	r2, r2, #31
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e079      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cce:	4b1d      	ldr	r3, [pc, #116]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f023 0203 	bic.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	491a      	ldr	r1, [pc, #104]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe fbf6 	bl	80014d0 <HAL_GetTick>
 8002ce4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce8:	f7fe fbf2 	bl	80014d0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e061      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 020c 	and.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d1eb      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d214      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	@ (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4906      	ldr	r1, [pc, #24]	@ (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e040      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d54:	4b1d      	ldr	r3, [pc, #116]	@ (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	491a      	ldr	r1, [pc, #104]	@ (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d72:	4b16      	ldr	r3, [pc, #88]	@ (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4912      	ldr	r1, [pc, #72]	@ (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d86:	f000 f829 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d94:	22f0      	movs	r2, #240	@ 0xf0
 8002d96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	fa92 f2a2 	rbit	r2, r2
 8002d9e:	60fa      	str	r2, [r7, #12]
  return result;
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	fab2 f282 	clz	r2, r2
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	40d3      	lsrs	r3, r2
 8002daa:	4a09      	ldr	r2, [pc, #36]	@ (8002dd0 <HAL_RCC_ClockConfig+0x2ec>)
 8002dac:	5cd3      	ldrb	r3, [r2, r3]
 8002dae:	fa21 f303 	lsr.w	r3, r1, r3
 8002db2:	4a08      	ldr	r2, [pc, #32]	@ (8002dd4 <HAL_RCC_ClockConfig+0x2f0>)
 8002db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002db6:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <HAL_RCC_ClockConfig+0x2f4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe fb44 	bl	8001448 <HAL_InitTick>
  
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3778      	adds	r7, #120	@ 0x78
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08004d48 	.word	0x08004d48
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002df6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x30>
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x36>
 8002e0a:	e026      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e0c:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e0e:	613b      	str	r3, [r7, #16]
      break;
 8002e10:	e026      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	0c9b      	lsrs	r3, r3, #18
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	4a17      	ldr	r2, [pc, #92]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e20:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e38:	4a0e      	ldr	r2, [pc, #56]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e004      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
      break;
 8002e58:	e002      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5c:	613b      	str	r3, [r7, #16]
      break;
 8002e5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e60:	693b      	ldr	r3, [r7, #16]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	007a1200 	.word	0x007a1200
 8002e78:	0800b208 	.word	0x0800b208
 8002e7c:	0800b218 	.word	0x0800b218
 8002e80:	003d0900 	.word	0x003d0900

08002e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e049      	b.n	8002f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe fa1c 	bl	80012e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f000 fa86 	bl	80033d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d001      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e040      	b.n	8002fce <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1c      	ldr	r2, [pc, #112]	@ (8002fdc <HAL_TIM_Base_Start_IT+0xa8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00e      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x58>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f76:	d009      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x58>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	@ (8002fe0 <HAL_TIM_Base_Start_IT+0xac>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x58>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a17      	ldr	r2, [pc, #92]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d115      	bne.n	8002fb8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	4b15      	ldr	r3, [pc, #84]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d015      	beq.n	8002fca <HAL_TIM_Base_Start_IT+0x96>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa4:	d011      	beq.n	8002fca <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb6:	e008      	b.n	8002fca <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e000      	b.n	8002fcc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40014000 	.word	0x40014000
 8002fe8:	00010007 	.word	0x00010007

08002fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d020      	beq.n	8003050 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01b      	beq.n	8003050 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0202 	mvn.w	r2, #2
 8003020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f9ad 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f99f 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f9b0 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d020      	beq.n	800309c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01b      	beq.n	800309c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0204 	mvn.w	r2, #4
 800306c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f987 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f979 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f98a 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d020      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01b      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0208 	mvn.w	r2, #8
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f961 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f953 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f964 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d020      	beq.n	8003134 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01b      	beq.n	8003134 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0210 	mvn.w	r2, #16
 8003104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2208      	movs	r2, #8
 800310a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f93b 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f92d 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f93e 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00c      	beq.n	8003158 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0201 	mvn.w	r2, #1
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f84e 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fac2 	bl	8003700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 faba 	bl	8003714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00c      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8fd 	bl	80033be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00c      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0220 	mvn.w	r2, #32
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa82 	bl	80036ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIM_ConfigClockSource+0x1c>
 8003208:	2302      	movs	r3, #2
 800320a:	e0b6      	b.n	800337a <HAL_TIM_ConfigClockSource+0x18a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800322e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003248:	d03e      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0xd8>
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800324e:	f200 8087 	bhi.w	8003360 <HAL_TIM_ConfigClockSource+0x170>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003256:	f000 8086 	beq.w	8003366 <HAL_TIM_ConfigClockSource+0x176>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800325e:	d87f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x170>
 8003260:	2b70      	cmp	r3, #112	@ 0x70
 8003262:	d01a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0xaa>
 8003264:	2b70      	cmp	r3, #112	@ 0x70
 8003266:	d87b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x170>
 8003268:	2b60      	cmp	r3, #96	@ 0x60
 800326a:	d050      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x11e>
 800326c:	2b60      	cmp	r3, #96	@ 0x60
 800326e:	d877      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x170>
 8003270:	2b50      	cmp	r3, #80	@ 0x50
 8003272:	d03c      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0xfe>
 8003274:	2b50      	cmp	r3, #80	@ 0x50
 8003276:	d873      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x170>
 8003278:	2b40      	cmp	r3, #64	@ 0x40
 800327a:	d058      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x13e>
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	d86f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x170>
 8003280:	2b30      	cmp	r3, #48	@ 0x30
 8003282:	d064      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15e>
 8003284:	2b30      	cmp	r3, #48	@ 0x30
 8003286:	d86b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x170>
 8003288:	2b20      	cmp	r3, #32
 800328a:	d060      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15e>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d867      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x170>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05c      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15e>
 8003294:	2b10      	cmp	r3, #16
 8003296:	d05a      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15e>
 8003298:	e062      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032aa:	f000 f991 	bl	80035d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	609a      	str	r2, [r3, #8]
      break;
 80032c6:	e04f      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032d8:	f000 f97a 	bl	80035d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032ea:	609a      	str	r2, [r3, #8]
      break;
 80032ec:	e03c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 f8ee 	bl	80034dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2150      	movs	r1, #80	@ 0x50
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f947 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 800330c:	e02c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800331a:	461a      	mov	r2, r3
 800331c:	f000 f90d 	bl	800353a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2160      	movs	r1, #96	@ 0x60
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f937 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 800332c:	e01c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333a:	461a      	mov	r2, r3
 800333c:	f000 f8ce 	bl	80034dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2140      	movs	r1, #64	@ 0x40
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f927 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 800334c:	e00c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f000 f91e 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 800335e:	e003      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e000      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a38      	ldr	r2, [pc, #224]	@ (80034c8 <TIM_Base_SetConfig+0xf4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_Base_SetConfig+0x28>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0x28>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a35      	ldr	r2, [pc, #212]	@ (80034cc <TIM_Base_SetConfig+0xf8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d108      	bne.n	800340e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2d      	ldr	r2, [pc, #180]	@ (80034c8 <TIM_Base_SetConfig+0xf4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <TIM_Base_SetConfig+0x6a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800341c:	d00f      	beq.n	800343e <TIM_Base_SetConfig+0x6a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2a      	ldr	r2, [pc, #168]	@ (80034cc <TIM_Base_SetConfig+0xf8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00b      	beq.n	800343e <TIM_Base_SetConfig+0x6a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a29      	ldr	r2, [pc, #164]	@ (80034d0 <TIM_Base_SetConfig+0xfc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <TIM_Base_SetConfig+0x6a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a28      	ldr	r2, [pc, #160]	@ (80034d4 <TIM_Base_SetConfig+0x100>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_Base_SetConfig+0x6a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a27      	ldr	r2, [pc, #156]	@ (80034d8 <TIM_Base_SetConfig+0x104>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d108      	bne.n	8003450 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a14      	ldr	r2, [pc, #80]	@ (80034c8 <TIM_Base_SetConfig+0xf4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0xc0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <TIM_Base_SetConfig+0xfc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0xc0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a13      	ldr	r2, [pc, #76]	@ (80034d4 <TIM_Base_SetConfig+0x100>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0xc0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a12      	ldr	r2, [pc, #72]	@ (80034d8 <TIM_Base_SetConfig+0x104>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d103      	bne.n	800349c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f023 0201 	bic.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	611a      	str	r2, [r3, #16]
  }
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40014000 	.word	0x40014000
 80034d4:	40014400 	.word	0x40014400
 80034d8:	40014800 	.word	0x40014800

080034dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0201 	bic.w	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f023 030a 	bic.w	r3, r3, #10
 8003518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	621a      	str	r2, [r3, #32]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353a:	b480      	push	{r7}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f023 0210 	bic.w	r2, r3, #16
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	031b      	lsls	r3, r3, #12
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003576:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f043 0307 	orr.w	r3, r3, #7
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	021a      	lsls	r2, r3, #8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e054      	b.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a24      	ldr	r2, [pc, #144]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d108      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003658:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800366a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a17      	ldr	r2, [pc, #92]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003690:	d009      	beq.n	80036a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a11      	ldr	r2, [pc, #68]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10c      	bne.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40014000 	.word	0x40014000

080036ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <memset>:
 8003728:	4402      	add	r2, r0
 800372a:	4603      	mov	r3, r0
 800372c:	4293      	cmp	r3, r2
 800372e:	d100      	bne.n	8003732 <memset+0xa>
 8003730:	4770      	bx	lr
 8003732:	f803 1b01 	strb.w	r1, [r3], #1
 8003736:	e7f9      	b.n	800372c <memset+0x4>

08003738 <__errno>:
 8003738:	4b01      	ldr	r3, [pc, #4]	@ (8003740 <__errno+0x8>)
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	2000000c 	.word	0x2000000c

08003744 <__libc_init_array>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	4d0d      	ldr	r5, [pc, #52]	@ (800377c <__libc_init_array+0x38>)
 8003748:	4c0d      	ldr	r4, [pc, #52]	@ (8003780 <__libc_init_array+0x3c>)
 800374a:	1b64      	subs	r4, r4, r5
 800374c:	10a4      	asrs	r4, r4, #2
 800374e:	2600      	movs	r6, #0
 8003750:	42a6      	cmp	r6, r4
 8003752:	d109      	bne.n	8003768 <__libc_init_array+0x24>
 8003754:	4d0b      	ldr	r5, [pc, #44]	@ (8003784 <__libc_init_array+0x40>)
 8003756:	4c0c      	ldr	r4, [pc, #48]	@ (8003788 <__libc_init_array+0x44>)
 8003758:	f000 fa26 	bl	8003ba8 <_init>
 800375c:	1b64      	subs	r4, r4, r5
 800375e:	10a4      	asrs	r4, r4, #2
 8003760:	2600      	movs	r6, #0
 8003762:	42a6      	cmp	r6, r4
 8003764:	d105      	bne.n	8003772 <__libc_init_array+0x2e>
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	f855 3b04 	ldr.w	r3, [r5], #4
 800376c:	4798      	blx	r3
 800376e:	3601      	adds	r6, #1
 8003770:	e7ee      	b.n	8003750 <__libc_init_array+0xc>
 8003772:	f855 3b04 	ldr.w	r3, [r5], #4
 8003776:	4798      	blx	r3
 8003778:	3601      	adds	r6, #1
 800377a:	e7f2      	b.n	8003762 <__libc_init_array+0x1e>
 800377c:	0800b258 	.word	0x0800b258
 8003780:	0800b258 	.word	0x0800b258
 8003784:	0800b258 	.word	0x0800b258
 8003788:	0800b25c 	.word	0x0800b25c
 800378c:	00000000 	.word	0x00000000

08003790 <exp>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	ed2d 8b02 	vpush	{d8}
 8003796:	ec55 4b10 	vmov	r4, r5, d0
 800379a:	f000 f84d 	bl	8003838 <__ieee754_exp>
 800379e:	eeb0 8a40 	vmov.f32	s16, s0
 80037a2:	eef0 8a60 	vmov.f32	s17, s1
 80037a6:	ec45 4b10 	vmov	d0, r4, r5
 80037aa:	f000 f839 	bl	8003820 <finite>
 80037ae:	b168      	cbz	r0, 80037cc <exp+0x3c>
 80037b0:	a317      	add	r3, pc, #92	@ (adr r3, 8003810 <exp+0x80>)
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	4620      	mov	r0, r4
 80037b8:	4629      	mov	r1, r5
 80037ba:	f7fd f951 	bl	8000a60 <__aeabi_dcmpgt>
 80037be:	b160      	cbz	r0, 80037da <exp+0x4a>
 80037c0:	f7ff ffba 	bl	8003738 <__errno>
 80037c4:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8003800 <exp+0x70>
 80037c8:	2322      	movs	r3, #34	@ 0x22
 80037ca:	6003      	str	r3, [r0, #0]
 80037cc:	eeb0 0a48 	vmov.f32	s0, s16
 80037d0:	eef0 0a68 	vmov.f32	s1, s17
 80037d4:	ecbd 8b02 	vpop	{d8}
 80037d8:	bd38      	pop	{r3, r4, r5, pc}
 80037da:	a30f      	add	r3, pc, #60	@ (adr r3, 8003818 <exp+0x88>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	4620      	mov	r0, r4
 80037e2:	4629      	mov	r1, r5
 80037e4:	f7fd f91e 	bl	8000a24 <__aeabi_dcmplt>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d0ef      	beq.n	80037cc <exp+0x3c>
 80037ec:	f7ff ffa4 	bl	8003738 <__errno>
 80037f0:	2322      	movs	r3, #34	@ 0x22
 80037f2:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8003808 <exp+0x78>
 80037f6:	6003      	str	r3, [r0, #0]
 80037f8:	e7e8      	b.n	80037cc <exp+0x3c>
 80037fa:	bf00      	nop
 80037fc:	f3af 8000 	nop.w
 8003800:	00000000 	.word	0x00000000
 8003804:	7ff00000 	.word	0x7ff00000
	...
 8003810:	fefa39ef 	.word	0xfefa39ef
 8003814:	40862e42 	.word	0x40862e42
 8003818:	d52d3051 	.word	0xd52d3051
 800381c:	c0874910 	.word	0xc0874910

08003820 <finite>:
 8003820:	b082      	sub	sp, #8
 8003822:	ed8d 0b00 	vstr	d0, [sp]
 8003826:	9801      	ldr	r0, [sp, #4]
 8003828:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800382c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003830:	0fc0      	lsrs	r0, r0, #31
 8003832:	b002      	add	sp, #8
 8003834:	4770      	bx	lr
	...

08003838 <__ieee754_exp>:
 8003838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	ec55 4b10 	vmov	r4, r5, d0
 8003840:	49b1      	ldr	r1, [pc, #708]	@ (8003b08 <__ieee754_exp+0x2d0>)
 8003842:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8003846:	428a      	cmp	r2, r1
 8003848:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800384c:	d936      	bls.n	80038bc <__ieee754_exp+0x84>
 800384e:	49af      	ldr	r1, [pc, #700]	@ (8003b0c <__ieee754_exp+0x2d4>)
 8003850:	428a      	cmp	r2, r1
 8003852:	d914      	bls.n	800387e <__ieee754_exp+0x46>
 8003854:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003858:	4323      	orrs	r3, r4
 800385a:	4622      	mov	r2, r4
 800385c:	d007      	beq.n	800386e <__ieee754_exp+0x36>
 800385e:	462b      	mov	r3, r5
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fc fcb6 	bl	80001d4 <__adddf3>
 8003868:	4604      	mov	r4, r0
 800386a:	460d      	mov	r5, r1
 800386c:	e002      	b.n	8003874 <__ieee754_exp+0x3c>
 800386e:	2e00      	cmp	r6, #0
 8003870:	f040 8118 	bne.w	8003aa4 <__ieee754_exp+0x26c>
 8003874:	ec45 4b10 	vmov	d0, r4, r5
 8003878:	b004      	add	sp, #16
 800387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387e:	a38c      	add	r3, pc, #560	@ (adr r3, 8003ab0 <__ieee754_exp+0x278>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	4620      	mov	r0, r4
 8003886:	4629      	mov	r1, r5
 8003888:	f7fd f8ea 	bl	8000a60 <__aeabi_dcmpgt>
 800388c:	4607      	mov	r7, r0
 800388e:	b128      	cbz	r0, 800389c <__ieee754_exp+0x64>
 8003890:	2000      	movs	r0, #0
 8003892:	b004      	add	sp, #16
 8003894:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	f000 b97e 	b.w	8003b98 <__math_oflow>
 800389c:	a386      	add	r3, pc, #536	@ (adr r3, 8003ab8 <__ieee754_exp+0x280>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	4620      	mov	r0, r4
 80038a4:	4629      	mov	r1, r5
 80038a6:	f7fd f8bd 	bl	8000a24 <__aeabi_dcmplt>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	f000 8087 	beq.w	80039be <__ieee754_exp+0x186>
 80038b0:	4638      	mov	r0, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b8:	f000 b966 	b.w	8003b88 <__math_uflow>
 80038bc:	4b94      	ldr	r3, [pc, #592]	@ (8003b10 <__ieee754_exp+0x2d8>)
 80038be:	429a      	cmp	r2, r3
 80038c0:	f240 80a9 	bls.w	8003a16 <__ieee754_exp+0x1de>
 80038c4:	4b93      	ldr	r3, [pc, #588]	@ (8003b14 <__ieee754_exp+0x2dc>)
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d879      	bhi.n	80039be <__ieee754_exp+0x186>
 80038ca:	4b93      	ldr	r3, [pc, #588]	@ (8003b18 <__ieee754_exp+0x2e0>)
 80038cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	4620      	mov	r0, r4
 80038d6:	4629      	mov	r1, r5
 80038d8:	f7fc fc7a 	bl	80001d0 <__aeabi_dsub>
 80038dc:	4b8f      	ldr	r3, [pc, #572]	@ (8003b1c <__ieee754_exp+0x2e4>)
 80038de:	00f7      	lsls	r7, r6, #3
 80038e0:	443b      	add	r3, r7
 80038e2:	ed93 7b00 	vldr	d7, [r3]
 80038e6:	ed8d 7b00 	vstr	d7, [sp]
 80038ea:	f1c6 0a01 	rsb	sl, r6, #1
 80038ee:	4680      	mov	r8, r0
 80038f0:	4689      	mov	r9, r1
 80038f2:	ebaa 0a06 	sub.w	sl, sl, r6
 80038f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038fa:	4640      	mov	r0, r8
 80038fc:	4649      	mov	r1, r9
 80038fe:	f7fc fc67 	bl	80001d0 <__aeabi_dsub>
 8003902:	4604      	mov	r4, r0
 8003904:	460d      	mov	r5, r1
 8003906:	4622      	mov	r2, r4
 8003908:	462b      	mov	r3, r5
 800390a:	4620      	mov	r0, r4
 800390c:	4629      	mov	r1, r5
 800390e:	f7fc fe17 	bl	8000540 <__aeabi_dmul>
 8003912:	a36b      	add	r3, pc, #428	@ (adr r3, 8003ac0 <__ieee754_exp+0x288>)
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	4606      	mov	r6, r0
 800391a:	460f      	mov	r7, r1
 800391c:	f7fc fe10 	bl	8000540 <__aeabi_dmul>
 8003920:	a369      	add	r3, pc, #420	@ (adr r3, 8003ac8 <__ieee754_exp+0x290>)
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f7fc fc53 	bl	80001d0 <__aeabi_dsub>
 800392a:	4632      	mov	r2, r6
 800392c:	463b      	mov	r3, r7
 800392e:	f7fc fe07 	bl	8000540 <__aeabi_dmul>
 8003932:	a367      	add	r3, pc, #412	@ (adr r3, 8003ad0 <__ieee754_exp+0x298>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fc4c 	bl	80001d4 <__adddf3>
 800393c:	4632      	mov	r2, r6
 800393e:	463b      	mov	r3, r7
 8003940:	f7fc fdfe 	bl	8000540 <__aeabi_dmul>
 8003944:	a364      	add	r3, pc, #400	@ (adr r3, 8003ad8 <__ieee754_exp+0x2a0>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc fc41 	bl	80001d0 <__aeabi_dsub>
 800394e:	4632      	mov	r2, r6
 8003950:	463b      	mov	r3, r7
 8003952:	f7fc fdf5 	bl	8000540 <__aeabi_dmul>
 8003956:	a362      	add	r3, pc, #392	@ (adr r3, 8003ae0 <__ieee754_exp+0x2a8>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f7fc fc3a 	bl	80001d4 <__adddf3>
 8003960:	4632      	mov	r2, r6
 8003962:	463b      	mov	r3, r7
 8003964:	f7fc fdec 	bl	8000540 <__aeabi_dmul>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	f7fc fc2e 	bl	80001d0 <__aeabi_dsub>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4606      	mov	r6, r0
 800397a:	460f      	mov	r7, r1
 800397c:	4620      	mov	r0, r4
 800397e:	4629      	mov	r1, r5
 8003980:	f7fc fdde 	bl	8000540 <__aeabi_dmul>
 8003984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003988:	f1ba 0f00 	cmp.w	sl, #0
 800398c:	d15c      	bne.n	8003a48 <__ieee754_exp+0x210>
 800398e:	2200      	movs	r2, #0
 8003990:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003994:	4630      	mov	r0, r6
 8003996:	4639      	mov	r1, r7
 8003998:	f7fc fc1a 	bl	80001d0 <__aeabi_dsub>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039a4:	f7fc fef6 	bl	8000794 <__aeabi_ddiv>
 80039a8:	4622      	mov	r2, r4
 80039aa:	462b      	mov	r3, r5
 80039ac:	f7fc fc10 	bl	80001d0 <__aeabi_dsub>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	2000      	movs	r0, #0
 80039b6:	495a      	ldr	r1, [pc, #360]	@ (8003b20 <__ieee754_exp+0x2e8>)
 80039b8:	f7fc fc0a 	bl	80001d0 <__aeabi_dsub>
 80039bc:	e754      	b.n	8003868 <__ieee754_exp+0x30>
 80039be:	4b59      	ldr	r3, [pc, #356]	@ (8003b24 <__ieee754_exp+0x2ec>)
 80039c0:	4620      	mov	r0, r4
 80039c2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80039c6:	4629      	mov	r1, r5
 80039c8:	a347      	add	r3, pc, #284	@ (adr r3, 8003ae8 <__ieee754_exp+0x2b0>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f7fc fdb7 	bl	8000540 <__aeabi_dmul>
 80039d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80039d6:	f7fc fbfd 	bl	80001d4 <__adddf3>
 80039da:	f7fd f84b 	bl	8000a74 <__aeabi_d2iz>
 80039de:	4682      	mov	sl, r0
 80039e0:	f7fc fd44 	bl	800046c <__aeabi_i2d>
 80039e4:	a342      	add	r3, pc, #264	@ (adr r3, 8003af0 <__ieee754_exp+0x2b8>)
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	4606      	mov	r6, r0
 80039ec:	460f      	mov	r7, r1
 80039ee:	f7fc fda7 	bl	8000540 <__aeabi_dmul>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4620      	mov	r0, r4
 80039f8:	4629      	mov	r1, r5
 80039fa:	f7fc fbe9 	bl	80001d0 <__aeabi_dsub>
 80039fe:	a33e      	add	r3, pc, #248	@ (adr r3, 8003af8 <__ieee754_exp+0x2c0>)
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	4680      	mov	r8, r0
 8003a06:	4689      	mov	r9, r1
 8003a08:	4630      	mov	r0, r6
 8003a0a:	4639      	mov	r1, r7
 8003a0c:	f7fc fd98 	bl	8000540 <__aeabi_dmul>
 8003a10:	e9cd 0100 	strd	r0, r1, [sp]
 8003a14:	e76f      	b.n	80038f6 <__ieee754_exp+0xbe>
 8003a16:	4b44      	ldr	r3, [pc, #272]	@ (8003b28 <__ieee754_exp+0x2f0>)
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d810      	bhi.n	8003a3e <__ieee754_exp+0x206>
 8003a1c:	a338      	add	r3, pc, #224	@ (adr r3, 8003b00 <__ieee754_exp+0x2c8>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	4620      	mov	r0, r4
 8003a24:	4629      	mov	r1, r5
 8003a26:	f7fc fbd5 	bl	80001d4 <__adddf3>
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b20 <__ieee754_exp+0x2e8>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f7fd f817 	bl	8000a60 <__aeabi_dcmpgt>
 8003a32:	b138      	cbz	r0, 8003a44 <__ieee754_exp+0x20c>
 8003a34:	4b3a      	ldr	r3, [pc, #232]	@ (8003b20 <__ieee754_exp+0x2e8>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	4620      	mov	r0, r4
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	e712      	b.n	8003864 <__ieee754_exp+0x2c>
 8003a3e:	f04f 0a00 	mov.w	sl, #0
 8003a42:	e760      	b.n	8003906 <__ieee754_exp+0xce>
 8003a44:	4682      	mov	sl, r0
 8003a46:	e75e      	b.n	8003906 <__ieee754_exp+0xce>
 8003a48:	4632      	mov	r2, r6
 8003a4a:	463b      	mov	r3, r7
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003a52:	f7fc fbbd 	bl	80001d0 <__aeabi_dsub>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a5e:	f7fc fe99 	bl	8000794 <__aeabi_ddiv>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a6a:	f7fc fbb1 	bl	80001d0 <__aeabi_dsub>
 8003a6e:	4642      	mov	r2, r8
 8003a70:	464b      	mov	r3, r9
 8003a72:	f7fc fbad 	bl	80001d0 <__aeabi_dsub>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	4928      	ldr	r1, [pc, #160]	@ (8003b20 <__ieee754_exp+0x2e8>)
 8003a7e:	f7fc fba7 	bl	80001d0 <__aeabi_dsub>
 8003a82:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8003a86:	4592      	cmp	sl, r2
 8003a88:	db02      	blt.n	8003a90 <__ieee754_exp+0x258>
 8003a8a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8003a8e:	e6eb      	b.n	8003868 <__ieee754_exp+0x30>
 8003a90:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8003a94:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8003a9e:	f7fc fd4f 	bl	8000540 <__aeabi_dmul>
 8003aa2:	e6e1      	b.n	8003868 <__ieee754_exp+0x30>
 8003aa4:	2400      	movs	r4, #0
 8003aa6:	2500      	movs	r5, #0
 8003aa8:	e6e4      	b.n	8003874 <__ieee754_exp+0x3c>
 8003aaa:	bf00      	nop
 8003aac:	f3af 8000 	nop.w
 8003ab0:	fefa39ef 	.word	0xfefa39ef
 8003ab4:	40862e42 	.word	0x40862e42
 8003ab8:	d52d3051 	.word	0xd52d3051
 8003abc:	c0874910 	.word	0xc0874910
 8003ac0:	72bea4d0 	.word	0x72bea4d0
 8003ac4:	3e663769 	.word	0x3e663769
 8003ac8:	c5d26bf1 	.word	0xc5d26bf1
 8003acc:	3ebbbd41 	.word	0x3ebbbd41
 8003ad0:	af25de2c 	.word	0xaf25de2c
 8003ad4:	3f11566a 	.word	0x3f11566a
 8003ad8:	16bebd93 	.word	0x16bebd93
 8003adc:	3f66c16c 	.word	0x3f66c16c
 8003ae0:	5555553e 	.word	0x5555553e
 8003ae4:	3fc55555 	.word	0x3fc55555
 8003ae8:	652b82fe 	.word	0x652b82fe
 8003aec:	3ff71547 	.word	0x3ff71547
 8003af0:	fee00000 	.word	0xfee00000
 8003af4:	3fe62e42 	.word	0x3fe62e42
 8003af8:	35793c76 	.word	0x35793c76
 8003afc:	3dea39ef 	.word	0x3dea39ef
 8003b00:	8800759c 	.word	0x8800759c
 8003b04:	7e37e43c 	.word	0x7e37e43c
 8003b08:	40862e41 	.word	0x40862e41
 8003b0c:	7fefffff 	.word	0x7fefffff
 8003b10:	3fd62e42 	.word	0x3fd62e42
 8003b14:	3ff0a2b1 	.word	0x3ff0a2b1
 8003b18:	0800b238 	.word	0x0800b238
 8003b1c:	0800b228 	.word	0x0800b228
 8003b20:	3ff00000 	.word	0x3ff00000
 8003b24:	0800b248 	.word	0x0800b248
 8003b28:	3defffff 	.word	0x3defffff

08003b2c <with_errno>:
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	ed2d 8b02 	vpush	{d8}
 8003b32:	eeb0 8a40 	vmov.f32	s16, s0
 8003b36:	eef0 8a60 	vmov.f32	s17, s1
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	f7ff fdfc 	bl	8003738 <__errno>
 8003b40:	eeb0 0a48 	vmov.f32	s0, s16
 8003b44:	eef0 0a68 	vmov.f32	s1, s17
 8003b48:	ecbd 8b02 	vpop	{d8}
 8003b4c:	6004      	str	r4, [r0, #0]
 8003b4e:	bd10      	pop	{r4, pc}

08003b50 <xflow>:
 8003b50:	4603      	mov	r3, r0
 8003b52:	b507      	push	{r0, r1, r2, lr}
 8003b54:	ec51 0b10 	vmov	r0, r1, d0
 8003b58:	b183      	cbz	r3, 8003b7c <xflow+0x2c>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003b60:	e9cd 2300 	strd	r2, r3, [sp]
 8003b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b68:	f7fc fcea 	bl	8000540 <__aeabi_dmul>
 8003b6c:	ec41 0b10 	vmov	d0, r0, r1
 8003b70:	2022      	movs	r0, #34	@ 0x22
 8003b72:	b003      	add	sp, #12
 8003b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b78:	f7ff bfd8 	b.w	8003b2c <with_errno>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	e7ee      	b.n	8003b60 <xflow+0x10>
 8003b82:	0000      	movs	r0, r0
 8003b84:	0000      	movs	r0, r0
	...

08003b88 <__math_uflow>:
 8003b88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003b90 <__math_uflow+0x8>
 8003b8c:	f7ff bfe0 	b.w	8003b50 <xflow>
 8003b90:	00000000 	.word	0x00000000
 8003b94:	10000000 	.word	0x10000000

08003b98 <__math_oflow>:
 8003b98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003ba0 <__math_oflow+0x8>
 8003b9c:	f7ff bfd8 	b.w	8003b50 <xflow>
 8003ba0:	00000000 	.word	0x00000000
 8003ba4:	70000000 	.word	0x70000000

08003ba8 <_init>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	bf00      	nop
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr

08003bb4 <_fini>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr
