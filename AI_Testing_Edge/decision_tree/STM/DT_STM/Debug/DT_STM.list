
DT_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08002e6c  08002e6c  00003e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f9c  08002f9c  000051e4  2**0
                  CONTENTS
  4 .ARM          00000000  08002f9c  08002f9c  000051e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f9c  08002f9c  000051e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f9c  08002f9c  00003f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fa0  08002fa0  00003fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000011e4  20000000  08002fa4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000051e4  2**0
                  CONTENTS
 10 .bss          000001c0  200011e4  200011e4  000051e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200013a4  200013a4  000051e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000051e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009729  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018de  00000000  00000000  0000e93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  00010220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f840  00000000  00000000  00010c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbcd  00000000  00000000  00030470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be51f  00000000  00000000  0003c03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa55c  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000007a6  00000000  00000000  000fa59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002c20  00000000  00000000  000fad48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  000fd968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200011e4 	.word	0x200011e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e54 	.word	0x08002e54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200011e8 	.word	0x200011e8
 80001c4:	08002e54 	.word	0x08002e54

080001c8 <buildTree>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
TreeNodeIndex buildTree(int index[DEPTH][1 << (DEPTH-1)], float condition[DEPTH][1 << (DEPTH-1)], int * results, int level, int rowNumber){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
//	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
//	  HAL_Delay(100);
//	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(100);
	TreeNodeIndex node = (TreeNodeIndex)malloc(sizeof(TreeNode));
 80001d6:	201c      	movs	r0, #28
 80001d8:	f002 fd34 	bl	8002c44 <malloc>
 80001dc:	4603      	mov	r3, r0
 80001de:	617b      	str	r3, [r7, #20]
    if (!node) {
 80001e0:	697b      	ldr	r3, [r7, #20]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d101      	bne.n	80001ea <buildTree+0x22>
        return NULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	e048      	b.n	800027c <buildTree+0xb4>
    }
    node -> level = level;
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	60da      	str	r2, [r3, #12]
    node -> rowNumber = rowNumber;
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	6a3a      	ldr	r2, [r7, #32]
 80001f4:	611a      	str	r2, [r3, #16]
    if (level >= DEPTH){
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	2b05      	cmp	r3, #5
 80001fa:	dd0e      	ble.n	800021a <buildTree+0x52>
        node->result = results[rowNumber];
 80001fc:	6a3b      	ldr	r3, [r7, #32]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	609a      	str	r2, [r3, #8]
        node->below = NULL;
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	2200      	movs	r2, #0
 800020e:	615a      	str	r2, [r3, #20]
        node->over = NULL;
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	2200      	movs	r2, #0
 8000214:	619a      	str	r2, [r3, #24]
        return node;
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	e030      	b.n	800027c <buildTree+0xb4>
    }
    node->index = index[level][rowNumber];
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	01db      	lsls	r3, r3, #7
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	4413      	add	r3, r2
 8000222:	6a3a      	ldr	r2, [r7, #32]
 8000224:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	605a      	str	r2, [r3, #4]
    node->condition = condition[level][rowNumber];
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	01db      	lsls	r3, r3, #7
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	441a      	add	r2, r3
 8000234:	6a3b      	ldr	r3, [r7, #32]
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4413      	add	r3, r2
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	601a      	str	r2, [r3, #0]
    node->below = buildTree(index, condition, results, level+1, rowNumber*2);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	6a3b      	ldr	r3, [r7, #32]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	4613      	mov	r3, r2
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	68b9      	ldr	r1, [r7, #8]
 8000250:	68f8      	ldr	r0, [r7, #12]
 8000252:	f7ff ffb9 	bl	80001c8 <buildTree>
 8000256:	4602      	mov	r2, r0
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	615a      	str	r2, [r3, #20]
    node->over = buildTree(index, condition, results, level+1, rowNumber*2 + 1);
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	1c5a      	adds	r2, r3, #1
 8000260:	6a3b      	ldr	r3, [r7, #32]
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	3301      	adds	r3, #1
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	4613      	mov	r3, r2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ffaa 	bl	80001c8 <buildTree>
 8000274:	4602      	mov	r2, r0
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	619a      	str	r2, [r3, #24]
    return node;
 800027a:	697b      	ldr	r3, [r7, #20]
}
 800027c:	4618      	mov	r0, r3
 800027e:	3718      	adds	r7, #24
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <initTree>:

TreeNodeIndex initTree(){
 8000284:	b580      	push	{r7, lr}
 8000286:	f5ad 6de2 	sub.w	sp, sp, #1808	@ 0x710
 800028a:	af02      	add	r7, sp, #8
	int index[DEPTH][1 << (DEPTH-1)] =  {
 800028c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000290:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000294:	4618      	mov	r0, r3
 8000296:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800029a:	461a      	mov	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fd87 	bl	8002db0 <memset>
 80002a2:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002a6:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002aa:	220a      	movs	r2, #10
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002b2:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002b6:	2202      	movs	r2, #2
 80002b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80002bc:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002c0:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002c4:	2201      	movs	r2, #1
 80002c6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 80002ca:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002ce:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002d2:	2204      	movs	r2, #4
 80002d4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 80002d8:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002dc:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002e0:	2203      	movs	r2, #3
 80002e2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 80002e6:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002ea:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002ee:	2209      	movs	r2, #9
 80002f0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 80002f4:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002f8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002fc:	220a      	movs	r2, #10
 80002fe:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 8000302:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000306:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800030a:	2201      	movs	r2, #1
 800030c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 8000310:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000314:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000318:	2209      	movs	r2, #9
 800031a:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
 800031e:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000322:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000326:	2206      	movs	r2, #6
 8000328:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
 800032c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000330:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000334:	2207      	movs	r2, #7
 8000336:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
		{0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,3,9,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,9,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0},
	};
	float condition[DEPTH][1 << (DEPTH-1)] =   {
 800033a:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800033e:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000342:	4618      	mov	r0, r3
 8000344:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000348:	461a      	mov	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f002 fd30 	bl	8002db0 <memset>
 8000350:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000354:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000358:	4a33      	ldr	r2, [pc, #204]	@ (8000428 <initTree+0x1a4>)
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000360:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000364:	4a31      	ldr	r2, [pc, #196]	@ (800042c <initTree+0x1a8>)
 8000366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800036a:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800036e:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000372:	4a2f      	ldr	r2, [pc, #188]	@ (8000430 <initTree+0x1ac>)
 8000374:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8000378:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800037c:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000380:	4a2c      	ldr	r2, [pc, #176]	@ (8000434 <initTree+0x1b0>)
 8000382:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8000386:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800038a:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 800038e:	4a2a      	ldr	r2, [pc, #168]	@ (8000438 <initTree+0x1b4>)
 8000390:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 8000394:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000398:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 800039c:	4a27      	ldr	r2, [pc, #156]	@ (800043c <initTree+0x1b8>)
 800039e:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 80003a2:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003a6:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003aa:	4a25      	ldr	r2, [pc, #148]	@ (8000440 <initTree+0x1bc>)
 80003ac:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 80003b0:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003b4:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003b8:	4a22      	ldr	r2, [pc, #136]	@ (8000444 <initTree+0x1c0>)
 80003ba:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 80003be:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003c2:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003c6:	4a20      	ldr	r2, [pc, #128]	@ (8000448 <initTree+0x1c4>)
 80003c8:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
 80003cc:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003d0:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003d4:	4a1d      	ldr	r2, [pc, #116]	@ (800044c <initTree+0x1c8>)
 80003d6:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
 80003da:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003de:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000450 <initTree+0x1cc>)
 80003e4:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
		{0,0,9.5,23.94119167327881,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,21.209446907043457,0.048063503578305244,0.05069274269044399,5.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0.07197032496333122,54.67359733581543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61.73231315612793,0,0},
	};
    int results[1 << (DEPTH)] = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,1,1,1,1,3,3,3,3,2,2,2,2,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0};
 80003e8:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003ec:	f2a3 7304 	subw	r3, r3, #1796	@ 0x704
 80003f0:	4a18      	ldr	r2, [pc, #96]	@ (8000454 <initTree+0x1d0>)
 80003f2:	4618      	mov	r0, r3
 80003f4:	4611      	mov	r1, r2
 80003f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003fa:	461a      	mov	r2, r3
 80003fc:	f002 fd1c 	bl	8002e38 <memcpy>
    TreeNodeIndex tree = buildTree(index, condition, results, 0, 0);
 8000400:	1d3a      	adds	r2, r7, #4
 8000402:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8000406:	f207 4004 	addw	r0, r7, #1028	@ 0x404
 800040a:	2300      	movs	r3, #0
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	f7ff feda 	bl	80001c8 <buildTree>
 8000414:	f8c7 0704 	str.w	r0, [r7, #1796]	@ 0x704
    return tree;
 8000418:	f8d7 3704 	ldr.w	r3, [r7, #1796]	@ 0x704
}
 800041c:	4618      	mov	r0, r3
 800041e:	f507 67e1 	add.w	r7, r7, #1800	@ 0x708
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	3cdbd528 	.word	0x3cdbd528
 800042c:	41a70ed4 	.word	0x41a70ed4
 8000430:	41180000 	.word	0x41180000
 8000434:	41bf8790 	.word	0x41bf8790
 8000438:	41a9acf2 	.word	0x41a9acf2
 800043c:	3d44de3c 	.word	0x3d44de3c
 8000440:	3d4fa332 	.word	0x3d4fa332
 8000444:	40b00000 	.word	0x40b00000
 8000448:	3d93652e 	.word	0x3d93652e
 800044c:	425ab1c4 	.word	0x425ab1c4
 8000450:	4276ede4 	.word	0x4276ede4
 8000454:	08002e6c 	.word	0x08002e6c

08000458 <getResult>:

int getResult(float * data, TreeNodeIndex initTree){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
    TreeNodeIndex node = initTree;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	60fb      	str	r3, [r7, #12]
    while(node->below!=NULL){
 8000466:	e015      	b.n	8000494 <getResult+0x3c>
        if(data[node->index]>node->condition){
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	ed93 7a00 	vldr	s14, [r3]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	edd3 7a00 	vldr	s15, [r3]
 800047c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000484:	dd03      	ble.n	800048e <getResult+0x36>
            node = node->over;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e002      	b.n	8000494 <getResult+0x3c>
        }
        else{
            node = node->below;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	60fb      	str	r3, [r7, #12]
    while(node->below!=NULL){
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d1e5      	bne.n	8000468 <getResult+0x10>
        }
    }
    return node->result;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	689b      	ldr	r3, [r3, #8]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa26 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f828 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f8b0 	bl	800061c <MX_GPIO_Init>
  MX_TIM2_Init();
 80004bc:	f000 f860 	bl	8000580 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TREE = initTree();
 80004c0:	f7ff fee0 	bl	8000284 <initTree>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000500 <main+0x54>)
 80004c8:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 80004ca:	480e      	ldr	r0, [pc, #56]	@ (8000504 <main+0x58>)
 80004cc:	f001 ffc0 	bl	8002450 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2120      	movs	r1, #32
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d8:	f000 fd20 	bl	8000f1c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e0:	f000 fa74 	bl	80009cc <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2120      	movs	r1, #32
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ec:	f000 fd16 	bl	8000f1c <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80004f0:	20fa      	movs	r0, #250	@ 0xfa
 80004f2:	f000 fa6b 	bl	80009cc <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80004f6:	2101      	movs	r1, #1
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 fd27 	bl	8000f4c <HAL_PWR_EnterSLEEPMode>
 80004fe:	e7fa      	b.n	80004f6 <main+0x4a>
 8000500:	2000124c 	.word	0x2000124c
 8000504:	20001200 	.word	0x20001200

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b090      	sub	sp, #64	@ 0x40
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	2228      	movs	r2, #40	@ 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fc4a 	bl	8002db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000532:	2310      	movs	r3, #16
 8000534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000536:	2300      	movs	r3, #0
 8000538:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fd20 	bl	8000f84 <HAL_RCC_OscConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800054a:	f000 f8df 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	230f      	movs	r3, #15
 8000550:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fd4a 	bl	8002000 <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000572:	f000 f8cb 	bl	800070c <Error_Handler>
  }
}
 8000576:	bf00      	nop
 8000578:	3740      	adds	r7, #64	@ 0x40
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800059e:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <MX_TIM2_Init+0x98>)
 80005a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <MX_TIM2_Init+0x98>)
 80005a8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <MX_TIM2_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_TIM2_Init+0x98>)
 80005b6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005bc:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <MX_TIM2_Init+0x98>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c2:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <MX_TIM2_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005c8:	4813      	ldr	r0, [pc, #76]	@ (8000618 <MX_TIM2_Init+0x98>)
 80005ca:	f001 fee9 	bl	80023a0 <HAL_TIM_Base_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80005d4:	f000 f89a 	bl	800070c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	480c      	ldr	r0, [pc, #48]	@ (8000618 <MX_TIM2_Init+0x98>)
 80005e6:	f002 f891 	bl	800270c <HAL_TIM_ConfigClockSource>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80005f0:	f000 f88c 	bl	800070c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_TIM2_Init+0x98>)
 8000602:	f002 fa93 	bl	8002b2c <HAL_TIMEx_MasterConfigSynchronization>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800060c:	f000 f87e 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20001200 	.word	0x20001200

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_GPIO_Init+0x5c>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a10      	ldr	r2, [pc, #64]	@ (8000678 <MX_GPIO_Init+0x5c>)
 8000636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063a:	6153      	str	r3, [r2, #20]
 800063c:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <MX_GPIO_Init+0x5c>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2120      	movs	r1, #32
 800064c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000650:	f000 fc64 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4619      	mov	r1, r3
 8000668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066c:	f000 fae4 	bl	8000c38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800068c:	d134      	bne.n	80006f8 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
    	int inferenceResult = getResult(data_array[currentData], TREE);
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	222c      	movs	r2, #44	@ 0x2c
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	4a1a      	ldr	r2, [pc, #104]	@ (8000704 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800069a:	4413      	add	r3, r2
 800069c:	4a1a      	ldr	r2, [pc, #104]	@ (8000708 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fed8 	bl	8000458 <getResult>
 80006a8:	60b8      	str	r0, [r7, #8]
    	if (currentData>=DATA_ROWS) currentData = 0;
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b65      	cmp	r3, #101	@ 0x65
 80006b0:	dd03      	ble.n	80006ba <HAL_TIM_PeriodElapsedCallback+0x3e>
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e004      	b.n	80006c4 <HAL_TIM_PeriodElapsedCallback+0x48>
    	else currentData++;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006c2:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2120      	movs	r1, #32
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006cc:	f000 fc26 	bl	8000f1c <HAL_GPIO_WritePin>
	  for(int i=0; i<(inferenceResult + 1) * 250; i++){};
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e002      	b.n	80006dc <HAL_TIM_PeriodElapsedCallback+0x60>
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	3301      	adds	r3, #1
 80006e0:	22fa      	movs	r2, #250	@ 0xfa
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dbf4      	blt.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x5a>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2120      	movs	r1, #32
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f4:	f000 fc12 	bl	8000f1c <HAL_GPIO_WritePin>
    }
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20001250 	.word	0x20001250
 8000704:	20000000 	.word	0x20000000
 8000708:	2000124c 	.word	0x2000124c

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <Error_Handler+0x8>

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <HAL_MspInit+0x44>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a0e      	ldr	r2, [pc, #56]	@ (800075c <HAL_MspInit+0x44>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <HAL_MspInit+0x44>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <HAL_MspInit+0x44>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <HAL_MspInit+0x44>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_MspInit+0x44>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000770:	d113      	bne.n	800079a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <HAL_TIM_Base_MspInit+0x44>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <HAL_TIM_Base_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_TIM_Base_MspInit+0x44>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	201c      	movs	r0, #28
 8000790:	f000 fa1b 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000794:	201c      	movs	r0, #28
 8000796:	f000 fa34 	bl	8000c02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <NMI_Handler+0x4>

080007b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <UsageFault_Handler+0x4>

080007d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fe:	f000 f8c5 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800080c:	4802      	ldr	r0, [pc, #8]	@ (8000818 <TIM2_IRQHandler+0x10>)
 800080e:	f001 fe7b 	bl	8002508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20001200 	.word	0x20001200

0800081c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000824:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <_sbrk+0x5c>)
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <_sbrk+0x60>)
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <_sbrk+0x64>)
 800083a:	4a12      	ldr	r2, [pc, #72]	@ (8000884 <_sbrk+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	429a      	cmp	r2, r3
 800084a:	d207      	bcs.n	800085c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800084c:	f002 fac8 	bl	8002de0 <__errno>
 8000850:	4603      	mov	r3, r0
 8000852:	220c      	movs	r2, #12
 8000854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	e009      	b.n	8000870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000862:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	4a05      	ldr	r2, [pc, #20]	@ (8000880 <_sbrk+0x64>)
 800086c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20003000 	.word	0x20003000
 800087c:	00000400 	.word	0x00000400
 8000880:	20001254 	.word	0x20001254
 8000884:	200013a8 	.word	0x200013a8

08000888 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b0:	f7ff ffea 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	@ (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	@ (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008da:	f002 fa87 	bl	8002dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008de:	f7ff fde5 	bl	80004ac <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	200011e4 	.word	0x200011e4
  ldr r2, =_sidata
 80008f0:	08002fa4 	.word	0x08002fa4
  ldr r2, =_sbss
 80008f4:	200011e4 	.word	0x200011e4
  ldr r4, =_ebss
 80008f8:	200013a4 	.word	0x200013a4

080008fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_2_IRQHandler>
	...

08000900 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_Init+0x28>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_Init+0x28>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f94f 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	200f      	movs	r0, #15
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fefc 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f967 	bl	8000c1e <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f92f 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	@ (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20001188 	.word	0x20001188
 8000984:	20001190 	.word	0x20001190
 8000988:	2000118c 	.word	0x2000118c

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20001190 	.word	0x20001190
 80009b0:	20001258 	.word	0x20001258

080009b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20001258 	.word	0x20001258

080009cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff ffee 	bl	80009b4 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffde 	bl	80009b4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20001190 	.word	0x20001190

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0b      	blt.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4907      	ldr	r1, [pc, #28]	@ (8000ab0 <__NVIC_EnableIRQ+0x38>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db0a      	blt.n	8000ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	490c      	ldr	r1, [pc, #48]	@ (8000b00 <__NVIC_SetPriority+0x4c>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000adc:	e00a      	b.n	8000af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4908      	ldr	r1, [pc, #32]	@ (8000b04 <__NVIC_SetPriority+0x50>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3b04      	subs	r3, #4
 8000aec:	0112      	lsls	r2, r2, #4
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	440b      	add	r3, r1
 8000af2:	761a      	strb	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf28      	it	cs
 8000b26:	2304      	movcs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d902      	bls.n	8000b38 <NVIC_EncodePriority+0x30>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3b03      	subs	r3, #3
 8000b36:	e000      	b.n	8000b3a <NVIC_EncodePriority+0x32>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43d9      	mvns	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4313      	orrs	r3, r2
         );
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	@ 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f7ff ff8e 	bl	8000ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff29 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff3e 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff8e 	bl	8000b08 <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5d 	bl	8000ab4 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff31 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa2 	bl	8000b70 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c46:	e14e      	b.n	8000ee6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8140 	beq.w	8000ee0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d005      	beq.n	8000c78 <HAL_GPIO_Init+0x40>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d130      	bne.n	8000cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	f003 0201 	and.w	r2, r3, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d017      	beq.n	8000d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d123      	bne.n	8000d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	6939      	ldr	r1, [r7, #16]
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0203 	and.w	r2, r3, #3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 809a 	beq.w	8000ee0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4b55      	ldr	r3, [pc, #340]	@ (8000f04 <HAL_GPIO_Init+0x2cc>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a54      	ldr	r2, [pc, #336]	@ (8000f04 <HAL_GPIO_Init+0x2cc>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b52      	ldr	r3, [pc, #328]	@ (8000f04 <HAL_GPIO_Init+0x2cc>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc4:	4a50      	ldr	r2, [pc, #320]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1e0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a46      	ldr	r2, [pc, #280]	@ (8000f0c <HAL_GPIO_Init+0x2d4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1dc>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a45      	ldr	r2, [pc, #276]	@ (8000f10 <HAL_GPIO_Init+0x2d8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1d8>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a44      	ldr	r2, [pc, #272]	@ (8000f14 <HAL_GPIO_Init+0x2dc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1d4>
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e2a:	4937      	ldr	r1, [pc, #220]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e38:	4b37      	ldr	r3, [pc, #220]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e86:	4a24      	ldr	r2, [pc, #144]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb0:	4a19      	ldr	r2, [pc, #100]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eda:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f aea9 	bne.w	8000c48 <HAL_GPIO_Init+0x10>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000c00 	.word	0x48000c00
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000f5e:	f023 0304 	bic.w	r3, r3, #4
 8000f62:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000f6a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8000f6c:	e002      	b.n	8000f74 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8000f6e:	bf40      	sev
    __WFE();
 8000f70:	bf20      	wfe
    __WFE();
 8000f72:	bf20      	wfe
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f94:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f001 b823 	b.w	8001ff0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 817d 	beq.w	80012ba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fc0:	4bbc      	ldr	r3, [pc, #752]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d00c      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fcc:	4bb9      	ldr	r3, [pc, #740]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d15c      	bne.n	8001092 <HAL_RCC_OscConfig+0x10e>
 8000fd8:	4bb6      	ldr	r3, [pc, #728]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fe4:	d155      	bne.n	8001092 <HAL_RCC_OscConfig+0x10e>
 8000fe6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fea:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000ff2:	fa93 f3a3 	rbit	r3, r3
 8000ff6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ffa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	095b      	lsrs	r3, r3, #5
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d102      	bne.n	8001018 <HAL_RCC_OscConfig+0x94>
 8001012:	4ba8      	ldr	r3, [pc, #672]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	e015      	b.n	8001044 <HAL_RCC_OscConfig+0xc0>
 8001018:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800101c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800102c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001030:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001034:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001040:	4b9c      	ldr	r3, [pc, #624]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8001042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001044:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001048:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800104c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001050:	fa92 f2a2 	rbit	r2, r2
 8001054:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001058:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800105c:	fab2 f282 	clz	r2, r2
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	f042 0220 	orr.w	r2, r2, #32
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	f002 021f 	and.w	r2, r2, #31
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f202 	lsl.w	r2, r1, r2
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 811f 	beq.w	80012b8 <HAL_RCC_OscConfig+0x334>
 800107a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800107e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f040 8116 	bne.w	80012b8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	f000 bfaf 	b.w	8001ff0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001096:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x12e>
 80010a4:	4b83      	ldr	r3, [pc, #524]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a82      	ldr	r2, [pc, #520]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80010aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e036      	b.n	8001120 <HAL_RCC_OscConfig+0x19c>
 80010b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x158>
 80010c2:	4b7c      	ldr	r3, [pc, #496]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a7b      	ldr	r2, [pc, #492]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80010c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b79      	ldr	r3, [pc, #484]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a78      	ldr	r2, [pc, #480]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80010d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e021      	b.n	8001120 <HAL_RCC_OscConfig+0x19c>
 80010dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x184>
 80010ee:	4b71      	ldr	r3, [pc, #452]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a70      	ldr	r2, [pc, #448]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6e      	ldr	r3, [pc, #440]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6d      	ldr	r2, [pc, #436]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0x19c>
 8001108:	4b6a      	ldr	r3, [pc, #424]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a69      	ldr	r2, [pc, #420]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b67      	ldr	r3, [pc, #412]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a66      	ldr	r2, [pc, #408]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001120:	4b64      	ldr	r3, [pc, #400]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8001122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001124:	f023 020f 	bic.w	r2, r3, #15
 8001128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800112c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	495f      	ldr	r1, [pc, #380]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8001136:	4313      	orrs	r3, r2
 8001138:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800113a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800113e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d059      	beq.n	80011fe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fc33 	bl	80009b4 <HAL_GetTick>
 800114e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	e00a      	b.n	800116a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fc2e 	bl	80009b4 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b64      	cmp	r3, #100	@ 0x64
 8001162:	d902      	bls.n	800116a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	f000 bf43 	b.w	8001ff0 <HAL_RCC_OscConfig+0x106c>
 800116a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800116e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800117e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	095b      	lsrs	r3, r3, #5
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d102      	bne.n	800119c <HAL_RCC_OscConfig+0x218>
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	e015      	b.n	80011c8 <HAL_RCC_OscConfig+0x244>
 800119c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011a0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80011b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011b4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80011b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011cc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80011d0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80011d4:	fa92 f2a2 	rbit	r2, r2
 80011d8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80011dc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80011e0:	fab2 f282 	clz	r2, r2
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	f042 0220 	orr.w	r2, r2, #32
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f002 021f 	and.w	r2, r2, #31
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0ab      	beq.n	8001154 <HAL_RCC_OscConfig+0x1d0>
 80011fc:	e05d      	b.n	80012ba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fbd9 	bl	80009b4 <HAL_GetTick>
 8001202:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	e00a      	b.n	800121e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fbd4 	bl	80009b4 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b64      	cmp	r3, #100	@ 0x64
 8001216:	d902      	bls.n	800121e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	f000 bee9 	b.w	8001ff0 <HAL_RCC_OscConfig+0x106c>
 800121e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001222:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001232:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	095b      	lsrs	r3, r3, #5
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d102      	bne.n	8001250 <HAL_RCC_OscConfig+0x2cc>
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	e015      	b.n	800127c <HAL_RCC_OscConfig+0x2f8>
 8001250:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001254:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001264:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001268:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800126c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 800127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001280:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001284:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001288:	fa92 f2a2 	rbit	r2, r2
 800128c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001290:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001294:	fab2 f282 	clz	r2, r2
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	f042 0220 	orr.w	r2, r2, #32
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	f002 021f 	and.w	r2, r2, #31
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1ab      	bne.n	8001208 <HAL_RCC_OscConfig+0x284>
 80012b0:	e003      	b.n	80012ba <HAL_RCC_OscConfig+0x336>
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 817d 	beq.w	80015ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012d0:	4ba6      	ldr	r3, [pc, #664]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012dc:	4ba3      	ldr	r3, [pc, #652]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d172      	bne.n	80013ce <HAL_RCC_OscConfig+0x44a>
 80012e8:	4ba0      	ldr	r3, [pc, #640]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d16c      	bne.n	80013ce <HAL_RCC_OscConfig+0x44a>
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001306:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	095b      	lsrs	r3, r3, #5
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d102      	bne.n	8001324 <HAL_RCC_OscConfig+0x3a0>
 800131e:	4b93      	ldr	r3, [pc, #588]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	e013      	b.n	800134c <HAL_RCC_OscConfig+0x3c8>
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800133c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001348:	4b88      	ldr	r3, [pc, #544]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134c:	2202      	movs	r2, #2
 800134e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001352:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001356:	fa92 f2a2 	rbit	r2, r2
 800135a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800135e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001362:	fab2 f282 	clz	r2, r2
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	f042 0220 	orr.w	r2, r2, #32
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	f002 021f 	and.w	r2, r2, #31
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f202 	lsl.w	r2, r1, r2
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00a      	beq.n	8001394 <HAL_RCC_OscConfig+0x410>
 800137e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001382:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d002      	beq.n	8001394 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	f000 be2e 	b.w	8001ff0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001394:	4b75      	ldr	r3, [pc, #468]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	21f8      	movs	r1, #248	@ 0xf8
 80013aa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80013b2:	fa91 f1a1 	rbit	r1, r1
 80013b6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80013ba:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80013be:	fab1 f181 	clz	r1, r1
 80013c2:	b2c9      	uxtb	r1, r1
 80013c4:	408b      	lsls	r3, r1
 80013c6:	4969      	ldr	r1, [pc, #420]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013cc:	e0fd      	b.n	80015ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8088 	beq.w	80014f0 <HAL_RCC_OscConfig+0x56c>
 80013e0:	2301      	movs	r3, #1
 80013e2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80013f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001400:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	461a      	mov	r2, r3
 8001408:	2301      	movs	r3, #1
 800140a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fad2 	bl	80009b4 <HAL_GetTick>
 8001410:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e00a      	b.n	800142c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff facd 	bl	80009b4 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d902      	bls.n	800142c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	f000 bde2 	b.w	8001ff0 <HAL_RCC_OscConfig+0x106c>
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800143e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d102      	bne.n	800145c <HAL_RCC_OscConfig+0x4d8>
 8001456:	4b45      	ldr	r3, [pc, #276]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	e013      	b.n	8001484 <HAL_RCC_OscConfig+0x500>
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001474:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001480:	4b3a      	ldr	r3, [pc, #232]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	2202      	movs	r2, #2
 8001486:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800148a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800148e:	fa92 f2a2 	rbit	r2, r2
 8001492:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001496:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800149a:	fab2 f282 	clz	r2, r2
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	f042 0220 	orr.w	r2, r2, #32
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	f002 021f 	and.w	r2, r2, #31
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0af      	beq.n	8001416 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b2d      	ldr	r3, [pc, #180]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	21f8      	movs	r1, #248	@ 0xf8
 80014cc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80014d4:	fa91 f1a1 	rbit	r1, r1
 80014d8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80014dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80014e0:	fab1 f181 	clz	r1, r1
 80014e4:	b2c9      	uxtb	r1, r1
 80014e6:	408b      	lsls	r3, r1
 80014e8:	4920      	ldr	r1, [pc, #128]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
 80014ee:	e06c      	b.n	80015ca <HAL_RCC_OscConfig+0x646>
 80014f0:	2301      	movs	r3, #1
 80014f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001502:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001510:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	461a      	mov	r2, r3
 8001518:	2300      	movs	r3, #0
 800151a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fa4a 	bl	80009b4 <HAL_GetTick>
 8001520:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fa45 	bl	80009b4 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d902      	bls.n	800153c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	f000 bd5a 	b.w	8001ff0 <HAL_RCC_OscConfig+0x106c>
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800154e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d104      	bne.n	8001570 <HAL_RCC_OscConfig+0x5ec>
 8001566:	4b01      	ldr	r3, [pc, #4]	@ (800156c <HAL_RCC_OscConfig+0x5e8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	e015      	b.n	8001598 <HAL_RCC_OscConfig+0x614>
 800156c:	40021000 	.word	0x40021000
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001588:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001594:	4bc8      	ldr	r3, [pc, #800]	@ (80018b8 <HAL_RCC_OscConfig+0x934>)
 8001596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001598:	2202      	movs	r2, #2
 800159a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800159e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80015a2:	fa92 f2a2 	rbit	r2, r2
 80015a6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80015aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80015ae:	fab2 f282 	clz	r2, r2
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	f042 0220 	orr.w	r2, r2, #32
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	f002 021f 	and.w	r2, r2, #31
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1ad      	bne.n	8001526 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8110 	beq.w	8001800 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d079      	beq.n	80016e4 <HAL_RCC_OscConfig+0x760>
 80015f0:	2301      	movs	r3, #1
 80015f2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	4bab      	ldr	r3, [pc, #684]	@ (80018bc <HAL_RCC_OscConfig+0x938>)
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	461a      	mov	r2, r3
 8001616:	2301      	movs	r3, #1
 8001618:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff f9cb 	bl	80009b4 <HAL_GetTick>
 800161e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff f9c6 	bl	80009b4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d902      	bls.n	800163a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	f000 bcdb 	b.w	8001ff0 <HAL_RCC_OscConfig+0x106c>
 800163a:	2302      	movs	r3, #2
 800163c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800164c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001650:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001654:	2202      	movs	r2, #2
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800165c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	fa93 f2a3 	rbit	r2, r3
 8001666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800166a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001678:	2202      	movs	r2, #2
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fa93 f2a3 	rbit	r2, r3
 800168a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001692:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001694:	4b88      	ldr	r3, [pc, #544]	@ (80018b8 <HAL_RCC_OscConfig+0x934>)
 8001696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016a0:	2102      	movs	r1, #2
 80016a2:	6019      	str	r1, [r3, #0]
 80016a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f1a3 	rbit	r1, r3
 80016b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016ba:	6019      	str	r1, [r3, #0]
  return result;
 80016bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0a0      	beq.n	8001624 <HAL_RCC_OscConfig+0x6a0>
 80016e2:	e08d      	b.n	8001800 <HAL_RCC_OscConfig+0x87c>
 80016e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001702:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001706:	601a      	str	r2, [r3, #0]
  return result;
 8001708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001710:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	4b68      	ldr	r3, [pc, #416]	@ (80018bc <HAL_RCC_OscConfig+0x938>)
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	461a      	mov	r2, r3
 8001722:	2300      	movs	r3, #0
 8001724:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff f945 	bl	80009b4 <HAL_GetTick>
 800172a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff f940 	bl	80009b4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d902      	bls.n	8001746 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	f000 bc55 	b.w	8001ff0 <HAL_RCC_OscConfig+0x106c>
 8001746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001756:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	fa93 f2a3 	rbit	r2, r3
 8001760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001764:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001772:	2202      	movs	r2, #2
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001788:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001792:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f2a3 	rbit	r2, r3
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b2:	4b41      	ldr	r3, [pc, #260]	@ (80018b8 <HAL_RCC_OscConfig+0x934>)
 80017b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80017be:	2102      	movs	r1, #2
 80017c0:	6019      	str	r1, [r3, #0]
 80017c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fa93 f1a3 	rbit	r1, r3
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017d8:	6019      	str	r1, [r3, #0]
  return result;
 80017da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d197      	bne.n	8001730 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 81a1 	beq.w	8001b58 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <HAL_RCC_OscConfig+0x934>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d116      	bne.n	8001856 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <HAL_RCC_OscConfig+0x934>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	4a22      	ldr	r2, [pc, #136]	@ (80018b8 <HAL_RCC_OscConfig+0x934>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001832:	61d3      	str	r3, [r2, #28]
 8001834:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <HAL_RCC_OscConfig+0x934>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800183c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001840:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800184e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001850:	2301      	movs	r3, #1
 8001852:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <HAL_RCC_OscConfig+0x93c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d11a      	bne.n	8001898 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <HAL_RCC_OscConfig+0x93c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a16      	ldr	r2, [pc, #88]	@ (80018c0 <HAL_RCC_OscConfig+0x93c>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff f8a1 	bl	80009b4 <HAL_GetTick>
 8001872:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	e009      	b.n	800188c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001878:	f7ff f89c 	bl	80009b4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b64      	cmp	r3, #100	@ 0x64
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e3b1      	b.n	8001ff0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <HAL_RCC_OscConfig+0x93c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0ef      	beq.n	8001878 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d10d      	bne.n	80018c4 <HAL_RCC_OscConfig+0x940>
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_RCC_OscConfig+0x934>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a02      	ldr	r2, [pc, #8]	@ (80018b8 <HAL_RCC_OscConfig+0x934>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	e03c      	b.n	8001930 <HAL_RCC_OscConfig+0x9ac>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	10908120 	.word	0x10908120
 80018c0:	40007000 	.word	0x40007000
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x96a>
 80018d4:	4bc1      	ldr	r3, [pc, #772]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4ac0      	ldr	r2, [pc, #768]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	4bbe      	ldr	r3, [pc, #760]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4abd      	ldr	r2, [pc, #756]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 80018e6:	f023 0304 	bic.w	r3, r3, #4
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	e020      	b.n	8001930 <HAL_RCC_OscConfig+0x9ac>
 80018ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x994>
 80018fe:	4bb7      	ldr	r3, [pc, #732]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4ab6      	ldr	r2, [pc, #728]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4bb4      	ldr	r3, [pc, #720]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4ab3      	ldr	r2, [pc, #716]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x9ac>
 8001918:	4bb0      	ldr	r3, [pc, #704]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4aaf      	ldr	r2, [pc, #700]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	4bad      	ldr	r3, [pc, #692]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4aac      	ldr	r2, [pc, #688]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8081 	beq.w	8001a44 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff f837 	bl	80009b4 <HAL_GetTick>
 8001946:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff f832 	bl	80009b4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e345      	b.n	8001ff0 <HAL_RCC_OscConfig+0x106c>
 8001964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001968:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800196c:	2202      	movs	r2, #2
 800196e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001974:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	fa93 f2a3 	rbit	r2, r3
 800197e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001982:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001990:	2202      	movs	r2, #2
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001998:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80019aa:	601a      	str	r2, [r3, #0]
  return result;
 80019ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80019b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	095b      	lsrs	r3, r3, #5
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d102      	bne.n	80019d0 <HAL_RCC_OscConfig+0xa4c>
 80019ca:	4b84      	ldr	r3, [pc, #528]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	e013      	b.n	80019f8 <HAL_RCC_OscConfig+0xa74>
 80019d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	4b79      	ldr	r3, [pc, #484]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001a00:	2102      	movs	r1, #2
 8001a02:	6011      	str	r1, [r2, #0]
 8001a04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a08:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	fa92 f1a2 	rbit	r1, r2
 8001a12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a16:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a1a:	6011      	str	r1, [r2, #0]
  return result;
 8001a1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a20:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	fab2 f282 	clz	r2, r2
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	f002 021f 	and.w	r2, r2, #31
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d084      	beq.n	800194c <HAL_RCC_OscConfig+0x9c8>
 8001a42:	e07f      	b.n	8001b44 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7fe ffb6 	bl	80009b4 <HAL_GetTick>
 8001a48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7fe ffb1 	bl	80009b4 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e2c4      	b.n	8001ff0 <HAL_RCC_OscConfig+0x106c>
 8001a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a6e:	2202      	movs	r2, #2
 8001a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a76:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fa93 f2a3 	rbit	r2, r3
 8001a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a84:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a92:	2202      	movs	r2, #2
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001aac:	601a      	str	r2, [r3, #0]
  return result;
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ab6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_OscConfig+0xb4e>
 8001acc:	4b43      	ldr	r3, [pc, #268]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	e013      	b.n	8001afa <HAL_RCC_OscConfig+0xb76>
 8001ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ada:	2202      	movs	r2, #2
 8001adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fa93 f2a3 	rbit	r2, r3
 8001aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4b39      	ldr	r3, [pc, #228]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001afe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001b02:	2102      	movs	r1, #2
 8001b04:	6011      	str	r1, [r2, #0]
 8001b06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b0a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	fa92 f1a2 	rbit	r1, r2
 8001b14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b18:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b1c:	6011      	str	r1, [r2, #0]
  return result;
 8001b1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b22:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f002 021f 	and.w	r2, r2, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d184      	bne.n	8001a4e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b44:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	4a22      	ldr	r2, [pc, #136]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 8001b52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8242 	beq.w	8001fee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <HAL_RCC_OscConfig+0xc58>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	f000 8213 	beq.w	8001f9e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	f040 8162 	bne.w	8001e4e <HAL_RCC_OscConfig+0xeca>
 8001b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001baa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001bae:	601a      	str	r2, [r3, #0]
  return result;
 8001bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001bb8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bc4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fef0 	bl	80009b4 <HAL_GetTick>
 8001bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd8:	e00c      	b.n	8001bf4 <HAL_RCC_OscConfig+0xc70>
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7fe fee8 	bl	80009b4 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e1fd      	b.n	8001ff0 <HAL_RCC_OscConfig+0x106c>
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f2a3 	rbit	r2, r3
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c18:	601a      	str	r2, [r3, #0]
  return result;
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_OscConfig+0xcba>
 8001c38:	4bb0      	ldr	r3, [pc, #704]	@ (8001efc <HAL_RCC_OscConfig+0xf78>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	e027      	b.n	8001c8e <HAL_RCC_OscConfig+0xd0a>
 8001c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c42:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c50:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fa93 f2a3 	rbit	r2, r3
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c68:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	4b9c      	ldr	r3, [pc, #624]	@ (8001efc <HAL_RCC_OscConfig+0xf78>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c92:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c96:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c9a:	6011      	str	r1, [r2, #0]
 8001c9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ca0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	fa92 f1a2 	rbit	r1, r2
 8001caa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cae:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001cb2:	6011      	str	r1, [r2, #0]
  return result;
 8001cb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cb8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	fab2 f282 	clz	r2, r2
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f002 021f 	and.w	r2, r2, #31
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d182      	bne.n	8001be0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cda:	4b88      	ldr	r3, [pc, #544]	@ (8001efc <HAL_RCC_OscConfig+0xf78>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	497f      	ldr	r1, [pc, #508]	@ (8001efc <HAL_RCC_OscConfig+0xf78>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
 8001d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d06:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d14:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d22:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d26:	601a      	str	r2, [r3, #0]
  return result;
 8001d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d30:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	461a      	mov	r2, r3
 8001d44:	2301      	movs	r3, #1
 8001d46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe fe34 	bl	80009b4 <HAL_GetTick>
 8001d4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d50:	e009      	b.n	8001d66 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d52:	f7fe fe2f 	bl	80009b4 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e144      	b.n	8001ff0 <HAL_RCC_OscConfig+0x106c>
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d78:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fa93 f2a3 	rbit	r2, r3
 8001d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d86:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d8a:	601a      	str	r2, [r3, #0]
  return result;
 8001d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d90:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d102      	bne.n	8001db0 <HAL_RCC_OscConfig+0xe2c>
 8001daa:	4b54      	ldr	r3, [pc, #336]	@ (8001efc <HAL_RCC_OscConfig+0xf78>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	e027      	b.n	8001e00 <HAL_RCC_OscConfig+0xe7c>
 8001db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001db8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dda:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001dde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fa93 f2a3 	rbit	r2, r3
 8001df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8001efc <HAL_RCC_OscConfig+0xf78>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e04:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001e08:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e0c:	6011      	str	r1, [r2, #0]
 8001e0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e12:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	fa92 f1a2 	rbit	r1, r2
 8001e1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e20:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e24:	6011      	str	r1, [r2, #0]
  return result;
 8001e26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e2a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f002 021f 	and.w	r2, r2, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d082      	beq.n	8001d52 <HAL_RCC_OscConfig+0xdce>
 8001e4c:	e0cf      	b.n	8001fee <HAL_RCC_OscConfig+0x106a>
 8001e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e52:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e60:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e72:	601a      	str	r2, [r3, #0]
  return result;
 8001e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e78:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7fe fd8e 	bl	80009b4 <HAL_GetTick>
 8001e98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9c:	e009      	b.n	8001eb2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe fd89 	bl	80009b4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e09e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x106c>
 8001eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001eba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	fa93 f2a3 	rbit	r2, r3
 8001ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ed6:	601a      	str	r2, [r3, #0]
  return result;
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ee0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d104      	bne.n	8001f00 <HAL_RCC_OscConfig+0xf7c>
 8001ef6:	4b01      	ldr	r3, [pc, #4]	@ (8001efc <HAL_RCC_OscConfig+0xf78>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e029      	b.n	8001f50 <HAL_RCC_OscConfig+0xfcc>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f2a3 	rbit	r2, r3
 8001f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f20:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f38:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	fa93 f2a3 	rbit	r2, r3
 8001f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f46:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <HAL_RCC_OscConfig+0x1078>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f54:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f58:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f5c:	6011      	str	r1, [r2, #0]
 8001f5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f62:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	fa92 f1a2 	rbit	r1, r2
 8001f6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f70:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f74:	6011      	str	r1, [r2, #0]
  return result;
 8001f76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f7a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	fab2 f282 	clz	r2, r2
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f002 021f 	and.w	r2, r2, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d180      	bne.n	8001e9e <HAL_RCC_OscConfig+0xf1a>
 8001f9c:	e027      	b.n	8001fee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e01e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_RCC_OscConfig+0x1078>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001fbe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d10b      	bne.n	8001fea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001fd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b09e      	sub	sp, #120	@ 0x78
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e162      	b.n	80022de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b90      	ldr	r3, [pc, #576]	@ (800225c <HAL_RCC_ClockConfig+0x25c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b8d      	ldr	r3, [pc, #564]	@ (800225c <HAL_RCC_ClockConfig+0x25c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	498b      	ldr	r1, [pc, #556]	@ (800225c <HAL_RCC_ClockConfig+0x25c>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b89      	ldr	r3, [pc, #548]	@ (800225c <HAL_RCC_ClockConfig+0x25c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e14a      	b.n	80022de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b82      	ldr	r3, [pc, #520]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	497f      	ldr	r1, [pc, #508]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80dc 	beq.w	800222c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d13c      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xf6>
 800207c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002080:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800208a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d102      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xa6>
 80020a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	e00f      	b.n	80020c6 <HAL_RCC_ClockConfig+0xc6>
 80020a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80020b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80020ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020c2:	4b67      	ldr	r3, [pc, #412]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 80020cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020ce:	fa92 f2a2 	rbit	r2, r2
 80020d2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80020d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f002 021f 	and.w	r2, r2, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d17b      	bne.n	80021ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0f3      	b.n	80022de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d13c      	bne.n	8002178 <HAL_RCC_ClockConfig+0x178>
 80020fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002102:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800210c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_RCC_ClockConfig+0x128>
 8002122:	4b4f      	ldr	r3, [pc, #316]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e00f      	b.n	8002148 <HAL_RCC_ClockConfig+0x148>
 8002128:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800212c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	647b      	str	r3, [r7, #68]	@ 0x44
 8002136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800213a:	643b      	str	r3, [r7, #64]	@ 0x40
 800213c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002144:	4b46      	ldr	r3, [pc, #280]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800214c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800214e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002156:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002158:	fab2 f282 	clz	r2, r2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f042 0220 	orr.w	r2, r2, #32
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	f002 021f 	and.w	r2, r2, #31
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f202 	lsl.w	r2, r1, r2
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d13a      	bne.n	80021ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0b2      	b.n	80022de <HAL_RCC_ClockConfig+0x2de>
 8002178:	2302      	movs	r3, #2
 800217a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d102      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x1a0>
 800219a:	4b31      	ldr	r3, [pc, #196]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	e00d      	b.n	80021bc <HAL_RCC_ClockConfig+0x1bc>
 80021a0:	2302      	movs	r3, #2
 80021a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	2202      	movs	r2, #2
 80021be:	61ba      	str	r2, [r7, #24]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	fa92 f2a2 	rbit	r2, r2
 80021c6:	617a      	str	r2, [r7, #20]
  return result;
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f042 0220 	orr.w	r2, r2, #32
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f002 021f 	and.w	r2, r2, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e079      	b.n	80022de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	491a      	ldr	r1, [pc, #104]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7fe fbda 	bl	80009b4 <HAL_GetTick>
 8002200:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7fe fbd6 	bl	80009b4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e061      	b.n	80022de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <HAL_RCC_ClockConfig+0x260>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_RCC_ClockConfig+0x25c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d214      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <HAL_RCC_ClockConfig+0x25c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4906      	ldr	r1, [pc, #24]	@ (800225c <HAL_RCC_ClockConfig+0x25c>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b04      	ldr	r3, [pc, #16]	@ (800225c <HAL_RCC_ClockConfig+0x25c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e040      	b.n	80022de <HAL_RCC_ClockConfig+0x2de>
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HAL_RCC_ClockConfig+0x2e8>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	491a      	ldr	r1, [pc, #104]	@ (80022e8 <HAL_RCC_ClockConfig+0x2e8>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228e:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <HAL_RCC_ClockConfig+0x2e8>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4912      	ldr	r1, [pc, #72]	@ (80022e8 <HAL_RCC_ClockConfig+0x2e8>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022a2:	f000 f829 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 80022a6:	4601      	mov	r1, r0
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_RCC_ClockConfig+0x2e8>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b0:	22f0      	movs	r2, #240	@ 0xf0
 80022b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	fa92 f2a2 	rbit	r2, r2
 80022ba:	60fa      	str	r2, [r7, #12]
  return result;
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	fab2 f282 	clz	r2, r2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	40d3      	lsrs	r3, r2
 80022c6:	4a09      	ldr	r2, [pc, #36]	@ (80022ec <HAL_RCC_ClockConfig+0x2ec>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	fa21 f303 	lsr.w	r3, r1, r3
 80022ce:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <HAL_RCC_ClockConfig+0x2f0>)
 80022d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <HAL_RCC_ClockConfig+0x2f4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fb28 	bl	800092c <HAL_InitTick>
  
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3778      	adds	r7, #120	@ 0x78
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08002f6c 	.word	0x08002f6c
 80022f0:	20001188 	.word	0x20001188
 80022f4:	2000118c 	.word	0x2000118c

080022f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002312:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <HAL_RCC_GetSysClockFreq+0x94>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d002      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x30>
 8002322:	2b08      	cmp	r3, #8
 8002324:	d003      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x36>
 8002326:	e026      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800232a:	613b      	str	r3, [r7, #16]
      break;
 800232c:	e026      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	4a17      	ldr	r2, [pc, #92]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002338:	5cd3      	ldrb	r3, [r2, r3]
 800233a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800233c:	4b13      	ldr	r3, [pc, #76]	@ (800238c <HAL_RCC_GetSysClockFreq+0x94>)
 800233e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002354:	4a0e      	ldr	r2, [pc, #56]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	fbb2 f2f3 	udiv	r2, r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e004      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a0c      	ldr	r2, [pc, #48]	@ (800239c <HAL_RCC_GetSysClockFreq+0xa4>)
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
      break;
 8002374:	e002      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 8002378:	613b      	str	r3, [r7, #16]
      break;
 800237a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237c:	693b      	ldr	r3, [r7, #16]
}
 800237e:	4618      	mov	r0, r3
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	007a1200 	.word	0x007a1200
 8002394:	08002f7c 	.word	0x08002f7c
 8002398:	08002f8c 	.word	0x08002f8c
 800239c:	003d0900 	.word	0x003d0900

080023a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e049      	b.n	8002446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe f9ca 	bl	8000760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3304      	adds	r3, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f000 fa86 	bl	80028f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d001      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e040      	b.n	80024ea <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1c      	ldr	r2, [pc, #112]	@ (80024f8 <HAL_TIM_Base_Start_IT+0xa8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00e      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0x58>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002492:	d009      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0x58>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a18      	ldr	r2, [pc, #96]	@ (80024fc <HAL_TIM_Base_Start_IT+0xac>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0x58>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <HAL_TIM_Base_Start_IT+0xb0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d115      	bne.n	80024d4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_TIM_Base_Start_IT+0xb4>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d015      	beq.n	80024e6 <HAL_TIM_Base_Start_IT+0x96>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c0:	d011      	beq.n	80024e6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d2:	e008      	b.n	80024e6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e000      	b.n	80024e8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40000400 	.word	0x40000400
 8002500:	40014000 	.word	0x40014000
 8002504:	00010007 	.word	0x00010007

08002508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d020      	beq.n	800256c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0202 	mvn.w	r2, #2
 800253c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f9ad 	bl	80028b2 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f99f 	bl	800289e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f9b0 	bl	80028c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d020      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01b      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0204 	mvn.w	r2, #4
 8002588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f987 	bl	80028b2 <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f979 	bl	800289e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f98a 	bl	80028c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d020      	beq.n	8002604 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0208 	mvn.w	r2, #8
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2204      	movs	r2, #4
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f961 	bl	80028b2 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f953 	bl	800289e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f964 	bl	80028c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d020      	beq.n	8002650 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0210 	mvn.w	r2, #16
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2208      	movs	r2, #8
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f93b 	bl	80028b2 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f92d 	bl	800289e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f93e 	bl	80028c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0201 	mvn.w	r2, #1
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe f804 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fac2 	bl	8002c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00c      	beq.n	80026bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 faba 	bl	8002c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8fd 	bl	80028da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00c      	beq.n	8002704 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0220 	mvn.w	r2, #32
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa82 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_TIM_ConfigClockSource+0x1c>
 8002724:	2302      	movs	r3, #2
 8002726:	e0b6      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x18a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002746:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800274a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002764:	d03e      	beq.n	80027e4 <HAL_TIM_ConfigClockSource+0xd8>
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800276a:	f200 8087 	bhi.w	800287c <HAL_TIM_ConfigClockSource+0x170>
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002772:	f000 8086 	beq.w	8002882 <HAL_TIM_ConfigClockSource+0x176>
 8002776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800277a:	d87f      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x170>
 800277c:	2b70      	cmp	r3, #112	@ 0x70
 800277e:	d01a      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0xaa>
 8002780:	2b70      	cmp	r3, #112	@ 0x70
 8002782:	d87b      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x170>
 8002784:	2b60      	cmp	r3, #96	@ 0x60
 8002786:	d050      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x11e>
 8002788:	2b60      	cmp	r3, #96	@ 0x60
 800278a:	d877      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x170>
 800278c:	2b50      	cmp	r3, #80	@ 0x50
 800278e:	d03c      	beq.n	800280a <HAL_TIM_ConfigClockSource+0xfe>
 8002790:	2b50      	cmp	r3, #80	@ 0x50
 8002792:	d873      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x170>
 8002794:	2b40      	cmp	r3, #64	@ 0x40
 8002796:	d058      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x13e>
 8002798:	2b40      	cmp	r3, #64	@ 0x40
 800279a:	d86f      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x170>
 800279c:	2b30      	cmp	r3, #48	@ 0x30
 800279e:	d064      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x15e>
 80027a0:	2b30      	cmp	r3, #48	@ 0x30
 80027a2:	d86b      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x170>
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d060      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x15e>
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d867      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x170>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d05c      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x15e>
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d05a      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x15e>
 80027b4:	e062      	b.n	800287c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027c6:	f000 f991 	bl	8002aec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	609a      	str	r2, [r3, #8]
      break;
 80027e2:	e04f      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027f4:	f000 f97a 	bl	8002aec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002806:	609a      	str	r2, [r3, #8]
      break;
 8002808:	e03c      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	461a      	mov	r2, r3
 8002818:	f000 f8ee 	bl	80029f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2150      	movs	r1, #80	@ 0x50
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f947 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002828:	e02c      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002836:	461a      	mov	r2, r3
 8002838:	f000 f90d 	bl	8002a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2160      	movs	r1, #96	@ 0x60
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f937 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002848:	e01c      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002856:	461a      	mov	r2, r3
 8002858:	f000 f8ce 	bl	80029f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2140      	movs	r1, #64	@ 0x40
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f927 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002868:	e00c      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f000 f91e 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 800287a:	e003      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      break;
 8002880:	e000      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a38      	ldr	r2, [pc, #224]	@ (80029e4 <TIM_Base_SetConfig+0xf4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d007      	beq.n	8002918 <TIM_Base_SetConfig+0x28>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290e:	d003      	beq.n	8002918 <TIM_Base_SetConfig+0x28>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a35      	ldr	r2, [pc, #212]	@ (80029e8 <TIM_Base_SetConfig+0xf8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d108      	bne.n	800292a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a2d      	ldr	r2, [pc, #180]	@ (80029e4 <TIM_Base_SetConfig+0xf4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <TIM_Base_SetConfig+0x6a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002938:	d00f      	beq.n	800295a <TIM_Base_SetConfig+0x6a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a2a      	ldr	r2, [pc, #168]	@ (80029e8 <TIM_Base_SetConfig+0xf8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_Base_SetConfig+0x6a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a29      	ldr	r2, [pc, #164]	@ (80029ec <TIM_Base_SetConfig+0xfc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0x6a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a28      	ldr	r2, [pc, #160]	@ (80029f0 <TIM_Base_SetConfig+0x100>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0x6a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a27      	ldr	r2, [pc, #156]	@ (80029f4 <TIM_Base_SetConfig+0x104>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a14      	ldr	r2, [pc, #80]	@ (80029e4 <TIM_Base_SetConfig+0xf4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00b      	beq.n	80029b0 <TIM_Base_SetConfig+0xc0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a14      	ldr	r2, [pc, #80]	@ (80029ec <TIM_Base_SetConfig+0xfc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <TIM_Base_SetConfig+0xc0>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a13      	ldr	r2, [pc, #76]	@ (80029f0 <TIM_Base_SetConfig+0x100>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d003      	beq.n	80029b0 <TIM_Base_SetConfig+0xc0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a12      	ldr	r2, [pc, #72]	@ (80029f4 <TIM_Base_SetConfig+0x104>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d103      	bne.n	80029b8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f023 0201 	bic.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	611a      	str	r2, [r3, #16]
  }
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40014000 	.word	0x40014000
 80029f0:	40014400 	.word	0x40014400
 80029f4:	40014800 	.word	0x40014800

080029f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0201 	bic.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 030a 	bic.w	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f023 0210 	bic.w	r2, r3, #16
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	031b      	lsls	r3, r3, #12
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f043 0307 	orr.w	r3, r3, #7
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	021a      	lsls	r2, r3, #8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e054      	b.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a24      	ldr	r2, [pc, #144]	@ (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002b74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a17      	ldr	r2, [pc, #92]	@ (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bac:	d009      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a11      	ldr	r2, [pc, #68]	@ (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10c      	bne.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40014000 	.word	0x40014000

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <malloc>:
 8002c44:	4b02      	ldr	r3, [pc, #8]	@ (8002c50 <malloc+0xc>)
 8002c46:	4601      	mov	r1, r0
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	f000 b825 	b.w	8002c98 <_malloc_r>
 8002c4e:	bf00      	nop
 8002c50:	20001194 	.word	0x20001194

08002c54 <sbrk_aligned>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4e0f      	ldr	r6, [pc, #60]	@ (8002c94 <sbrk_aligned+0x40>)
 8002c58:	460c      	mov	r4, r1
 8002c5a:	6831      	ldr	r1, [r6, #0]
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	b911      	cbnz	r1, 8002c66 <sbrk_aligned+0x12>
 8002c60:	f000 f8ae 	bl	8002dc0 <_sbrk_r>
 8002c64:	6030      	str	r0, [r6, #0]
 8002c66:	4621      	mov	r1, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f000 f8a9 	bl	8002dc0 <_sbrk_r>
 8002c6e:	1c43      	adds	r3, r0, #1
 8002c70:	d103      	bne.n	8002c7a <sbrk_aligned+0x26>
 8002c72:	f04f 34ff 	mov.w	r4, #4294967295
 8002c76:	4620      	mov	r0, r4
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
 8002c7a:	1cc4      	adds	r4, r0, #3
 8002c7c:	f024 0403 	bic.w	r4, r4, #3
 8002c80:	42a0      	cmp	r0, r4
 8002c82:	d0f8      	beq.n	8002c76 <sbrk_aligned+0x22>
 8002c84:	1a21      	subs	r1, r4, r0
 8002c86:	4628      	mov	r0, r5
 8002c88:	f000 f89a 	bl	8002dc0 <_sbrk_r>
 8002c8c:	3001      	adds	r0, #1
 8002c8e:	d1f2      	bne.n	8002c76 <sbrk_aligned+0x22>
 8002c90:	e7ef      	b.n	8002c72 <sbrk_aligned+0x1e>
 8002c92:	bf00      	nop
 8002c94:	2000125c 	.word	0x2000125c

08002c98 <_malloc_r>:
 8002c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c9c:	1ccd      	adds	r5, r1, #3
 8002c9e:	f025 0503 	bic.w	r5, r5, #3
 8002ca2:	3508      	adds	r5, #8
 8002ca4:	2d0c      	cmp	r5, #12
 8002ca6:	bf38      	it	cc
 8002ca8:	250c      	movcc	r5, #12
 8002caa:	2d00      	cmp	r5, #0
 8002cac:	4606      	mov	r6, r0
 8002cae:	db01      	blt.n	8002cb4 <_malloc_r+0x1c>
 8002cb0:	42a9      	cmp	r1, r5
 8002cb2:	d904      	bls.n	8002cbe <_malloc_r+0x26>
 8002cb4:	230c      	movs	r3, #12
 8002cb6:	6033      	str	r3, [r6, #0]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d94 <_malloc_r+0xfc>
 8002cc2:	f000 f869 	bl	8002d98 <__malloc_lock>
 8002cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cca:	461c      	mov	r4, r3
 8002ccc:	bb44      	cbnz	r4, 8002d20 <_malloc_r+0x88>
 8002cce:	4629      	mov	r1, r5
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f7ff ffbf 	bl	8002c54 <sbrk_aligned>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	4604      	mov	r4, r0
 8002cda:	d158      	bne.n	8002d8e <_malloc_r+0xf6>
 8002cdc:	f8d8 4000 	ldr.w	r4, [r8]
 8002ce0:	4627      	mov	r7, r4
 8002ce2:	2f00      	cmp	r7, #0
 8002ce4:	d143      	bne.n	8002d6e <_malloc_r+0xd6>
 8002ce6:	2c00      	cmp	r4, #0
 8002ce8:	d04b      	beq.n	8002d82 <_malloc_r+0xea>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	4639      	mov	r1, r7
 8002cee:	4630      	mov	r0, r6
 8002cf0:	eb04 0903 	add.w	r9, r4, r3
 8002cf4:	f000 f864 	bl	8002dc0 <_sbrk_r>
 8002cf8:	4581      	cmp	r9, r0
 8002cfa:	d142      	bne.n	8002d82 <_malloc_r+0xea>
 8002cfc:	6821      	ldr	r1, [r4, #0]
 8002cfe:	1a6d      	subs	r5, r5, r1
 8002d00:	4629      	mov	r1, r5
 8002d02:	4630      	mov	r0, r6
 8002d04:	f7ff ffa6 	bl	8002c54 <sbrk_aligned>
 8002d08:	3001      	adds	r0, #1
 8002d0a:	d03a      	beq.n	8002d82 <_malloc_r+0xea>
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	442b      	add	r3, r5
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	f8d8 3000 	ldr.w	r3, [r8]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	bb62      	cbnz	r2, 8002d74 <_malloc_r+0xdc>
 8002d1a:	f8c8 7000 	str.w	r7, [r8]
 8002d1e:	e00f      	b.n	8002d40 <_malloc_r+0xa8>
 8002d20:	6822      	ldr	r2, [r4, #0]
 8002d22:	1b52      	subs	r2, r2, r5
 8002d24:	d420      	bmi.n	8002d68 <_malloc_r+0xd0>
 8002d26:	2a0b      	cmp	r2, #11
 8002d28:	d917      	bls.n	8002d5a <_malloc_r+0xc2>
 8002d2a:	1961      	adds	r1, r4, r5
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	6025      	str	r5, [r4, #0]
 8002d30:	bf18      	it	ne
 8002d32:	6059      	strne	r1, [r3, #4]
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	bf08      	it	eq
 8002d38:	f8c8 1000 	streq.w	r1, [r8]
 8002d3c:	5162      	str	r2, [r4, r5]
 8002d3e:	604b      	str	r3, [r1, #4]
 8002d40:	4630      	mov	r0, r6
 8002d42:	f000 f82f 	bl	8002da4 <__malloc_unlock>
 8002d46:	f104 000b 	add.w	r0, r4, #11
 8002d4a:	1d23      	adds	r3, r4, #4
 8002d4c:	f020 0007 	bic.w	r0, r0, #7
 8002d50:	1ac2      	subs	r2, r0, r3
 8002d52:	bf1c      	itt	ne
 8002d54:	1a1b      	subne	r3, r3, r0
 8002d56:	50a3      	strne	r3, [r4, r2]
 8002d58:	e7af      	b.n	8002cba <_malloc_r+0x22>
 8002d5a:	6862      	ldr	r2, [r4, #4]
 8002d5c:	42a3      	cmp	r3, r4
 8002d5e:	bf0c      	ite	eq
 8002d60:	f8c8 2000 	streq.w	r2, [r8]
 8002d64:	605a      	strne	r2, [r3, #4]
 8002d66:	e7eb      	b.n	8002d40 <_malloc_r+0xa8>
 8002d68:	4623      	mov	r3, r4
 8002d6a:	6864      	ldr	r4, [r4, #4]
 8002d6c:	e7ae      	b.n	8002ccc <_malloc_r+0x34>
 8002d6e:	463c      	mov	r4, r7
 8002d70:	687f      	ldr	r7, [r7, #4]
 8002d72:	e7b6      	b.n	8002ce2 <_malloc_r+0x4a>
 8002d74:	461a      	mov	r2, r3
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	42a3      	cmp	r3, r4
 8002d7a:	d1fb      	bne.n	8002d74 <_malloc_r+0xdc>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6053      	str	r3, [r2, #4]
 8002d80:	e7de      	b.n	8002d40 <_malloc_r+0xa8>
 8002d82:	230c      	movs	r3, #12
 8002d84:	6033      	str	r3, [r6, #0]
 8002d86:	4630      	mov	r0, r6
 8002d88:	f000 f80c 	bl	8002da4 <__malloc_unlock>
 8002d8c:	e794      	b.n	8002cb8 <_malloc_r+0x20>
 8002d8e:	6005      	str	r5, [r0, #0]
 8002d90:	e7d6      	b.n	8002d40 <_malloc_r+0xa8>
 8002d92:	bf00      	nop
 8002d94:	20001260 	.word	0x20001260

08002d98 <__malloc_lock>:
 8002d98:	4801      	ldr	r0, [pc, #4]	@ (8002da0 <__malloc_lock+0x8>)
 8002d9a:	f000 b84b 	b.w	8002e34 <__retarget_lock_acquire_recursive>
 8002d9e:	bf00      	nop
 8002da0:	200013a0 	.word	0x200013a0

08002da4 <__malloc_unlock>:
 8002da4:	4801      	ldr	r0, [pc, #4]	@ (8002dac <__malloc_unlock+0x8>)
 8002da6:	f000 b846 	b.w	8002e36 <__retarget_lock_release_recursive>
 8002daa:	bf00      	nop
 8002dac:	200013a0 	.word	0x200013a0

08002db0 <memset>:
 8002db0:	4402      	add	r2, r0
 8002db2:	4603      	mov	r3, r0
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d100      	bne.n	8002dba <memset+0xa>
 8002db8:	4770      	bx	lr
 8002dba:	f803 1b01 	strb.w	r1, [r3], #1
 8002dbe:	e7f9      	b.n	8002db4 <memset+0x4>

08002dc0 <_sbrk_r>:
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	4d06      	ldr	r5, [pc, #24]	@ (8002ddc <_sbrk_r+0x1c>)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	4608      	mov	r0, r1
 8002dca:	602b      	str	r3, [r5, #0]
 8002dcc:	f7fd fd26 	bl	800081c <_sbrk>
 8002dd0:	1c43      	adds	r3, r0, #1
 8002dd2:	d102      	bne.n	8002dda <_sbrk_r+0x1a>
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	b103      	cbz	r3, 8002dda <_sbrk_r+0x1a>
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
 8002ddc:	2000139c 	.word	0x2000139c

08002de0 <__errno>:
 8002de0:	4b01      	ldr	r3, [pc, #4]	@ (8002de8 <__errno+0x8>)
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20001194 	.word	0x20001194

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	4d0d      	ldr	r5, [pc, #52]	@ (8002e24 <__libc_init_array+0x38>)
 8002df0:	4c0d      	ldr	r4, [pc, #52]	@ (8002e28 <__libc_init_array+0x3c>)
 8002df2:	1b64      	subs	r4, r4, r5
 8002df4:	10a4      	asrs	r4, r4, #2
 8002df6:	2600      	movs	r6, #0
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	4d0b      	ldr	r5, [pc, #44]	@ (8002e2c <__libc_init_array+0x40>)
 8002dfe:	4c0c      	ldr	r4, [pc, #48]	@ (8002e30 <__libc_init_array+0x44>)
 8002e00:	f000 f828 	bl	8002e54 <_init>
 8002e04:	1b64      	subs	r4, r4, r5
 8002e06:	10a4      	asrs	r4, r4, #2
 8002e08:	2600      	movs	r6, #0
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08002f9c 	.word	0x08002f9c
 8002e28:	08002f9c 	.word	0x08002f9c
 8002e2c:	08002f9c 	.word	0x08002f9c
 8002e30:	08002fa0 	.word	0x08002fa0

08002e34 <__retarget_lock_acquire_recursive>:
 8002e34:	4770      	bx	lr

08002e36 <__retarget_lock_release_recursive>:
 8002e36:	4770      	bx	lr

08002e38 <memcpy>:
 8002e38:	440a      	add	r2, r1
 8002e3a:	4291      	cmp	r1, r2
 8002e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e40:	d100      	bne.n	8002e44 <memcpy+0xc>
 8002e42:	4770      	bx	lr
 8002e44:	b510      	push	{r4, lr}
 8002e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e4e:	4291      	cmp	r1, r2
 8002e50:	d1f9      	bne.n	8002e46 <memcpy+0xe>
 8002e52:	bd10      	pop	{r4, pc}

08002e54 <_init>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr

08002e60 <_fini>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr
