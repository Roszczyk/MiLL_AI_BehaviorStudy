
DT_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08002e30  08002e30  00003e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f60  08002f60  000051e4  2**0
                  CONTENTS
  4 .ARM          00000000  08002f60  08002f60  000051e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f60  08002f60  000051e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f60  08002f60  00003f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f64  08002f64  00003f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000011e4  20000000  08002f68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000051e4  2**0
                  CONTENTS
 10 .bss          000001c0  200011e4  200011e4  000051e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200013a4  200013a4  000051e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000051e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009250  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000178a  00000000  00000000  0000e464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0000fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f68e  00000000  00000000  00010588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b349  00000000  00000000  0002fc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be39e  00000000  00000000  0003af5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f92fd  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000751  00000000  00000000  000f9340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a70  00000000  00000000  000f9a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  000fc504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200011e4 	.word	0x200011e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e18 	.word	0x08002e18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200011e8 	.word	0x200011e8
 80001c4:	08002e18 	.word	0x08002e18

080001c8 <buildTree>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
TreeNodeIndex buildTree(int index[DEPTH][1 << (DEPTH-1)], float condition[DEPTH][1 << (DEPTH-1)], int * results, int level, int rowNumber){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
//	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
//	  HAL_Delay(100);
//	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(100);
	TreeNodeIndex node = (TreeNodeIndex)malloc(sizeof(TreeNode));
 80001d6:	201c      	movs	r0, #28
 80001d8:	f002 fd16 	bl	8002c08 <malloc>
 80001dc:	4603      	mov	r3, r0
 80001de:	617b      	str	r3, [r7, #20]
    if (!node) {
 80001e0:	697b      	ldr	r3, [r7, #20]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d101      	bne.n	80001ea <buildTree+0x22>
        return NULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	e048      	b.n	800027c <buildTree+0xb4>
    }
    node -> level = level;
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	60da      	str	r2, [r3, #12]
    node -> rowNumber = rowNumber;
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	6a3a      	ldr	r2, [r7, #32]
 80001f4:	611a      	str	r2, [r3, #16]
    if (level >= DEPTH){
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	2b05      	cmp	r3, #5
 80001fa:	dd0e      	ble.n	800021a <buildTree+0x52>
        node->result = results[rowNumber];
 80001fc:	6a3b      	ldr	r3, [r7, #32]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	609a      	str	r2, [r3, #8]
        node->below = NULL;
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	2200      	movs	r2, #0
 800020e:	615a      	str	r2, [r3, #20]
        node->over = NULL;
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	2200      	movs	r2, #0
 8000214:	619a      	str	r2, [r3, #24]
        return node;
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	e030      	b.n	800027c <buildTree+0xb4>
    }
    node->index = index[level][rowNumber];
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	01db      	lsls	r3, r3, #7
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	4413      	add	r3, r2
 8000222:	6a3a      	ldr	r2, [r7, #32]
 8000224:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	605a      	str	r2, [r3, #4]
    node->condition = condition[level][rowNumber];
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	01db      	lsls	r3, r3, #7
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	441a      	add	r2, r3
 8000234:	6a3b      	ldr	r3, [r7, #32]
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4413      	add	r3, r2
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	601a      	str	r2, [r3, #0]
    node->below = buildTree(index, condition, results, level+1, rowNumber*2);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	6a3b      	ldr	r3, [r7, #32]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	4613      	mov	r3, r2
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	68b9      	ldr	r1, [r7, #8]
 8000250:	68f8      	ldr	r0, [r7, #12]
 8000252:	f7ff ffb9 	bl	80001c8 <buildTree>
 8000256:	4602      	mov	r2, r0
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	615a      	str	r2, [r3, #20]
    node->over = buildTree(index, condition, results, level+1, rowNumber*2 + 1);
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	1c5a      	adds	r2, r3, #1
 8000260:	6a3b      	ldr	r3, [r7, #32]
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	3301      	adds	r3, #1
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	4613      	mov	r3, r2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ffaa 	bl	80001c8 <buildTree>
 8000274:	4602      	mov	r2, r0
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	619a      	str	r2, [r3, #24]
    return node;
 800027a:	697b      	ldr	r3, [r7, #20]
}
 800027c:	4618      	mov	r0, r3
 800027e:	3718      	adds	r7, #24
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <initTree>:

TreeNodeIndex initTree(){
 8000284:	b580      	push	{r7, lr}
 8000286:	f5ad 6de2 	sub.w	sp, sp, #1808	@ 0x710
 800028a:	af02      	add	r7, sp, #8
	int index[DEPTH][1 << (DEPTH-1)] =  {
 800028c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000290:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000294:	4618      	mov	r0, r3
 8000296:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800029a:	461a      	mov	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fd69 	bl	8002d74 <memset>
 80002a2:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002a6:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002aa:	220a      	movs	r2, #10
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002b2:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002b6:	2202      	movs	r2, #2
 80002b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80002bc:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002c0:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002c4:	2201      	movs	r2, #1
 80002c6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 80002ca:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002ce:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002d2:	2204      	movs	r2, #4
 80002d4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 80002d8:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002dc:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002e0:	2203      	movs	r2, #3
 80002e2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 80002e6:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002ea:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002ee:	2209      	movs	r2, #9
 80002f0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 80002f4:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002f8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002fc:	220a      	movs	r2, #10
 80002fe:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 8000302:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000306:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800030a:	2201      	movs	r2, #1
 800030c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 8000310:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000314:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000318:	2209      	movs	r2, #9
 800031a:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
 800031e:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000322:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000326:	2206      	movs	r2, #6
 8000328:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
 800032c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000330:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000334:	2207      	movs	r2, #7
 8000336:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
		{0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,3,9,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,9,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0},
	};
	float condition[DEPTH][1 << (DEPTH-1)] =   {
 800033a:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800033e:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000342:	4618      	mov	r0, r3
 8000344:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000348:	461a      	mov	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f002 fd12 	bl	8002d74 <memset>
 8000350:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000354:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000358:	4a33      	ldr	r2, [pc, #204]	@ (8000428 <initTree+0x1a4>)
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000360:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000364:	4a31      	ldr	r2, [pc, #196]	@ (800042c <initTree+0x1a8>)
 8000366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800036a:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800036e:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000372:	4a2f      	ldr	r2, [pc, #188]	@ (8000430 <initTree+0x1ac>)
 8000374:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8000378:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800037c:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000380:	4a2c      	ldr	r2, [pc, #176]	@ (8000434 <initTree+0x1b0>)
 8000382:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8000386:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800038a:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 800038e:	4a2a      	ldr	r2, [pc, #168]	@ (8000438 <initTree+0x1b4>)
 8000390:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 8000394:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000398:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 800039c:	4a27      	ldr	r2, [pc, #156]	@ (800043c <initTree+0x1b8>)
 800039e:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 80003a2:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003a6:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003aa:	4a25      	ldr	r2, [pc, #148]	@ (8000440 <initTree+0x1bc>)
 80003ac:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 80003b0:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003b4:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003b8:	4a22      	ldr	r2, [pc, #136]	@ (8000444 <initTree+0x1c0>)
 80003ba:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 80003be:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003c2:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003c6:	4a20      	ldr	r2, [pc, #128]	@ (8000448 <initTree+0x1c4>)
 80003c8:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
 80003cc:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003d0:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003d4:	4a1d      	ldr	r2, [pc, #116]	@ (800044c <initTree+0x1c8>)
 80003d6:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
 80003da:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003de:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000450 <initTree+0x1cc>)
 80003e4:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
		{0,0,9.5,23.94119167327881,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,21.209446907043457,0.048063503578305244,0.05069274269044399,5.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0.07197032496333122,54.67359733581543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61.73231315612793,0,0},
	};
    int results[1 << (DEPTH)] = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,1,1,1,1,3,3,3,3,2,2,2,2,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0};
 80003e8:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003ec:	f2a3 7304 	subw	r3, r3, #1796	@ 0x704
 80003f0:	4a18      	ldr	r2, [pc, #96]	@ (8000454 <initTree+0x1d0>)
 80003f2:	4618      	mov	r0, r3
 80003f4:	4611      	mov	r1, r2
 80003f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003fa:	461a      	mov	r2, r3
 80003fc:	f002 fcfe 	bl	8002dfc <memcpy>
    TreeNodeIndex tree = buildTree(index, condition, results, 0, 0);
 8000400:	1d3a      	adds	r2, r7, #4
 8000402:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8000406:	f207 4004 	addw	r0, r7, #1028	@ 0x404
 800040a:	2300      	movs	r3, #0
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	f7ff feda 	bl	80001c8 <buildTree>
 8000414:	f8c7 0704 	str.w	r0, [r7, #1796]	@ 0x704
    return tree;
 8000418:	f8d7 3704 	ldr.w	r3, [r7, #1796]	@ 0x704
}
 800041c:	4618      	mov	r0, r3
 800041e:	f507 67e1 	add.w	r7, r7, #1800	@ 0x708
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	3cdbd528 	.word	0x3cdbd528
 800042c:	41a70ed4 	.word	0x41a70ed4
 8000430:	41180000 	.word	0x41180000
 8000434:	41bf8790 	.word	0x41bf8790
 8000438:	41a9acf2 	.word	0x41a9acf2
 800043c:	3d44de3c 	.word	0x3d44de3c
 8000440:	3d4fa332 	.word	0x3d4fa332
 8000444:	40b00000 	.word	0x40b00000
 8000448:	3d93652e 	.word	0x3d93652e
 800044c:	425ab1c4 	.word	0x425ab1c4
 8000450:	4276ede4 	.word	0x4276ede4
 8000454:	08002e30 	.word	0x08002e30

08000458 <getResult>:

int getResult(float * data, TreeNodeIndex initTree){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
    TreeNodeIndex node = initTree;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	60fb      	str	r3, [r7, #12]
    while(node->below!=NULL){
 8000466:	e015      	b.n	8000494 <getResult+0x3c>
        if(data[node->index]>node->condition){
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	ed93 7a00 	vldr	s14, [r3]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	edd3 7a00 	vldr	s15, [r3]
 800047c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000484:	dd03      	ble.n	800048e <getResult+0x36>
            node = node->over;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e002      	b.n	8000494 <getResult+0x3c>
        }
        else{
            node = node->below;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	60fb      	str	r3, [r7, #12]
    while(node->below!=NULL){
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d1e5      	bne.n	8000468 <getResult+0x10>
        }
    }
    return node->result;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	689b      	ldr	r3, [r3, #8]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa24 	bl	80008fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f826 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f8ae 	bl	8000618 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004bc:	f000 f85e 	bl	800057c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TREE = initTree();
 80004c0:	f7ff fee0 	bl	8000284 <initTree>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a0d      	ldr	r2, [pc, #52]	@ (80004fc <main+0x50>)
 80004c8:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 80004ca:	480d      	ldr	r0, [pc, #52]	@ (8000500 <main+0x54>)
 80004cc:	f001 ffa2 	bl	8002414 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2120      	movs	r1, #32
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d8:	f000 fd1e 	bl	8000f18 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e0:	f000 fa72 	bl	80009c8 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2120      	movs	r1, #32
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ec:	f000 fd14 	bl	8000f18 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80004f0:	20fa      	movs	r0, #250	@ 0xfa
 80004f2:	f000 fa69 	bl	80009c8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	bf00      	nop
 80004f8:	e7fd      	b.n	80004f6 <main+0x4a>
 80004fa:	bf00      	nop
 80004fc:	2000124c 	.word	0x2000124c
 8000500:	20001200 	.word	0x20001200

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b090      	sub	sp, #64	@ 0x40
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	2228      	movs	r2, #40	@ 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fc2e 	bl	8002d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000526:	2302      	movs	r3, #2
 8000528:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	2301      	movs	r3, #1
 800052c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052e:	2310      	movs	r3, #16
 8000530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	2300      	movs	r3, #0
 8000534:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 0318 	add.w	r3, r7, #24
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fd04 	bl	8000f48 <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000546:	f000 f8df 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	230f      	movs	r3, #15
 800054c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fd2e 	bl	8001fc4 <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800056e:	f000 f8cb 	bl	8000708 <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3740      	adds	r7, #64	@ 0x40
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800059a:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <MX_TIM2_Init+0x98>)
 800059c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80005a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005a4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005b2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b8:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005c4:	4813      	ldr	r0, [pc, #76]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005c6:	f001 fecd 	bl	8002364 <HAL_TIM_Base_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80005d0:	f000 f89a 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480c      	ldr	r0, [pc, #48]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005e2:	f002 f875 	bl	80026d0 <HAL_TIM_ConfigClockSource>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80005ec:	f000 f88c 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005fe:	f002 fa77 	bl	8002af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000608:	f000 f87e 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20001200 	.word	0x20001200

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_GPIO_Init+0x5c>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a10      	ldr	r2, [pc, #64]	@ (8000674 <MX_GPIO_Init+0x5c>)
 8000632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000636:	6153      	str	r3, [r2, #20]
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_GPIO_Init+0x5c>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064c:	f000 fc64 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000650:	2320      	movs	r3, #32
 8000652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f000 fae4 	bl	8000c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000688:	d134      	bne.n	80006f4 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
    	int inferenceResult = getResult(data_array[currentData], TREE);
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	222c      	movs	r2, #44	@ 0x2c
 8000690:	fb02 f303 	mul.w	r3, r2, r3
 8000694:	4a1a      	ldr	r2, [pc, #104]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000696:	4413      	add	r3, r2
 8000698:	4a1a      	ldr	r2, [pc, #104]	@ (8000704 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800069a:	6812      	ldr	r2, [r2, #0]
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff feda 	bl	8000458 <getResult>
 80006a4:	60b8      	str	r0, [r7, #8]
    	if (currentData<=DATA_ROWS)currentData++;
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b66      	cmp	r3, #102	@ 0x66
 80006ac:	dc05      	bgt.n	80006ba <HAL_TIM_PeriodElapsedCallback+0x42>
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a11      	ldr	r2, [pc, #68]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	e002      	b.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x48>
    	else currentData = 0;
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2120      	movs	r1, #32
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c8:	f000 fc26 	bl	8000f18 <HAL_GPIO_WritePin>
	  for(int i=0; i<(inferenceResult + 1) * 250; i++){};
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	e002      	b.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x60>
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3301      	adds	r3, #1
 80006dc:	22fa      	movs	r2, #250	@ 0xfa
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbf4      	blt.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x5a>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2120      	movs	r1, #32
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f000 fc12 	bl	8000f18 <HAL_GPIO_WritePin>
    }
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20001250 	.word	0x20001250
 8000700:	20000000 	.word	0x20000000
 8000704:	2000124c 	.word	0x2000124c

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_MspInit+0x44>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <HAL_MspInit+0x44>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <HAL_MspInit+0x44>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <HAL_MspInit+0x44>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <HAL_MspInit+0x44>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_MspInit+0x44>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800076c:	d113      	bne.n	8000796 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	201c      	movs	r0, #28
 800078c:	f000 fa1b 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000790:	201c      	movs	r0, #28
 8000792:	f000 fa34 	bl	8000bfe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <NMI_Handler+0x4>

080007ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <MemManage_Handler+0x4>

080007bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <UsageFault_Handler+0x4>

080007cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f8c5 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000808:	4802      	ldr	r0, [pc, #8]	@ (8000814 <TIM2_IRQHandler+0x10>)
 800080a:	f001 fe5f 	bl	80024cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20001200 	.word	0x20001200

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d207      	bcs.n	8000858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000848:	f002 faac 	bl	8002da4 <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	e009      	b.n	800086c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000858:	4b08      	ldr	r3, [pc, #32]	@ (800087c <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085e:	4b07      	ldr	r3, [pc, #28]	@ (800087c <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	@ (800087c <_sbrk+0x64>)
 8000868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20003000 	.word	0x20003000
 8000878:	00000400 	.word	0x00000400
 800087c:	20001254 	.word	0x20001254
 8000880:	200013a8 	.word	0x200013a8

08000884 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <SystemInit+0x20>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <SystemInit+0x20>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ac:	f7ff ffea 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	@ (80008e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	@ (80008f4 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d6:	f002 fa6b 	bl	8002db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008da:	f7ff fde7 	bl	80004ac <main>

080008de <LoopForever>:

LoopForever:
    b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	200011e4 	.word	0x200011e4
  ldr r2, =_sidata
 80008ec:	08002f68 	.word	0x08002f68
  ldr r2, =_sbss
 80008f0:	200011e4 	.word	0x200011e4
  ldr r4, =_ebss
 80008f4:	200013a4 	.word	0x200013a4

080008f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_2_IRQHandler>
	...

080008fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_Init+0x28>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a07      	ldr	r2, [pc, #28]	@ (8000924 <HAL_Init+0x28>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090c:	2003      	movs	r0, #3
 800090e:	f000 f94f 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000912:	200f      	movs	r0, #15
 8000914:	f000 f808 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000918:	f7ff fefc 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40022000 	.word	0x40022000

08000928 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_InitTick+0x54>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_InitTick+0x58>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f967 	bl	8000c1a <HAL_SYSTICK_Config>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e00e      	b.n	8000974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b0f      	cmp	r3, #15
 800095a:	d80a      	bhi.n	8000972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095c:	2200      	movs	r2, #0
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f000 f92f 	bl	8000bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <HAL_InitTick+0x5c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20001188 	.word	0x20001188
 8000980:	20001190 	.word	0x20001190
 8000984:	2000118c 	.word	0x2000118c

08000988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_IncTick+0x20>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x24>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <HAL_IncTick+0x24>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20001190 	.word	0x20001190
 80009ac:	20001258 	.word	0x20001258

080009b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20001258 	.word	0x20001258

080009c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff ffee 	bl	80009b0 <HAL_GetTick>
 80009d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e0:	d005      	beq.n	80009ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <HAL_Delay+0x44>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009ee:	bf00      	nop
 80009f0:	f7ff ffde 	bl	80009b0 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f7      	bhi.n	80009f0 <HAL_Delay+0x28>
  {
  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20001190 	.word	0x20001190

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	@ (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	@ (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	@ 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	@ 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff29 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff3e 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff8e 	bl	8000b04 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff31 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffa2 	bl	8000b6c <SysTick_Config>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c42:	e14e      	b.n	8000ee2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 8140 	beq.w	8000edc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d005      	beq.n	8000c74 <HAL_GPIO_Init+0x40>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d130      	bne.n	8000cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	f003 0201 	and.w	r2, r3, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d017      	beq.n	8000d12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d123      	bne.n	8000d66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	08da      	lsrs	r2, r3, #3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3208      	adds	r2, #8
 8000d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	691a      	ldr	r2, [r3, #16]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	08da      	lsrs	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	6939      	ldr	r1, [r7, #16]
 8000d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0203 	and.w	r2, r3, #3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 809a 	beq.w	8000edc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da8:	4b55      	ldr	r3, [pc, #340]	@ (8000f00 <HAL_GPIO_Init+0x2cc>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a54      	ldr	r2, [pc, #336]	@ (8000f00 <HAL_GPIO_Init+0x2cc>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b52      	ldr	r3, [pc, #328]	@ (8000f00 <HAL_GPIO_Init+0x2cc>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc0:	4a50      	ldr	r2, [pc, #320]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dea:	d013      	beq.n	8000e14 <HAL_GPIO_Init+0x1e0>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a46      	ldr	r2, [pc, #280]	@ (8000f08 <HAL_GPIO_Init+0x2d4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d00d      	beq.n	8000e10 <HAL_GPIO_Init+0x1dc>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a45      	ldr	r2, [pc, #276]	@ (8000f0c <HAL_GPIO_Init+0x2d8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d007      	beq.n	8000e0c <HAL_GPIO_Init+0x1d8>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a44      	ldr	r2, [pc, #272]	@ (8000f10 <HAL_GPIO_Init+0x2dc>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d101      	bne.n	8000e08 <HAL_GPIO_Init+0x1d4>
 8000e04:	2303      	movs	r3, #3
 8000e06:	e006      	b.n	8000e16 <HAL_GPIO_Init+0x1e2>
 8000e08:	2305      	movs	r3, #5
 8000e0a:	e004      	b.n	8000e16 <HAL_GPIO_Init+0x1e2>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e002      	b.n	8000e16 <HAL_GPIO_Init+0x1e2>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <HAL_GPIO_Init+0x1e2>
 8000e14:	2300      	movs	r3, #0
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	f002 0203 	and.w	r2, r2, #3
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	4093      	lsls	r3, r2
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e26:	4937      	ldr	r1, [pc, #220]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e34:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <HAL_GPIO_Init+0x2e0>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e58:	4a2e      	ldr	r2, [pc, #184]	@ (8000f14 <HAL_GPIO_Init+0x2e0>)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <HAL_GPIO_Init+0x2e0>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e82:	4a24      	ldr	r2, [pc, #144]	@ (8000f14 <HAL_GPIO_Init+0x2e0>)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eac:	4a19      	ldr	r2, [pc, #100]	@ (8000f14 <HAL_GPIO_Init+0x2e0>)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb2:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <HAL_GPIO_Init+0x2e0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f14 <HAL_GPIO_Init+0x2e0>)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f47f aea9 	bne.w	8000c44 <HAL_GPIO_Init+0x10>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010000 	.word	0x40010000
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	48000c00 	.word	0x48000c00
 8000f14:	40010400 	.word	0x40010400

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f001 b823 	b.w	8001fb4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 817d 	beq.w	800127e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f84:	4bbc      	ldr	r3, [pc, #752]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d00c      	beq.n	8000faa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f90:	4bb9      	ldr	r3, [pc, #740]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d15c      	bne.n	8001056 <HAL_RCC_OscConfig+0x10e>
 8000f9c:	4bb6      	ldr	r3, [pc, #728]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa8:	d155      	bne.n	8001056 <HAL_RCC_OscConfig+0x10e>
 8000faa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fae:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	095b      	lsrs	r3, r3, #5
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d102      	bne.n	8000fdc <HAL_RCC_OscConfig+0x94>
 8000fd6:	4ba8      	ldr	r3, [pc, #672]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	e015      	b.n	8001008 <HAL_RCC_OscConfig+0xc0>
 8000fdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000ff0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000ff8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001004:	4b9c      	ldr	r3, [pc, #624]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001008:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800100c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001010:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001014:	fa92 f2a2 	rbit	r2, r2
 8001018:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800101c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001020:	fab2 f282 	clz	r2, r2
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	f042 0220 	orr.w	r2, r2, #32
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	f002 021f 	and.w	r2, r2, #31
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 811f 	beq.w	800127c <HAL_RCC_OscConfig+0x334>
 800103e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001042:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f040 8116 	bne.w	800127c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	f000 bfaf 	b.w	8001fb4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800105a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001066:	d106      	bne.n	8001076 <HAL_RCC_OscConfig+0x12e>
 8001068:	4b83      	ldr	r3, [pc, #524]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a82      	ldr	r2, [pc, #520]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	e036      	b.n	80010e4 <HAL_RCC_OscConfig+0x19c>
 8001076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800107a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x158>
 8001086:	4b7c      	ldr	r3, [pc, #496]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7b      	ldr	r2, [pc, #492]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 800108c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b79      	ldr	r3, [pc, #484]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a78      	ldr	r2, [pc, #480]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8001098:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e021      	b.n	80010e4 <HAL_RCC_OscConfig+0x19c>
 80010a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x184>
 80010b2:	4b71      	ldr	r3, [pc, #452]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a70      	ldr	r2, [pc, #448]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b6e      	ldr	r3, [pc, #440]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a6d      	ldr	r2, [pc, #436]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0x19c>
 80010cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a69      	ldr	r2, [pc, #420]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b67      	ldr	r3, [pc, #412]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a66      	ldr	r2, [pc, #408]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010e4:	4b64      	ldr	r3, [pc, #400]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e8:	f023 020f 	bic.w	r2, r3, #15
 80010ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	495f      	ldr	r1, [pc, #380]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d059      	beq.n	80011c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff fc4f 	bl	80009b0 <HAL_GetTick>
 8001112:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	e00a      	b.n	800112e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fc4a 	bl	80009b0 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b64      	cmp	r3, #100	@ 0x64
 8001126:	d902      	bls.n	800112e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	f000 bf43 	b.w	8001fb4 <HAL_RCC_OscConfig+0x106c>
 800112e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001132:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001142:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	095b      	lsrs	r3, r3, #5
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d102      	bne.n	8001160 <HAL_RCC_OscConfig+0x218>
 800115a:	4b47      	ldr	r3, [pc, #284]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	e015      	b.n	800118c <HAL_RCC_OscConfig+0x244>
 8001160:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001164:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001174:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001178:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800117c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001188:	4b3b      	ldr	r3, [pc, #236]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 800118a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001190:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001194:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001198:	fa92 f2a2 	rbit	r2, r2
 800119c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80011a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	f042 0220 	orr.w	r2, r2, #32
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	f002 021f 	and.w	r2, r2, #31
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0ab      	beq.n	8001118 <HAL_RCC_OscConfig+0x1d0>
 80011c0:	e05d      	b.n	800127e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fbf5 	bl	80009b0 <HAL_GetTick>
 80011c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fbf0 	bl	80009b0 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b64      	cmp	r3, #100	@ 0x64
 80011da:	d902      	bls.n	80011e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	f000 bee9 	b.w	8001fb4 <HAL_RCC_OscConfig+0x106c>
 80011e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011e6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80011f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	fab3 f383 	clz	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	095b      	lsrs	r3, r3, #5
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x2cc>
 800120e:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	e015      	b.n	8001240 <HAL_RCC_OscConfig+0x2f8>
 8001214:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001218:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001228:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800122c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001230:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001240:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001244:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001248:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800124c:	fa92 f2a2 	rbit	r2, r2
 8001250:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001254:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001258:	fab2 f282 	clz	r2, r2
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	f042 0220 	orr.w	r2, r2, #32
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	f002 021f 	and.w	r2, r2, #31
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ab      	bne.n	80011cc <HAL_RCC_OscConfig+0x284>
 8001274:	e003      	b.n	800127e <HAL_RCC_OscConfig+0x336>
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001282:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 817d 	beq.w	800158e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001294:	4ba6      	ldr	r3, [pc, #664]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00b      	beq.n	80012b8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012a0:	4ba3      	ldr	r3, [pc, #652]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d172      	bne.n	8001392 <HAL_RCC_OscConfig+0x44a>
 80012ac:	4ba0      	ldr	r3, [pc, #640]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d16c      	bne.n	8001392 <HAL_RCC_OscConfig+0x44a>
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80012ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	095b      	lsrs	r3, r3, #5
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d102      	bne.n	80012e8 <HAL_RCC_OscConfig+0x3a0>
 80012e2:	4b93      	ldr	r3, [pc, #588]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	e013      	b.n	8001310 <HAL_RCC_OscConfig+0x3c8>
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001300:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800130c:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 800130e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001310:	2202      	movs	r2, #2
 8001312:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001316:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800131a:	fa92 f2a2 	rbit	r2, r2
 800131e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001322:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001326:	fab2 f282 	clz	r2, r2
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	f042 0220 	orr.w	r2, r2, #32
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	f002 021f 	and.w	r2, r2, #31
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <HAL_RCC_OscConfig+0x410>
 8001342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001346:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d002      	beq.n	8001358 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	f000 be2e 	b.w	8001fb4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001358:	4b75      	ldr	r3, [pc, #468]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001364:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	21f8      	movs	r1, #248	@ 0xf8
 800136e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001376:	fa91 f1a1 	rbit	r1, r1
 800137a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800137e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001382:	fab1 f181 	clz	r1, r1
 8001386:	b2c9      	uxtb	r1, r1
 8001388:	408b      	lsls	r3, r1
 800138a:	4969      	ldr	r1, [pc, #420]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001390:	e0fd      	b.n	800158e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001396:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8088 	beq.w	80014b4 <HAL_RCC_OscConfig+0x56c>
 80013a4:	2301      	movs	r3, #1
 80013a6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80013b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80013c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	461a      	mov	r2, r3
 80013cc:	2301      	movs	r3, #1
 80013ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff faee 	bl	80009b0 <HAL_GetTick>
 80013d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	e00a      	b.n	80013f0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fae9 	bl	80009b0 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d902      	bls.n	80013f0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	f000 bde2 	b.w	8001fb4 <HAL_RCC_OscConfig+0x106c>
 80013f0:	2302      	movs	r3, #2
 80013f2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001402:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001406:	fab3 f383 	clz	r3, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	095b      	lsrs	r3, r3, #5
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d102      	bne.n	8001420 <HAL_RCC_OscConfig+0x4d8>
 800141a:	4b45      	ldr	r3, [pc, #276]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	e013      	b.n	8001448 <HAL_RCC_OscConfig+0x500>
 8001420:	2302      	movs	r3, #2
 8001422:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001438:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001444:	4b3a      	ldr	r3, [pc, #232]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001448:	2202      	movs	r2, #2
 800144a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800144e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001452:	fa92 f2a2 	rbit	r2, r2
 8001456:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800145a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800145e:	fab2 f282 	clz	r2, r2
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	f042 0220 	orr.w	r2, r2, #32
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	f002 021f 	and.w	r2, r2, #31
 800146e:	2101      	movs	r1, #1
 8001470:	fa01 f202 	lsl.w	r2, r1, r2
 8001474:	4013      	ands	r3, r2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0af      	beq.n	80013da <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001486:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	21f8      	movs	r1, #248	@ 0xf8
 8001490:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001498:	fa91 f1a1 	rbit	r1, r1
 800149c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80014a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80014a4:	fab1 f181 	clz	r1, r1
 80014a8:	b2c9      	uxtb	r1, r1
 80014aa:	408b      	lsls	r3, r1
 80014ac:	4920      	ldr	r1, [pc, #128]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
 80014b2:	e06c      	b.n	800158e <HAL_RCC_OscConfig+0x646>
 80014b4:	2301      	movs	r3, #1
 80014b6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80014c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80014d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	461a      	mov	r2, r3
 80014dc:	2300      	movs	r3, #0
 80014de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fa66 	bl	80009b0 <HAL_GetTick>
 80014e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e8:	e00a      	b.n	8001500 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fa61 	bl	80009b0 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d902      	bls.n	8001500 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	f000 bd5a 	b.w	8001fb4 <HAL_RCC_OscConfig+0x106c>
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001512:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	fab3 f383 	clz	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	095b      	lsrs	r3, r3, #5
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b01      	cmp	r3, #1
 8001528:	d104      	bne.n	8001534 <HAL_RCC_OscConfig+0x5ec>
 800152a:	4b01      	ldr	r3, [pc, #4]	@ (8001530 <HAL_RCC_OscConfig+0x5e8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	e015      	b.n	800155c <HAL_RCC_OscConfig+0x614>
 8001530:	40021000 	.word	0x40021000
 8001534:	2302      	movs	r3, #2
 8001536:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800153e:	fa93 f3a3 	rbit	r3, r3
 8001542:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800154c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001558:	4bc8      	ldr	r3, [pc, #800]	@ (800187c <HAL_RCC_OscConfig+0x934>)
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155c:	2202      	movs	r2, #2
 800155e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001562:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001566:	fa92 f2a2 	rbit	r2, r2
 800156a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800156e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001572:	fab2 f282 	clz	r2, r2
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	f042 0220 	orr.w	r2, r2, #32
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	f002 021f 	and.w	r2, r2, #31
 8001582:	2101      	movs	r1, #1
 8001584:	fa01 f202 	lsl.w	r2, r1, r2
 8001588:	4013      	ands	r3, r2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1ad      	bne.n	80014ea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001592:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8110 	beq.w	80017c4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d079      	beq.n	80016a8 <HAL_RCC_OscConfig+0x760>
 80015b4:	2301      	movs	r3, #1
 80015b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80015c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4bab      	ldr	r3, [pc, #684]	@ (8001880 <HAL_RCC_OscConfig+0x938>)
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	461a      	mov	r2, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff f9e7 	bl	80009b0 <HAL_GetTick>
 80015e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff f9e2 	bl	80009b0 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d902      	bls.n	80015fe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	f000 bcdb 	b.w	8001fb4 <HAL_RCC_OscConfig+0x106c>
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001614:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001618:	2202      	movs	r2, #2
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001620:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fa93 f2a3 	rbit	r2, r3
 800162a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800163c:	2202      	movs	r2, #2
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001652:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001656:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001658:	4b88      	ldr	r3, [pc, #544]	@ (800187c <HAL_RCC_OscConfig+0x934>)
 800165a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800165c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001660:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001664:	2102      	movs	r1, #2
 8001666:	6019      	str	r1, [r3, #0]
 8001668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800166c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	fa93 f1a3 	rbit	r1, r3
 8001676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800167e:	6019      	str	r1, [r3, #0]
  return result;
 8001680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001684:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0a0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x6a0>
 80016a6:	e08d      	b.n	80017c4 <HAL_RCC_OscConfig+0x87c>
 80016a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fa93 f2a3 	rbit	r2, r3
 80016c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016ca:	601a      	str	r2, [r3, #0]
  return result;
 80016cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	4b68      	ldr	r3, [pc, #416]	@ (8001880 <HAL_RCC_OscConfig+0x938>)
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	461a      	mov	r2, r3
 80016e6:	2300      	movs	r3, #0
 80016e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f961 	bl	80009b0 <HAL_GetTick>
 80016ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff f95c 	bl	80009b0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d902      	bls.n	800170a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	f000 bc55 	b.w	8001fb4 <HAL_RCC_OscConfig+0x106c>
 800170a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001712:	2202      	movs	r2, #2
 8001714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	fa93 f2a3 	rbit	r2, r3
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001732:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001736:	2202      	movs	r2, #2
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f2a3 	rbit	r2, r3
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001756:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800175a:	2202      	movs	r2, #2
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001762:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001770:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001774:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001776:	4b41      	ldr	r3, [pc, #260]	@ (800187c <HAL_RCC_OscConfig+0x934>)
 8001778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800177a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001782:	2102      	movs	r1, #2
 8001784:	6019      	str	r1, [r3, #0]
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f1a3 	rbit	r1, r3
 8001794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001798:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800179c:	6019      	str	r1, [r3, #0]
  return result;
 800179e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2101      	movs	r1, #1
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d197      	bne.n	80016f4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 81a1 	beq.w	8001b1c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e0:	4b26      	ldr	r3, [pc, #152]	@ (800187c <HAL_RCC_OscConfig+0x934>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d116      	bne.n	800181a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ec:	4b23      	ldr	r3, [pc, #140]	@ (800187c <HAL_RCC_OscConfig+0x934>)
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	4a22      	ldr	r2, [pc, #136]	@ (800187c <HAL_RCC_OscConfig+0x934>)
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	61d3      	str	r3, [r2, #28]
 80017f8:	4b20      	ldr	r3, [pc, #128]	@ (800187c <HAL_RCC_OscConfig+0x934>)
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001812:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001814:	2301      	movs	r3, #1
 8001816:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_RCC_OscConfig+0x93c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11a      	bne.n	800185c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <HAL_RCC_OscConfig+0x93c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a16      	ldr	r2, [pc, #88]	@ (8001884 <HAL_RCC_OscConfig+0x93c>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001830:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff f8bd 	bl	80009b0 <HAL_GetTick>
 8001836:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	e009      	b.n	8001850 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183c:	f7ff f8b8 	bl	80009b0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	@ 0x64
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e3b1      	b.n	8001fb4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <HAL_RCC_OscConfig+0x93c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ef      	beq.n	800183c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001860:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10d      	bne.n	8001888 <HAL_RCC_OscConfig+0x940>
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <HAL_RCC_OscConfig+0x934>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a02      	ldr	r2, [pc, #8]	@ (800187c <HAL_RCC_OscConfig+0x934>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	e03c      	b.n	80018f4 <HAL_RCC_OscConfig+0x9ac>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	10908120 	.word	0x10908120
 8001884:	40007000 	.word	0x40007000
 8001888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10c      	bne.n	80018b2 <HAL_RCC_OscConfig+0x96a>
 8001898:	4bc1      	ldr	r3, [pc, #772]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4ac0      	ldr	r2, [pc, #768]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	4bbe      	ldr	r3, [pc, #760]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4abd      	ldr	r2, [pc, #756]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018aa:	f023 0304 	bic.w	r3, r3, #4
 80018ae:	6213      	str	r3, [r2, #32]
 80018b0:	e020      	b.n	80018f4 <HAL_RCC_OscConfig+0x9ac>
 80018b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b05      	cmp	r3, #5
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x994>
 80018c2:	4bb7      	ldr	r3, [pc, #732]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4ab6      	ldr	r2, [pc, #728]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	4bb4      	ldr	r3, [pc, #720]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4ab3      	ldr	r2, [pc, #716]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0x9ac>
 80018dc:	4bb0      	ldr	r3, [pc, #704]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4aaf      	ldr	r2, [pc, #700]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	4bad      	ldr	r3, [pc, #692]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4aac      	ldr	r2, [pc, #688]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80018ee:	f023 0304 	bic.w	r3, r3, #4
 80018f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8081 	beq.w	8001a08 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001906:	f7ff f853 	bl	80009b0 <HAL_GetTick>
 800190a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff f84e 	bl	80009b0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e345      	b.n	8001fb4 <HAL_RCC_OscConfig+0x106c>
 8001928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001930:	2202      	movs	r2, #2
 8001932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001938:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	fa93 f2a3 	rbit	r2, r3
 8001942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001946:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001950:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001954:	2202      	movs	r2, #2
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800196e:	601a      	str	r2, [r3, #0]
  return result;
 8001970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001974:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001978:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	095b      	lsrs	r3, r3, #5
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d102      	bne.n	8001994 <HAL_RCC_OscConfig+0xa4c>
 800198e:	4b84      	ldr	r3, [pc, #528]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	e013      	b.n	80019bc <HAL_RCC_OscConfig+0xa74>
 8001994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001998:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800199c:	2202      	movs	r2, #2
 800199e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	4b79      	ldr	r3, [pc, #484]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019c0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019c4:	2102      	movs	r1, #2
 80019c6:	6011      	str	r1, [r2, #0]
 80019c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019cc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	fa92 f1a2 	rbit	r1, r2
 80019d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019da:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019de:	6011      	str	r1, [r2, #0]
  return result;
 80019e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019e4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	fab2 f282 	clz	r2, r2
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	f002 021f 	and.w	r2, r2, #31
 80019fa:	2101      	movs	r1, #1
 80019fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d084      	beq.n	8001910 <HAL_RCC_OscConfig+0x9c8>
 8001a06:	e07f      	b.n	8001b08 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7fe ffd2 	bl	80009b0 <HAL_GetTick>
 8001a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a10:	e00b      	b.n	8001a2a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7fe ffcd 	bl	80009b0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e2c4      	b.n	8001fb4 <HAL_RCC_OscConfig+0x106c>
 8001a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f2a3 	rbit	r2, r3
 8001a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a48:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a56:	2202      	movs	r2, #2
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a70:	601a      	str	r2, [r3, #0]
  return result;
 8001a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a76:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_OscConfig+0xb4e>
 8001a90:	4b43      	ldr	r3, [pc, #268]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	e013      	b.n	8001abe <HAL_RCC_OscConfig+0xb76>
 8001a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	4b39      	ldr	r3, [pc, #228]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ac2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	6011      	str	r1, [r2, #0]
 8001aca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ace:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	fa92 f1a2 	rbit	r1, r2
 8001ad8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001adc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ae0:	6011      	str	r1, [r2, #0]
  return result;
 8001ae2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ae6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	fab2 f282 	clz	r2, r2
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	f002 021f 	and.w	r2, r2, #31
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f202 	lsl.w	r2, r1, r2
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d184      	bne.n	8001a12 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b08:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	4a22      	ldr	r2, [pc, #136]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8242 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba0 <HAL_RCC_OscConfig+0xc58>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	f000 8213 	beq.w	8001f62 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	f040 8162 	bne.w	8001e12 <HAL_RCC_OscConfig+0xeca>
 8001b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b52:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b60:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b72:	601a      	str	r2, [r3, #0]
  return result;
 8001b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b78:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	2300      	movs	r3, #0
 8001b92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7fe ff0c 	bl	80009b0 <HAL_GetTick>
 8001b98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	e00c      	b.n	8001bb8 <HAL_RCC_OscConfig+0xc70>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7fe ff04 	bl	80009b0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1fd      	b.n	8001fb4 <HAL_RCC_OscConfig+0x106c>
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fa93 f2a3 	rbit	r2, r3
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001bdc:	601a      	str	r2, [r3, #0]
  return result;
 8001bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001be6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d102      	bne.n	8001c02 <HAL_RCC_OscConfig+0xcba>
 8001bfc:	4bb0      	ldr	r3, [pc, #704]	@ (8001ec0 <HAL_RCC_OscConfig+0xf78>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	e027      	b.n	8001c52 <HAL_RCC_OscConfig+0xd0a>
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ec0 <HAL_RCC_OscConfig+0xf78>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c56:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c5a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c5e:	6011      	str	r1, [r2, #0]
 8001c60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c64:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	fa92 f1a2 	rbit	r1, r2
 8001c6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c72:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c76:	6011      	str	r1, [r2, #0]
  return result;
 8001c78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c7c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	fab2 f282 	clz	r2, r2
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f042 0220 	orr.w	r2, r2, #32
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f002 021f 	and.w	r2, r2, #31
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d182      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9e:	4b88      	ldr	r3, [pc, #544]	@ (8001ec0 <HAL_RCC_OscConfig+0xf78>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001caa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	497f      	ldr	r1, [pc, #508]	@ (8001ec0 <HAL_RCC_OscConfig+0xf78>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
 8001cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cca:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001cce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	fa93 f2a3 	rbit	r2, r3
 8001ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001cea:	601a      	str	r2, [r3, #0]
  return result;
 8001cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001cf4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	461a      	mov	r2, r3
 8001d08:	2301      	movs	r3, #1
 8001d0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7fe fe50 	bl	80009b0 <HAL_GetTick>
 8001d10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d14:	e009      	b.n	8001d2a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe fe4b 	bl	80009b0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e144      	b.n	8001fb4 <HAL_RCC_OscConfig+0x106c>
 8001d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fa93 f2a3 	rbit	r2, r3
 8001d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d4e:	601a      	str	r2, [r3, #0]
  return result;
 8001d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d54:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_OscConfig+0xe2c>
 8001d6e:	4b54      	ldr	r3, [pc, #336]	@ (8001ec0 <HAL_RCC_OscConfig+0xf78>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e027      	b.n	8001dc4 <HAL_RCC_OscConfig+0xe7c>
 8001d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d78:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d86:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d94:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001da2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dac:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec0 <HAL_RCC_OscConfig+0xf78>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dc8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001dcc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001dd0:	6011      	str	r1, [r2, #0]
 8001dd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dd6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	fa92 f1a2 	rbit	r1, r2
 8001de0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001de4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001de8:	6011      	str	r1, [r2, #0]
  return result;
 8001dea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dee:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f002 021f 	and.w	r2, r2, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d082      	beq.n	8001d16 <HAL_RCC_OscConfig+0xdce>
 8001e10:	e0cf      	b.n	8001fb2 <HAL_RCC_OscConfig+0x106a>
 8001e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e16:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e36:	601a      	str	r2, [r3, #0]
  return result;
 8001e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	461a      	mov	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe fdaa 	bl	80009b0 <HAL_GetTick>
 8001e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe fda5 	bl	80009b0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e09e      	b.n	8001fb4 <HAL_RCC_OscConfig+0x106c>
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e96:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e9a:	601a      	str	r2, [r3, #0]
  return result;
 8001e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ea4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d104      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xf7c>
 8001eba:	4b01      	ldr	r3, [pc, #4]	@ (8001ec0 <HAL_RCC_OscConfig+0xf78>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	e029      	b.n	8001f14 <HAL_RCC_OscConfig+0xfcc>
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ecc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ef2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <HAL_RCC_OscConfig+0x1078>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f18:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f1c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f20:	6011      	str	r1, [r2, #0]
 8001f22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f26:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	fa92 f1a2 	rbit	r1, r2
 8001f30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f34:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f38:	6011      	str	r1, [r2, #0]
  return result;
 8001f3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f3e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	fab2 f282 	clz	r2, r2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f042 0220 	orr.w	r2, r2, #32
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f002 021f 	and.w	r2, r2, #31
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d180      	bne.n	8001e62 <HAL_RCC_OscConfig+0xf1a>
 8001f60:	e027      	b.n	8001fb2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e01e      	b.n	8001fb4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_RCC_OscConfig+0x1078>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f82:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d10b      	bne.n	8001fae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b09e      	sub	sp, #120	@ 0x78
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e162      	b.n	80022a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b90      	ldr	r3, [pc, #576]	@ (8002220 <HAL_RCC_ClockConfig+0x25c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d910      	bls.n	800200c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b8d      	ldr	r3, [pc, #564]	@ (8002220 <HAL_RCC_ClockConfig+0x25c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	498b      	ldr	r1, [pc, #556]	@ (8002220 <HAL_RCC_ClockConfig+0x25c>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b89      	ldr	r3, [pc, #548]	@ (8002220 <HAL_RCC_ClockConfig+0x25c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e14a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b82      	ldr	r3, [pc, #520]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	497f      	ldr	r1, [pc, #508]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80dc 	beq.w	80021f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d13c      	bne.n	80020ba <HAL_RCC_ClockConfig+0xf6>
 8002040:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002044:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800204e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <HAL_RCC_ClockConfig+0xa6>
 8002064:	4b6f      	ldr	r3, [pc, #444]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	e00f      	b.n	800208a <HAL_RCC_ClockConfig+0xc6>
 800206a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800206e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	667b      	str	r3, [r7, #100]	@ 0x64
 8002078:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800207c:	663b      	str	r3, [r7, #96]	@ 0x60
 800207e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002086:	4b67      	ldr	r3, [pc, #412]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800208e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002090:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002092:	fa92 f2a2 	rbit	r2, r2
 8002096:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800209a:	fab2 f282 	clz	r2, r2
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	f042 0220 	orr.w	r2, r2, #32
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f002 021f 	and.w	r2, r2, #31
 80020aa:	2101      	movs	r1, #1
 80020ac:	fa01 f202 	lsl.w	r2, r1, r2
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d17b      	bne.n	80021ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0f3      	b.n	80022a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d13c      	bne.n	800213c <HAL_RCC_ClockConfig+0x178>
 80020c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80020d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_ClockConfig+0x128>
 80020e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e00f      	b.n	800210c <HAL_RCC_ClockConfig+0x148>
 80020ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80020fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002108:	4b46      	ldr	r3, [pc, #280]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002110:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002112:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002114:	fa92 f2a2 	rbit	r2, r2
 8002118:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800211a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f002 021f 	and.w	r2, r2, #31
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d13a      	bne.n	80021ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b2      	b.n	80022a2 <HAL_RCC_ClockConfig+0x2de>
 800213c:	2302      	movs	r3, #2
 800213e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_RCC_ClockConfig+0x1a0>
 800215e:	4b31      	ldr	r3, [pc, #196]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	e00d      	b.n	8002180 <HAL_RCC_ClockConfig+0x1bc>
 8002164:	2302      	movs	r3, #2
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002170:	2302      	movs	r3, #2
 8002172:	623b      	str	r3, [r7, #32]
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	2202      	movs	r2, #2
 8002182:	61ba      	str	r2, [r7, #24]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	fa92 f2a2 	rbit	r2, r2
 800218a:	617a      	str	r2, [r7, #20]
  return result;
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	fab2 f282 	clz	r2, r2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f042 0220 	orr.w	r2, r2, #32
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f002 021f 	and.w	r2, r2, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e079      	b.n	80022a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	491a      	ldr	r1, [pc, #104]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7fe fbf6 	bl	80009b0 <HAL_GetTick>
 80021c4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7fe fbf2 	bl	80009b0 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e061      	b.n	80022a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_RCC_ClockConfig+0x260>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_RCC_ClockConfig+0x25c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d214      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <HAL_RCC_ClockConfig+0x25c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	4906      	ldr	r1, [pc, #24]	@ (8002220 <HAL_RCC_ClockConfig+0x25c>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <HAL_RCC_ClockConfig+0x25c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e040      	b.n	80022a2 <HAL_RCC_ClockConfig+0x2de>
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_RCC_ClockConfig+0x2e8>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	491a      	ldr	r1, [pc, #104]	@ (80022ac <HAL_RCC_ClockConfig+0x2e8>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <HAL_RCC_ClockConfig+0x2e8>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4912      	ldr	r1, [pc, #72]	@ (80022ac <HAL_RCC_ClockConfig+0x2e8>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002266:	f000 f829 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800226a:	4601      	mov	r1, r0
 800226c:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <HAL_RCC_ClockConfig+0x2e8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002274:	22f0      	movs	r2, #240	@ 0xf0
 8002276:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	fa92 f2a2 	rbit	r2, r2
 800227e:	60fa      	str	r2, [r7, #12]
  return result;
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	fab2 f282 	clz	r2, r2
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	40d3      	lsrs	r3, r2
 800228a:	4a09      	ldr	r2, [pc, #36]	@ (80022b0 <HAL_RCC_ClockConfig+0x2ec>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	fa21 f303 	lsr.w	r3, r1, r3
 8002292:	4a08      	ldr	r2, [pc, #32]	@ (80022b4 <HAL_RCC_ClockConfig+0x2f0>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <HAL_RCC_ClockConfig+0x2f4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fb44 	bl	8000928 <HAL_InitTick>
  
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3778      	adds	r7, #120	@ 0x78
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08002f30 	.word	0x08002f30
 80022b4:	20001188 	.word	0x20001188
 80022b8:	2000118c 	.word	0x2000118c

080022bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d002      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x30>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ea:	e026      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	613b      	str	r3, [r7, #16]
      break;
 80022f0:	e026      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0c9b      	lsrs	r3, r3, #18
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002300:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	4a14      	ldr	r2, [pc, #80]	@ (800235c <HAL_RCC_GetSysClockFreq+0xa0>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002318:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	e004      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a0c      	ldr	r2, [pc, #48]	@ (8002360 <HAL_RCC_GetSysClockFreq+0xa4>)
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	613b      	str	r3, [r7, #16]
      break;
 8002338:	e002      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800233c:	613b      	str	r3, [r7, #16]
      break;
 800233e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002340:	693b      	ldr	r3, [r7, #16]
}
 8002342:	4618      	mov	r0, r3
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	007a1200 	.word	0x007a1200
 8002358:	08002f40 	.word	0x08002f40
 800235c:	08002f50 	.word	0x08002f50
 8002360:	003d0900 	.word	0x003d0900

08002364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e049      	b.n	800240a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe f9e6 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f000 fa86 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e040      	b.n	80024ae <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1c      	ldr	r2, [pc, #112]	@ (80024bc <HAL_TIM_Base_Start_IT+0xa8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00e      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x58>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002456:	d009      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x58>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a18      	ldr	r2, [pc, #96]	@ (80024c0 <HAL_TIM_Base_Start_IT+0xac>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x58>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a17      	ldr	r2, [pc, #92]	@ (80024c4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d115      	bne.n	8002498 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b06      	cmp	r3, #6
 800247c:	d015      	beq.n	80024aa <HAL_TIM_Base_Start_IT+0x96>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002484:	d011      	beq.n	80024aa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	e008      	b.n	80024aa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e000      	b.n	80024ac <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40014000 	.word	0x40014000
 80024c8:	00010007 	.word	0x00010007

080024cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d020      	beq.n	8002530 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01b      	beq.n	8002530 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0202 	mvn.w	r2, #2
 8002500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f9ad 	bl	8002876 <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f99f 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f9b0 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d020      	beq.n	800257c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01b      	beq.n	800257c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0204 	mvn.w	r2, #4
 800254c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2202      	movs	r2, #2
 8002552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f987 	bl	8002876 <HAL_TIM_IC_CaptureCallback>
 8002568:	e005      	b.n	8002576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f979 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f98a 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d020      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0208 	mvn.w	r2, #8
 8002598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2204      	movs	r2, #4
 800259e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f961 	bl	8002876 <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f953 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f964 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2208      	movs	r2, #8
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f93b 	bl	8002876 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f92d 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f93e 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0201 	mvn.w	r2, #1
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe f820 	bl	8000678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fac2 	bl	8002be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 faba 	bl	8002bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8fd 	bl	800289e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00c      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0220 	mvn.w	r2, #32
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa82 	bl	8002bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_TIM_ConfigClockSource+0x1c>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e0b6      	b.n	800285a <HAL_TIM_ConfigClockSource+0x18a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800270e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002728:	d03e      	beq.n	80027a8 <HAL_TIM_ConfigClockSource+0xd8>
 800272a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800272e:	f200 8087 	bhi.w	8002840 <HAL_TIM_ConfigClockSource+0x170>
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002736:	f000 8086 	beq.w	8002846 <HAL_TIM_ConfigClockSource+0x176>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800273e:	d87f      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x170>
 8002740:	2b70      	cmp	r3, #112	@ 0x70
 8002742:	d01a      	beq.n	800277a <HAL_TIM_ConfigClockSource+0xaa>
 8002744:	2b70      	cmp	r3, #112	@ 0x70
 8002746:	d87b      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x170>
 8002748:	2b60      	cmp	r3, #96	@ 0x60
 800274a:	d050      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x11e>
 800274c:	2b60      	cmp	r3, #96	@ 0x60
 800274e:	d877      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x170>
 8002750:	2b50      	cmp	r3, #80	@ 0x50
 8002752:	d03c      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0xfe>
 8002754:	2b50      	cmp	r3, #80	@ 0x50
 8002756:	d873      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x170>
 8002758:	2b40      	cmp	r3, #64	@ 0x40
 800275a:	d058      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x13e>
 800275c:	2b40      	cmp	r3, #64	@ 0x40
 800275e:	d86f      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x170>
 8002760:	2b30      	cmp	r3, #48	@ 0x30
 8002762:	d064      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15e>
 8002764:	2b30      	cmp	r3, #48	@ 0x30
 8002766:	d86b      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x170>
 8002768:	2b20      	cmp	r3, #32
 800276a:	d060      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15e>
 800276c:	2b20      	cmp	r3, #32
 800276e:	d867      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x170>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d05c      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15e>
 8002774:	2b10      	cmp	r3, #16
 8002776:	d05a      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15e>
 8002778:	e062      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800278a:	f000 f991 	bl	8002ab0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800279c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	609a      	str	r2, [r3, #8]
      break;
 80027a6:	e04f      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027b8:	f000 f97a 	bl	8002ab0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027ca:	609a      	str	r2, [r3, #8]
      break;
 80027cc:	e03c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 f8ee 	bl	80029bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2150      	movs	r1, #80	@ 0x50
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f947 	bl	8002a7a <TIM_ITRx_SetConfig>
      break;
 80027ec:	e02c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 f90d 	bl	8002a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2160      	movs	r1, #96	@ 0x60
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f937 	bl	8002a7a <TIM_ITRx_SetConfig>
      break;
 800280c:	e01c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	461a      	mov	r2, r3
 800281c:	f000 f8ce 	bl	80029bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2140      	movs	r1, #64	@ 0x40
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f927 	bl	8002a7a <TIM_ITRx_SetConfig>
      break;
 800282c:	e00c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	4610      	mov	r0, r2
 800283a:	f000 f91e 	bl	8002a7a <TIM_ITRx_SetConfig>
      break;
 800283e:	e003      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e000      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a38      	ldr	r2, [pc, #224]	@ (80029a8 <TIM_Base_SetConfig+0xf4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_Base_SetConfig+0x28>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0x28>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a35      	ldr	r2, [pc, #212]	@ (80029ac <TIM_Base_SetConfig+0xf8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d108      	bne.n	80028ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <TIM_Base_SetConfig+0xf4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <TIM_Base_SetConfig+0x6a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028fc:	d00f      	beq.n	800291e <TIM_Base_SetConfig+0x6a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2a      	ldr	r2, [pc, #168]	@ (80029ac <TIM_Base_SetConfig+0xf8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00b      	beq.n	800291e <TIM_Base_SetConfig+0x6a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a29      	ldr	r2, [pc, #164]	@ (80029b0 <TIM_Base_SetConfig+0xfc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <TIM_Base_SetConfig+0x6a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a28      	ldr	r2, [pc, #160]	@ (80029b4 <TIM_Base_SetConfig+0x100>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <TIM_Base_SetConfig+0x6a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a27      	ldr	r2, [pc, #156]	@ (80029b8 <TIM_Base_SetConfig+0x104>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d108      	bne.n	8002930 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a14      	ldr	r2, [pc, #80]	@ (80029a8 <TIM_Base_SetConfig+0xf4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00b      	beq.n	8002974 <TIM_Base_SetConfig+0xc0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a14      	ldr	r2, [pc, #80]	@ (80029b0 <TIM_Base_SetConfig+0xfc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <TIM_Base_SetConfig+0xc0>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a13      	ldr	r2, [pc, #76]	@ (80029b4 <TIM_Base_SetConfig+0x100>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0xc0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <TIM_Base_SetConfig+0x104>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d105      	bne.n	800299a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f023 0201 	bic.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	611a      	str	r2, [r3, #16]
  }
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40014000 	.word	0x40014000
 80029b4:	40014400 	.word	0x40014400
 80029b8:	40014800 	.word	0x40014800

080029bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f023 0201 	bic.w	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 030a 	bic.w	r3, r3, #10
 80029f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b087      	sub	sp, #28
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f023 0210 	bic.w	r2, r3, #16
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	031b      	lsls	r3, r3, #12
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f043 0307 	orr.w	r3, r3, #7
 8002a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	021a      	lsls	r2, r3, #8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e054      	b.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a24      	ldr	r2, [pc, #144]	@ (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002b38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b70:	d009      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10c      	bne.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40000400 	.word	0x40000400
 8002bc8:	40014000 	.word	0x40014000

08002bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <malloc>:
 8002c08:	4b02      	ldr	r3, [pc, #8]	@ (8002c14 <malloc+0xc>)
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	f000 b825 	b.w	8002c5c <_malloc_r>
 8002c12:	bf00      	nop
 8002c14:	20001194 	.word	0x20001194

08002c18 <sbrk_aligned>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	4e0f      	ldr	r6, [pc, #60]	@ (8002c58 <sbrk_aligned+0x40>)
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	6831      	ldr	r1, [r6, #0]
 8002c20:	4605      	mov	r5, r0
 8002c22:	b911      	cbnz	r1, 8002c2a <sbrk_aligned+0x12>
 8002c24:	f000 f8ae 	bl	8002d84 <_sbrk_r>
 8002c28:	6030      	str	r0, [r6, #0]
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f000 f8a9 	bl	8002d84 <_sbrk_r>
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	d103      	bne.n	8002c3e <sbrk_aligned+0x26>
 8002c36:	f04f 34ff 	mov.w	r4, #4294967295
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	1cc4      	adds	r4, r0, #3
 8002c40:	f024 0403 	bic.w	r4, r4, #3
 8002c44:	42a0      	cmp	r0, r4
 8002c46:	d0f8      	beq.n	8002c3a <sbrk_aligned+0x22>
 8002c48:	1a21      	subs	r1, r4, r0
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f000 f89a 	bl	8002d84 <_sbrk_r>
 8002c50:	3001      	adds	r0, #1
 8002c52:	d1f2      	bne.n	8002c3a <sbrk_aligned+0x22>
 8002c54:	e7ef      	b.n	8002c36 <sbrk_aligned+0x1e>
 8002c56:	bf00      	nop
 8002c58:	2000125c 	.word	0x2000125c

08002c5c <_malloc_r>:
 8002c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c60:	1ccd      	adds	r5, r1, #3
 8002c62:	f025 0503 	bic.w	r5, r5, #3
 8002c66:	3508      	adds	r5, #8
 8002c68:	2d0c      	cmp	r5, #12
 8002c6a:	bf38      	it	cc
 8002c6c:	250c      	movcc	r5, #12
 8002c6e:	2d00      	cmp	r5, #0
 8002c70:	4606      	mov	r6, r0
 8002c72:	db01      	blt.n	8002c78 <_malloc_r+0x1c>
 8002c74:	42a9      	cmp	r1, r5
 8002c76:	d904      	bls.n	8002c82 <_malloc_r+0x26>
 8002c78:	230c      	movs	r3, #12
 8002c7a:	6033      	str	r3, [r6, #0]
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d58 <_malloc_r+0xfc>
 8002c86:	f000 f869 	bl	8002d5c <__malloc_lock>
 8002c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c8e:	461c      	mov	r4, r3
 8002c90:	bb44      	cbnz	r4, 8002ce4 <_malloc_r+0x88>
 8002c92:	4629      	mov	r1, r5
 8002c94:	4630      	mov	r0, r6
 8002c96:	f7ff ffbf 	bl	8002c18 <sbrk_aligned>
 8002c9a:	1c43      	adds	r3, r0, #1
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	d158      	bne.n	8002d52 <_malloc_r+0xf6>
 8002ca0:	f8d8 4000 	ldr.w	r4, [r8]
 8002ca4:	4627      	mov	r7, r4
 8002ca6:	2f00      	cmp	r7, #0
 8002ca8:	d143      	bne.n	8002d32 <_malloc_r+0xd6>
 8002caa:	2c00      	cmp	r4, #0
 8002cac:	d04b      	beq.n	8002d46 <_malloc_r+0xea>
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	4639      	mov	r1, r7
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	eb04 0903 	add.w	r9, r4, r3
 8002cb8:	f000 f864 	bl	8002d84 <_sbrk_r>
 8002cbc:	4581      	cmp	r9, r0
 8002cbe:	d142      	bne.n	8002d46 <_malloc_r+0xea>
 8002cc0:	6821      	ldr	r1, [r4, #0]
 8002cc2:	1a6d      	subs	r5, r5, r1
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	f7ff ffa6 	bl	8002c18 <sbrk_aligned>
 8002ccc:	3001      	adds	r0, #1
 8002cce:	d03a      	beq.n	8002d46 <_malloc_r+0xea>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	442b      	add	r3, r5
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	bb62      	cbnz	r2, 8002d38 <_malloc_r+0xdc>
 8002cde:	f8c8 7000 	str.w	r7, [r8]
 8002ce2:	e00f      	b.n	8002d04 <_malloc_r+0xa8>
 8002ce4:	6822      	ldr	r2, [r4, #0]
 8002ce6:	1b52      	subs	r2, r2, r5
 8002ce8:	d420      	bmi.n	8002d2c <_malloc_r+0xd0>
 8002cea:	2a0b      	cmp	r2, #11
 8002cec:	d917      	bls.n	8002d1e <_malloc_r+0xc2>
 8002cee:	1961      	adds	r1, r4, r5
 8002cf0:	42a3      	cmp	r3, r4
 8002cf2:	6025      	str	r5, [r4, #0]
 8002cf4:	bf18      	it	ne
 8002cf6:	6059      	strne	r1, [r3, #4]
 8002cf8:	6863      	ldr	r3, [r4, #4]
 8002cfa:	bf08      	it	eq
 8002cfc:	f8c8 1000 	streq.w	r1, [r8]
 8002d00:	5162      	str	r2, [r4, r5]
 8002d02:	604b      	str	r3, [r1, #4]
 8002d04:	4630      	mov	r0, r6
 8002d06:	f000 f82f 	bl	8002d68 <__malloc_unlock>
 8002d0a:	f104 000b 	add.w	r0, r4, #11
 8002d0e:	1d23      	adds	r3, r4, #4
 8002d10:	f020 0007 	bic.w	r0, r0, #7
 8002d14:	1ac2      	subs	r2, r0, r3
 8002d16:	bf1c      	itt	ne
 8002d18:	1a1b      	subne	r3, r3, r0
 8002d1a:	50a3      	strne	r3, [r4, r2]
 8002d1c:	e7af      	b.n	8002c7e <_malloc_r+0x22>
 8002d1e:	6862      	ldr	r2, [r4, #4]
 8002d20:	42a3      	cmp	r3, r4
 8002d22:	bf0c      	ite	eq
 8002d24:	f8c8 2000 	streq.w	r2, [r8]
 8002d28:	605a      	strne	r2, [r3, #4]
 8002d2a:	e7eb      	b.n	8002d04 <_malloc_r+0xa8>
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	6864      	ldr	r4, [r4, #4]
 8002d30:	e7ae      	b.n	8002c90 <_malloc_r+0x34>
 8002d32:	463c      	mov	r4, r7
 8002d34:	687f      	ldr	r7, [r7, #4]
 8002d36:	e7b6      	b.n	8002ca6 <_malloc_r+0x4a>
 8002d38:	461a      	mov	r2, r3
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	d1fb      	bne.n	8002d38 <_malloc_r+0xdc>
 8002d40:	2300      	movs	r3, #0
 8002d42:	6053      	str	r3, [r2, #4]
 8002d44:	e7de      	b.n	8002d04 <_malloc_r+0xa8>
 8002d46:	230c      	movs	r3, #12
 8002d48:	6033      	str	r3, [r6, #0]
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	f000 f80c 	bl	8002d68 <__malloc_unlock>
 8002d50:	e794      	b.n	8002c7c <_malloc_r+0x20>
 8002d52:	6005      	str	r5, [r0, #0]
 8002d54:	e7d6      	b.n	8002d04 <_malloc_r+0xa8>
 8002d56:	bf00      	nop
 8002d58:	20001260 	.word	0x20001260

08002d5c <__malloc_lock>:
 8002d5c:	4801      	ldr	r0, [pc, #4]	@ (8002d64 <__malloc_lock+0x8>)
 8002d5e:	f000 b84b 	b.w	8002df8 <__retarget_lock_acquire_recursive>
 8002d62:	bf00      	nop
 8002d64:	200013a0 	.word	0x200013a0

08002d68 <__malloc_unlock>:
 8002d68:	4801      	ldr	r0, [pc, #4]	@ (8002d70 <__malloc_unlock+0x8>)
 8002d6a:	f000 b846 	b.w	8002dfa <__retarget_lock_release_recursive>
 8002d6e:	bf00      	nop
 8002d70:	200013a0 	.word	0x200013a0

08002d74 <memset>:
 8002d74:	4402      	add	r2, r0
 8002d76:	4603      	mov	r3, r0
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <memset+0xa>
 8002d7c:	4770      	bx	lr
 8002d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d82:	e7f9      	b.n	8002d78 <memset+0x4>

08002d84 <_sbrk_r>:
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	4d06      	ldr	r5, [pc, #24]	@ (8002da0 <_sbrk_r+0x1c>)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	602b      	str	r3, [r5, #0]
 8002d90:	f7fd fd42 	bl	8000818 <_sbrk>
 8002d94:	1c43      	adds	r3, r0, #1
 8002d96:	d102      	bne.n	8002d9e <_sbrk_r+0x1a>
 8002d98:	682b      	ldr	r3, [r5, #0]
 8002d9a:	b103      	cbz	r3, 8002d9e <_sbrk_r+0x1a>
 8002d9c:	6023      	str	r3, [r4, #0]
 8002d9e:	bd38      	pop	{r3, r4, r5, pc}
 8002da0:	2000139c 	.word	0x2000139c

08002da4 <__errno>:
 8002da4:	4b01      	ldr	r3, [pc, #4]	@ (8002dac <__errno+0x8>)
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20001194 	.word	0x20001194

08002db0 <__libc_init_array>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	4d0d      	ldr	r5, [pc, #52]	@ (8002de8 <__libc_init_array+0x38>)
 8002db4:	4c0d      	ldr	r4, [pc, #52]	@ (8002dec <__libc_init_array+0x3c>)
 8002db6:	1b64      	subs	r4, r4, r5
 8002db8:	10a4      	asrs	r4, r4, #2
 8002dba:	2600      	movs	r6, #0
 8002dbc:	42a6      	cmp	r6, r4
 8002dbe:	d109      	bne.n	8002dd4 <__libc_init_array+0x24>
 8002dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8002df0 <__libc_init_array+0x40>)
 8002dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8002df4 <__libc_init_array+0x44>)
 8002dc4:	f000 f828 	bl	8002e18 <_init>
 8002dc8:	1b64      	subs	r4, r4, r5
 8002dca:	10a4      	asrs	r4, r4, #2
 8002dcc:	2600      	movs	r6, #0
 8002dce:	42a6      	cmp	r6, r4
 8002dd0:	d105      	bne.n	8002dde <__libc_init_array+0x2e>
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
 8002dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd8:	4798      	blx	r3
 8002dda:	3601      	adds	r6, #1
 8002ddc:	e7ee      	b.n	8002dbc <__libc_init_array+0xc>
 8002dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de2:	4798      	blx	r3
 8002de4:	3601      	adds	r6, #1
 8002de6:	e7f2      	b.n	8002dce <__libc_init_array+0x1e>
 8002de8:	08002f60 	.word	0x08002f60
 8002dec:	08002f60 	.word	0x08002f60
 8002df0:	08002f60 	.word	0x08002f60
 8002df4:	08002f64 	.word	0x08002f64

08002df8 <__retarget_lock_acquire_recursive>:
 8002df8:	4770      	bx	lr

08002dfa <__retarget_lock_release_recursive>:
 8002dfa:	4770      	bx	lr

08002dfc <memcpy>:
 8002dfc:	440a      	add	r2, r1
 8002dfe:	4291      	cmp	r1, r2
 8002e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e04:	d100      	bne.n	8002e08 <memcpy+0xc>
 8002e06:	4770      	bx	lr
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e12:	4291      	cmp	r1, r2
 8002e14:	d1f9      	bne.n	8002e0a <memcpy+0xe>
 8002e16:	bd10      	pop	{r4, pc}

08002e18 <_init>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr

08002e24 <_fini>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	bf00      	nop
 8002e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2a:	bc08      	pop	{r3}
 8002e2c:	469e      	mov	lr, r3
 8002e2e:	4770      	bx	lr
