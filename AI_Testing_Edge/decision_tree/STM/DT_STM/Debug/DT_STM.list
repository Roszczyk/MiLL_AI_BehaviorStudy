
DT_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08002e28  08002e28  00003e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f58  08002f58  000051e4  2**0
                  CONTENTS
  4 .ARM          00000000  08002f58  08002f58  000051e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f58  08002f58  000051e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f58  08002f58  00003f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f5c  08002f5c  00003f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000011e4  20000000  08002f60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000051e4  2**0
                  CONTENTS
 10 .bss          000001c0  200011e4  200011e4  000051e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200013a4  200013a4  000051e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000051e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009238  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001779  00000000  00000000  0000e44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0000fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f68e  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b332  00000000  00000000  0002fbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be39e  00000000  00000000  0003af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f92be  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000751  00000000  00000000  000f9301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a70  00000000  00000000  000f9a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  000fc4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200011e4 	.word	0x200011e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e10 	.word	0x08002e10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200011e8 	.word	0x200011e8
 80001c4:	08002e10 	.word	0x08002e10

080001c8 <buildTree>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
TreeNodeIndex buildTree(int index[DEPTH][1 << (DEPTH-1)], float condition[DEPTH][1 << (DEPTH-1)], int * results, int level, int rowNumber){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
//	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
//	  HAL_Delay(100);
//	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(100);
	TreeNodeIndex node = (TreeNodeIndex)malloc(sizeof(TreeNode));
 80001d6:	201c      	movs	r0, #28
 80001d8:	f002 fd12 	bl	8002c00 <malloc>
 80001dc:	4603      	mov	r3, r0
 80001de:	617b      	str	r3, [r7, #20]
    if (!node) {
 80001e0:	697b      	ldr	r3, [r7, #20]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d101      	bne.n	80001ea <buildTree+0x22>
        return NULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	e048      	b.n	800027c <buildTree+0xb4>
    }
    node -> level = level;
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	60da      	str	r2, [r3, #12]
    node -> rowNumber = rowNumber;
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	6a3a      	ldr	r2, [r7, #32]
 80001f4:	611a      	str	r2, [r3, #16]
    if (level >= DEPTH){
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	2b05      	cmp	r3, #5
 80001fa:	dd0e      	ble.n	800021a <buildTree+0x52>
        node->result = results[rowNumber];
 80001fc:	6a3b      	ldr	r3, [r7, #32]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	609a      	str	r2, [r3, #8]
        node->below = NULL;
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	2200      	movs	r2, #0
 800020e:	615a      	str	r2, [r3, #20]
        node->over = NULL;
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	2200      	movs	r2, #0
 8000214:	619a      	str	r2, [r3, #24]
        return node;
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	e030      	b.n	800027c <buildTree+0xb4>
    }
    node->index = index[level][rowNumber];
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	01db      	lsls	r3, r3, #7
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	4413      	add	r3, r2
 8000222:	6a3a      	ldr	r2, [r7, #32]
 8000224:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	605a      	str	r2, [r3, #4]
    node->condition = condition[level][rowNumber];
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	01db      	lsls	r3, r3, #7
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	441a      	add	r2, r3
 8000234:	6a3b      	ldr	r3, [r7, #32]
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4413      	add	r3, r2
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	601a      	str	r2, [r3, #0]
    node->below = buildTree(index, condition, results, level+1, rowNumber*2);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	6a3b      	ldr	r3, [r7, #32]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	4613      	mov	r3, r2
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	68b9      	ldr	r1, [r7, #8]
 8000250:	68f8      	ldr	r0, [r7, #12]
 8000252:	f7ff ffb9 	bl	80001c8 <buildTree>
 8000256:	4602      	mov	r2, r0
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	615a      	str	r2, [r3, #20]
    node->over = buildTree(index, condition, results, level+1, rowNumber*2 + 1);
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	1c5a      	adds	r2, r3, #1
 8000260:	6a3b      	ldr	r3, [r7, #32]
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	3301      	adds	r3, #1
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	4613      	mov	r3, r2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ffaa 	bl	80001c8 <buildTree>
 8000274:	4602      	mov	r2, r0
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	619a      	str	r2, [r3, #24]
    return node;
 800027a:	697b      	ldr	r3, [r7, #20]
}
 800027c:	4618      	mov	r0, r3
 800027e:	3718      	adds	r7, #24
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <initTree>:

TreeNodeIndex initTree(){
 8000284:	b580      	push	{r7, lr}
 8000286:	f5ad 6de2 	sub.w	sp, sp, #1808	@ 0x710
 800028a:	af02      	add	r7, sp, #8
	int index[DEPTH][1 << (DEPTH-1)] =  {
 800028c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000290:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000294:	4618      	mov	r0, r3
 8000296:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800029a:	461a      	mov	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fd65 	bl	8002d6c <memset>
 80002a2:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002a6:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002aa:	220a      	movs	r2, #10
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002b2:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002b6:	2202      	movs	r2, #2
 80002b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80002bc:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002c0:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002c4:	2201      	movs	r2, #1
 80002c6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 80002ca:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002ce:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002d2:	2204      	movs	r2, #4
 80002d4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 80002d8:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002dc:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002e0:	2203      	movs	r2, #3
 80002e2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 80002e6:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002ea:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002ee:	2209      	movs	r2, #9
 80002f0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 80002f4:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80002f8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80002fc:	220a      	movs	r2, #10
 80002fe:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 8000302:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000306:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800030a:	2201      	movs	r2, #1
 800030c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 8000310:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000314:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000318:	2209      	movs	r2, #9
 800031a:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
 800031e:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000322:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000326:	2206      	movs	r2, #6
 8000328:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
 800032c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000330:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8000334:	2207      	movs	r2, #7
 8000336:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
		{0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,3,9,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,9,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0},
	};
	float condition[DEPTH][1 << (DEPTH-1)] =   {
 800033a:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800033e:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000342:	4618      	mov	r0, r3
 8000344:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000348:	461a      	mov	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f002 fd0e 	bl	8002d6c <memset>
 8000350:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000354:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000358:	4a33      	ldr	r2, [pc, #204]	@ (8000428 <initTree+0x1a4>)
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000360:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000364:	4a31      	ldr	r2, [pc, #196]	@ (800042c <initTree+0x1a8>)
 8000366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800036a:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800036e:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000372:	4a2f      	ldr	r2, [pc, #188]	@ (8000430 <initTree+0x1ac>)
 8000374:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8000378:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800037c:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8000380:	4a2c      	ldr	r2, [pc, #176]	@ (8000434 <initTree+0x1b0>)
 8000382:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8000386:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800038a:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 800038e:	4a2a      	ldr	r2, [pc, #168]	@ (8000438 <initTree+0x1b4>)
 8000390:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 8000394:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8000398:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 800039c:	4a27      	ldr	r2, [pc, #156]	@ (800043c <initTree+0x1b8>)
 800039e:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 80003a2:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003a6:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003aa:	4a25      	ldr	r2, [pc, #148]	@ (8000440 <initTree+0x1bc>)
 80003ac:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 80003b0:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003b4:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003b8:	4a22      	ldr	r2, [pc, #136]	@ (8000444 <initTree+0x1c0>)
 80003ba:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 80003be:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003c2:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003c6:	4a20      	ldr	r2, [pc, #128]	@ (8000448 <initTree+0x1c4>)
 80003c8:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
 80003cc:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003d0:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003d4:	4a1d      	ldr	r2, [pc, #116]	@ (800044c <initTree+0x1c8>)
 80003d6:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
 80003da:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003de:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80003e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000450 <initTree+0x1cc>)
 80003e4:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
		{0,0,9.5,23.94119167327881,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,21.209446907043457,0.048063503578305244,0.05069274269044399,5.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0.07197032496333122,54.67359733581543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61.73231315612793,0,0},
	};
    int results[1 << (DEPTH)] = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,1,1,1,1,3,3,3,3,2,2,2,2,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0};
 80003e8:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80003ec:	f2a3 7304 	subw	r3, r3, #1796	@ 0x704
 80003f0:	4a18      	ldr	r2, [pc, #96]	@ (8000454 <initTree+0x1d0>)
 80003f2:	4618      	mov	r0, r3
 80003f4:	4611      	mov	r1, r2
 80003f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003fa:	461a      	mov	r2, r3
 80003fc:	f002 fcfa 	bl	8002df4 <memcpy>
    TreeNodeIndex tree = buildTree(index, condition, results, 0, 0);
 8000400:	1d3a      	adds	r2, r7, #4
 8000402:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8000406:	f207 4004 	addw	r0, r7, #1028	@ 0x404
 800040a:	2300      	movs	r3, #0
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	f7ff feda 	bl	80001c8 <buildTree>
 8000414:	f8c7 0704 	str.w	r0, [r7, #1796]	@ 0x704
    return tree;
 8000418:	f8d7 3704 	ldr.w	r3, [r7, #1796]	@ 0x704
}
 800041c:	4618      	mov	r0, r3
 800041e:	f507 67e1 	add.w	r7, r7, #1800	@ 0x708
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	3cdbd528 	.word	0x3cdbd528
 800042c:	41a70ed4 	.word	0x41a70ed4
 8000430:	41180000 	.word	0x41180000
 8000434:	41bf8790 	.word	0x41bf8790
 8000438:	41a9acf2 	.word	0x41a9acf2
 800043c:	3d44de3c 	.word	0x3d44de3c
 8000440:	3d4fa332 	.word	0x3d4fa332
 8000444:	40b00000 	.word	0x40b00000
 8000448:	3d93652e 	.word	0x3d93652e
 800044c:	425ab1c4 	.word	0x425ab1c4
 8000450:	4276ede4 	.word	0x4276ede4
 8000454:	08002e28 	.word	0x08002e28

08000458 <getResult>:

int getResult(float * data, TreeNodeIndex initTree){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
    TreeNodeIndex node = initTree;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	60fb      	str	r3, [r7, #12]
    while(node->below!=NULL){
 8000466:	e015      	b.n	8000494 <getResult+0x3c>
        if(data[node->index]>node->condition){
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	ed93 7a00 	vldr	s14, [r3]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	edd3 7a00 	vldr	s15, [r3]
 800047c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000484:	dd03      	ble.n	800048e <getResult+0x36>
            node = node->over;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e002      	b.n	8000494 <getResult+0x3c>
        }
        else{
            node = node->below;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	60fb      	str	r3, [r7, #12]
    while(node->below!=NULL){
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d1e5      	bne.n	8000468 <getResult+0x10>
        }
    }
    return node->result;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	689b      	ldr	r3, [r3, #8]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa20 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f826 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f8ae 	bl	8000618 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004bc:	f000 f85e 	bl	800057c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TREE = initTree();
 80004c0:	f7ff fee0 	bl	8000284 <initTree>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a0d      	ldr	r2, [pc, #52]	@ (80004fc <main+0x50>)
 80004c8:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 80004ca:	480d      	ldr	r0, [pc, #52]	@ (8000500 <main+0x54>)
 80004cc:	f001 ff9e 	bl	800240c <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2120      	movs	r1, #32
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d8:	f000 fd1a 	bl	8000f10 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e0:	f000 fa6e 	bl	80009c0 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2120      	movs	r1, #32
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ec:	f000 fd10 	bl	8000f10 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80004f0:	20fa      	movs	r0, #250	@ 0xfa
 80004f2:	f000 fa65 	bl	80009c0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	bf00      	nop
 80004f8:	e7fd      	b.n	80004f6 <main+0x4a>
 80004fa:	bf00      	nop
 80004fc:	2000124c 	.word	0x2000124c
 8000500:	20001200 	.word	0x20001200

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b090      	sub	sp, #64	@ 0x40
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	2228      	movs	r2, #40	@ 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fc2a 	bl	8002d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000526:	2302      	movs	r3, #2
 8000528:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	2301      	movs	r3, #1
 800052c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052e:	2310      	movs	r3, #16
 8000530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	2300      	movs	r3, #0
 8000534:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 0318 	add.w	r3, r7, #24
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fd00 	bl	8000f40 <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000546:	f000 f8db 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	230f      	movs	r3, #15
 800054c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fd2a 	bl	8001fbc <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800056e:	f000 f8c7 	bl	8000700 <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3740      	adds	r7, #64	@ 0x40
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800059a:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <MX_TIM2_Init+0x98>)
 800059c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80005a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005a4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005b2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b8:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005c4:	4813      	ldr	r0, [pc, #76]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005c6:	f001 fec9 	bl	800235c <HAL_TIM_Base_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80005d0:	f000 f896 	bl	8000700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480c      	ldr	r0, [pc, #48]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005e2:	f002 f871 	bl	80026c8 <HAL_TIM_ConfigClockSource>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80005ec:	f000 f888 	bl	8000700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005fe:	f002 fa73 	bl	8002ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000608:	f000 f87a 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20001200 	.word	0x20001200

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_GPIO_Init+0x5c>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a10      	ldr	r2, [pc, #64]	@ (8000674 <MX_GPIO_Init+0x5c>)
 8000632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000636:	6153      	str	r3, [r2, #20]
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_GPIO_Init+0x5c>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064c:	f000 fc60 	bl	8000f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000650:	2320      	movs	r3, #32
 8000652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f000 fae0 	bl	8000c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000688:	d12f      	bne.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x72>
    {
    	if (currentData%2 == 0) HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d106      	bne.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8000696:	2201      	movs	r2, #1
 8000698:	2120      	movs	r1, #32
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f000 fc37 	bl	8000f10 <HAL_GPIO_WritePin>
 80006a2:	e005      	b.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x38>
    	else HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ac:	f000 fc30 	bl	8000f10 <HAL_GPIO_WritePin>
    	int inferenceResult = getResult(data_array[currentData], TREE);
 80006b0:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	222c      	movs	r2, #44	@ 0x2c
 80006b6:	fb02 f303 	mul.w	r3, r2, r3
 80006ba:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80006bc:	4413      	add	r3, r2
 80006be:	4a0f      	ldr	r2, [pc, #60]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	4611      	mov	r1, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fec7 	bl	8000458 <getResult>
 80006ca:	60f8      	str	r0, [r7, #12]
    	if (currentData<=DATA_ROWS){
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b66      	cmp	r3, #102	@ 0x66
 80006d2:	dc05      	bgt.n	80006e0 <HAL_TIM_PeriodElapsedCallback+0x68>
    		currentData++;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a06      	ldr	r2, [pc, #24]	@ (80006f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006dc:	6013      	str	r3, [r2, #0]
 80006de:	e002      	b.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0x6e>
    	} else currentData = 0;
 80006e0:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
    	if (inferenceResult > 0){
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b00      	cmp	r3, #0
//    		  HAL_Delay(250);
//    		}
    		inferenceResult = inferenceResult;
    	}
    }
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20001250 	.word	0x20001250
 80006f8:	20000000 	.word	0x20000000
 80006fc:	2000124c 	.word	0x2000124c

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <Error_Handler+0x8>

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <HAL_MspInit+0x44>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6193      	str	r3, [r2, #24]
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <HAL_MspInit+0x44>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <HAL_MspInit+0x44>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <HAL_MspInit+0x44>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_MspInit+0x44>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000764:	d113      	bne.n	800078e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <HAL_TIM_Base_MspInit+0x44>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0b      	ldr	r2, [pc, #44]	@ (8000798 <HAL_TIM_Base_MspInit+0x44>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <HAL_TIM_Base_MspInit+0x44>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	201c      	movs	r0, #28
 8000784:	f000 fa1b 	bl	8000bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000788:	201c      	movs	r0, #28
 800078a:	f000 fa34 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <NMI_Handler+0x4>

080007a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <MemManage_Handler+0x4>

080007b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f2:	f000 f8c5 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000800:	4802      	ldr	r0, [pc, #8]	@ (800080c <TIM2_IRQHandler+0x10>)
 8000802:	f001 fe5f 	bl	80024c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20001200 	.word	0x20001200

08000810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000818:	4a14      	ldr	r2, [pc, #80]	@ (800086c <_sbrk+0x5c>)
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <_sbrk+0x60>)
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000824:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <_sbrk+0x64>)
 800082e:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <_sbrk+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	429a      	cmp	r2, r3
 800083e:	d207      	bcs.n	8000850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000840:	f002 faac 	bl	8002d9c <__errno>
 8000844:	4603      	mov	r3, r0
 8000846:	220c      	movs	r2, #12
 8000848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	e009      	b.n	8000864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000850:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <_sbrk+0x64>)
 8000860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20003000 	.word	0x20003000
 8000870:	00000400 	.word	0x00000400
 8000874:	20001254 	.word	0x20001254
 8000878:	200013a8 	.word	0x200013a8

0800087c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	@ (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a4:	f7ff ffea 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	@ (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	@ (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ce:	f002 fa6b 	bl	8002da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d2:	f7ff fdeb 	bl	80004ac <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	200011e4 	.word	0x200011e4
  ldr r2, =_sidata
 80008e4:	08002f60 	.word	0x08002f60
  ldr r2, =_sbss
 80008e8:	200011e4 	.word	0x200011e4
  ldr r4, =_ebss
 80008ec:	200013a4 	.word	0x200013a4

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	@ (800091c <HAL_Init+0x28>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	@ (800091c <HAL_Init+0x28>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f94f 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	200f      	movs	r0, #15
 800090c:	f000 f808 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff fefc 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_InitTick+0x54>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <HAL_InitTick+0x58>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f967 	bl	8000c12 <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f92f 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	@ (800097c <HAL_InitTick+0x5c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20001188 	.word	0x20001188
 8000978:	20001190 	.word	0x20001190
 800097c:	2000118c 	.word	0x2000118c

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20001190 	.word	0x20001190
 80009a4:	20001258 	.word	0x20001258

080009a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80009ac:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <HAL_GetTick+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20001258 	.word	0x20001258

080009c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff ffee 	bl	80009a8 <HAL_GetTick>
 80009cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d005      	beq.n	80009e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <HAL_Delay+0x44>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009e6:	bf00      	nop
 80009e8:	f7ff ffde 	bl	80009a8 <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8f7      	bhi.n	80009e8 <HAL_Delay+0x28>
  {
  }
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20001190 	.word	0x20001190

08000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db0b      	blt.n	8000a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 021f 	and.w	r2, r3, #31
 8000a84:	4907      	ldr	r1, [pc, #28]	@ (8000aa4 <__NVIC_EnableIRQ+0x38>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	@ (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	@ (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	@ 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	@ 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff8e 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff29 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff3e 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff8e 	bl	8000afc <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5d 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff31 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffa2 	bl	8000b64 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3a:	e14e      	b.n	8000eda <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 8140 	beq.w	8000ed4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d005      	beq.n	8000c6c <HAL_GPIO_Init+0x40>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d130      	bne.n	8000cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	f003 0201 	and.w	r2, r3, #1
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d017      	beq.n	8000d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d123      	bne.n	8000d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0203 	and.w	r2, r3, #3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 809a 	beq.w	8000ed4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	4b55      	ldr	r3, [pc, #340]	@ (8000ef8 <HAL_GPIO_Init+0x2cc>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a54      	ldr	r2, [pc, #336]	@ (8000ef8 <HAL_GPIO_Init+0x2cc>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b52      	ldr	r3, [pc, #328]	@ (8000ef8 <HAL_GPIO_Init+0x2cc>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db8:	4a50      	ldr	r2, [pc, #320]	@ (8000efc <HAL_GPIO_Init+0x2d0>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000de2:	d013      	beq.n	8000e0c <HAL_GPIO_Init+0x1e0>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a46      	ldr	r2, [pc, #280]	@ (8000f00 <HAL_GPIO_Init+0x2d4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00d      	beq.n	8000e08 <HAL_GPIO_Init+0x1dc>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a45      	ldr	r2, [pc, #276]	@ (8000f04 <HAL_GPIO_Init+0x2d8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <HAL_GPIO_Init+0x1d8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a44      	ldr	r2, [pc, #272]	@ (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_GPIO_Init+0x1d4>
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e006      	b.n	8000e0e <HAL_GPIO_Init+0x1e2>
 8000e00:	2305      	movs	r3, #5
 8000e02:	e004      	b.n	8000e0e <HAL_GPIO_Init+0x1e2>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x1e2>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <HAL_GPIO_Init+0x1e2>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4093      	lsls	r3, r2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e1e:	4937      	ldr	r1, [pc, #220]	@ (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2c:	4b37      	ldr	r3, [pc, #220]	@ (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e50:	4a2e      	ldr	r2, [pc, #184]	@ (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e56:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e7a:	4a24      	ldr	r2, [pc, #144]	@ (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e80:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ea4:	4a19      	ldr	r2, [pc, #100]	@ (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ece:	4a0f      	ldr	r2, [pc, #60]	@ (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f47f aea9 	bne.w	8000c3c <HAL_GPIO_Init+0x10>
  }
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	40010400 	.word	0x40010400

08000f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f001 b823 	b.w	8001fac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 817d 	beq.w	8001276 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f7c:	4bbc      	ldr	r3, [pc, #752]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d00c      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f88:	4bb9      	ldr	r3, [pc, #740]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d15c      	bne.n	800104e <HAL_RCC_OscConfig+0x10e>
 8000f94:	4bb6      	ldr	r3, [pc, #728]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa0:	d155      	bne.n	800104e <HAL_RCC_OscConfig+0x10e>
 8000fa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fa6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fba:	fab3 f383 	clz	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	095b      	lsrs	r3, r3, #5
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d102      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x94>
 8000fce:	4ba8      	ldr	r3, [pc, #672]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	e015      	b.n	8001000 <HAL_RCC_OscConfig+0xc0>
 8000fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fd8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fdc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000fe0:	fa93 f3a3 	rbit	r3, r3
 8000fe4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000fe8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fec:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000ff0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000ffc:	4b9c      	ldr	r3, [pc, #624]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001000:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001004:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001008:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800100c:	fa92 f2a2 	rbit	r2, r2
 8001010:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001014:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001018:	fab2 f282 	clz	r2, r2
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	f042 0220 	orr.w	r2, r2, #32
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	f002 021f 	and.w	r2, r2, #31
 8001028:	2101      	movs	r1, #1
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	4013      	ands	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 811f 	beq.w	8001274 <HAL_RCC_OscConfig+0x334>
 8001036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800103a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 8116 	bne.w	8001274 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	f000 bfaf 	b.w	8001fac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001052:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800105e:	d106      	bne.n	800106e <HAL_RCC_OscConfig+0x12e>
 8001060:	4b83      	ldr	r3, [pc, #524]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a82      	ldr	r2, [pc, #520]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8001066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	e036      	b.n	80010dc <HAL_RCC_OscConfig+0x19c>
 800106e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001072:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10c      	bne.n	8001098 <HAL_RCC_OscConfig+0x158>
 800107e:	4b7c      	ldr	r3, [pc, #496]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a7b      	ldr	r2, [pc, #492]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8001084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	4b79      	ldr	r3, [pc, #484]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a78      	ldr	r2, [pc, #480]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8001090:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e021      	b.n	80010dc <HAL_RCC_OscConfig+0x19c>
 8001098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800109c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x184>
 80010aa:	4b71      	ldr	r3, [pc, #452]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a70      	ldr	r2, [pc, #448]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0x19c>
 80010c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a69      	ldr	r2, [pc, #420]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b67      	ldr	r3, [pc, #412]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a66      	ldr	r2, [pc, #408]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010dc:	4b64      	ldr	r3, [pc, #400]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e0:	f023 020f 	bic.w	r2, r3, #15
 80010e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	495f      	ldr	r1, [pc, #380]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d059      	beq.n	80011ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fc4f 	bl	80009a8 <HAL_GetTick>
 800110a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	e00a      	b.n	8001126 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fc4a 	bl	80009a8 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b64      	cmp	r3, #100	@ 0x64
 800111e:	d902      	bls.n	8001126 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	f000 bf43 	b.w	8001fac <HAL_RCC_OscConfig+0x106c>
 8001126:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800112a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800113a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	095b      	lsrs	r3, r3, #5
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d102      	bne.n	8001158 <HAL_RCC_OscConfig+0x218>
 8001152:	4b47      	ldr	r3, [pc, #284]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	e015      	b.n	8001184 <HAL_RCC_OscConfig+0x244>
 8001158:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800115c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001160:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800116c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001170:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001174:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001180:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001184:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001188:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800118c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001190:	fa92 f2a2 	rbit	r2, r2
 8001194:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001198:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800119c:	fab2 f282 	clz	r2, r2
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	f042 0220 	orr.w	r2, r2, #32
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	f002 021f 	and.w	r2, r2, #31
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0ab      	beq.n	8001110 <HAL_RCC_OscConfig+0x1d0>
 80011b8:	e05d      	b.n	8001276 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fbf5 	bl	80009a8 <HAL_GetTick>
 80011be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	e00a      	b.n	80011da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fbf0 	bl	80009a8 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b64      	cmp	r3, #100	@ 0x64
 80011d2:	d902      	bls.n	80011da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f000 bee9 	b.w	8001fac <HAL_RCC_OscConfig+0x106c>
 80011da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011de:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80011ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d102      	bne.n	800120c <HAL_RCC_OscConfig+0x2cc>
 8001206:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	e015      	b.n	8001238 <HAL_RCC_OscConfig+0x2f8>
 800120c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001210:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001220:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001224:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001228:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001234:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_RCC_OscConfig+0x330>)
 8001236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001238:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800123c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001240:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001244:	fa92 f2a2 	rbit	r2, r2
 8001248:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800124c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001250:	fab2 f282 	clz	r2, r2
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	f002 021f 	and.w	r2, r2, #31
 8001260:	2101      	movs	r1, #1
 8001262:	fa01 f202 	lsl.w	r2, r1, r2
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ab      	bne.n	80011c4 <HAL_RCC_OscConfig+0x284>
 800126c:	e003      	b.n	8001276 <HAL_RCC_OscConfig+0x336>
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800127a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 817d 	beq.w	8001586 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800128c:	4ba6      	ldr	r3, [pc, #664]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00b      	beq.n	80012b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001298:	4ba3      	ldr	r3, [pc, #652]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d172      	bne.n	800138a <HAL_RCC_OscConfig+0x44a>
 80012a4:	4ba0      	ldr	r3, [pc, #640]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d16c      	bne.n	800138a <HAL_RCC_OscConfig+0x44a>
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80012c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	fab3 f383 	clz	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d102      	bne.n	80012e0 <HAL_RCC_OscConfig+0x3a0>
 80012da:	4b93      	ldr	r3, [pc, #588]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	e013      	b.n	8001308 <HAL_RCC_OscConfig+0x3c8>
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80012f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80012fc:	fa93 f3a3 	rbit	r3, r3
 8001300:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001304:	4b88      	ldr	r3, [pc, #544]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	2202      	movs	r2, #2
 800130a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800130e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001312:	fa92 f2a2 	rbit	r2, r2
 8001316:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800131a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800131e:	fab2 f282 	clz	r2, r2
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	f042 0220 	orr.w	r2, r2, #32
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	f002 021f 	and.w	r2, r2, #31
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f202 	lsl.w	r2, r1, r2
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00a      	beq.n	8001350 <HAL_RCC_OscConfig+0x410>
 800133a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800133e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d002      	beq.n	8001350 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	f000 be2e 	b.w	8001fac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b75      	ldr	r3, [pc, #468]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800135c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	21f8      	movs	r1, #248	@ 0xf8
 8001366:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800136e:	fa91 f1a1 	rbit	r1, r1
 8001372:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001376:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800137a:	fab1 f181 	clz	r1, r1
 800137e:	b2c9      	uxtb	r1, r1
 8001380:	408b      	lsls	r3, r1
 8001382:	4969      	ldr	r1, [pc, #420]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001388:	e0fd      	b.n	8001586 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800138e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8088 	beq.w	80014ac <HAL_RCC_OscConfig+0x56c>
 800139c:	2301      	movs	r3, #1
 800139e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80013ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80013bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	461a      	mov	r2, r3
 80013c4:	2301      	movs	r3, #1
 80013c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff faee 	bl	80009a8 <HAL_GetTick>
 80013cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fae9 	bl	80009a8 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d902      	bls.n	80013e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f000 bde2 	b.w	8001fac <HAL_RCC_OscConfig+0x106c>
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80013fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	095b      	lsrs	r3, r3, #5
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <HAL_RCC_OscConfig+0x4d8>
 8001412:	4b45      	ldr	r3, [pc, #276]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	e013      	b.n	8001440 <HAL_RCC_OscConfig+0x500>
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001430:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800143c:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	2202      	movs	r2, #2
 8001442:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001446:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800144a:	fa92 f2a2 	rbit	r2, r2
 800144e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001452:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001456:	fab2 f282 	clz	r2, r2
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f042 0220 	orr.w	r2, r2, #32
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	f002 021f 	and.w	r2, r2, #31
 8001466:	2101      	movs	r1, #1
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0af      	beq.n	80013d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b2d      	ldr	r3, [pc, #180]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800147a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	21f8      	movs	r1, #248	@ 0xf8
 8001488:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001490:	fa91 f1a1 	rbit	r1, r1
 8001494:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001498:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800149c:	fab1 f181 	clz	r1, r1
 80014a0:	b2c9      	uxtb	r1, r1
 80014a2:	408b      	lsls	r3, r1
 80014a4:	4920      	ldr	r1, [pc, #128]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
 80014aa:	e06c      	b.n	8001586 <HAL_RCC_OscConfig+0x646>
 80014ac:	2301      	movs	r3, #1
 80014ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80014be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80014cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	461a      	mov	r2, r3
 80014d4:	2300      	movs	r3, #0
 80014d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fa66 	bl	80009a8 <HAL_GetTick>
 80014dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fa61 	bl	80009a8 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d902      	bls.n	80014f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	f000 bd5a 	b.w	8001fac <HAL_RCC_OscConfig+0x106c>
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800150a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	095b      	lsrs	r3, r3, #5
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d104      	bne.n	800152c <HAL_RCC_OscConfig+0x5ec>
 8001522:	4b01      	ldr	r3, [pc, #4]	@ (8001528 <HAL_RCC_OscConfig+0x5e8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	e015      	b.n	8001554 <HAL_RCC_OscConfig+0x614>
 8001528:	40021000 	.word	0x40021000
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001536:	fa93 f3a3 	rbit	r3, r3
 800153a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001544:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001550:	4bc8      	ldr	r3, [pc, #800]	@ (8001874 <HAL_RCC_OscConfig+0x934>)
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	2202      	movs	r2, #2
 8001556:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800155a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800155e:	fa92 f2a2 	rbit	r2, r2
 8001562:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001566:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800156a:	fab2 f282 	clz	r2, r2
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	f042 0220 	orr.w	r2, r2, #32
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	f002 021f 	and.w	r2, r2, #31
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	4013      	ands	r3, r2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ad      	bne.n	80014e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8110 	beq.w	80017bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d079      	beq.n	80016a0 <HAL_RCC_OscConfig+0x760>
 80015ac:	2301      	movs	r3, #1
 80015ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80015be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	fab3 f383 	clz	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4bab      	ldr	r3, [pc, #684]	@ (8001878 <HAL_RCC_OscConfig+0x938>)
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	461a      	mov	r2, r3
 80015d2:	2301      	movs	r3, #1
 80015d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff f9e7 	bl	80009a8 <HAL_GetTick>
 80015da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff f9e2 	bl	80009a8 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d902      	bls.n	80015f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f000 bcdb 	b.w	8001fac <HAL_RCC_OscConfig+0x106c>
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001618:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f2a3 	rbit	r2, r3
 8001622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fa93 f2a3 	rbit	r2, r3
 8001646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800164e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001650:	4b88      	ldr	r3, [pc, #544]	@ (8001874 <HAL_RCC_OscConfig+0x934>)
 8001652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001658:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800165c:	2102      	movs	r1, #2
 800165e:	6019      	str	r1, [r3, #0]
 8001660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001664:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	fa93 f1a3 	rbit	r1, r3
 800166e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001672:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001676:	6019      	str	r1, [r3, #0]
  return result;
 8001678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	2101      	movs	r1, #1
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0a0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x6a0>
 800169e:	e08d      	b.n	80017bc <HAL_RCC_OscConfig+0x87c>
 80016a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016c2:	601a      	str	r2, [r3, #0]
  return result;
 80016c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ce:	fab3 f383 	clz	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b68      	ldr	r3, [pc, #416]	@ (8001878 <HAL_RCC_OscConfig+0x938>)
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	461a      	mov	r2, r3
 80016de:	2300      	movs	r3, #0
 80016e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff f961 	bl	80009a8 <HAL_GetTick>
 80016e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff f95c 	bl	80009a8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d902      	bls.n	8001702 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f000 bc55 	b.w	8001fac <HAL_RCC_OscConfig+0x106c>
 8001702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001706:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001712:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001720:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800172e:	2202      	movs	r2, #2
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001736:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	fa93 f2a3 	rbit	r2, r3
 8001740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001744:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001752:	2202      	movs	r2, #2
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fa93 f2a3 	rbit	r2, r3
 8001764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001768:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800176c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176e:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <HAL_RCC_OscConfig+0x934>)
 8001770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001776:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800177a:	2102      	movs	r1, #2
 800177c:	6019      	str	r1, [r3, #0]
 800177e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001782:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f1a3 	rbit	r1, r3
 800178c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001790:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001794:	6019      	str	r1, [r3, #0]
  return result;
 8001796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d197      	bne.n	80016ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 81a1 	beq.w	8001b14 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d8:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <HAL_RCC_OscConfig+0x934>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d116      	bne.n	8001812 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <HAL_RCC_OscConfig+0x934>)
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <HAL_RCC_OscConfig+0x934>)
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ee:	61d3      	str	r3, [r2, #28]
 80017f0:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_RCC_OscConfig+0x934>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80017f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001806:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800180a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <HAL_RCC_OscConfig+0x93c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d11a      	bne.n	8001854 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b17      	ldr	r3, [pc, #92]	@ (800187c <HAL_RCC_OscConfig+0x93c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a16      	ldr	r2, [pc, #88]	@ (800187c <HAL_RCC_OscConfig+0x93c>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001828:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff f8bd 	bl	80009a8 <HAL_GetTick>
 800182e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	e009      	b.n	8001848 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001834:	f7ff f8b8 	bl	80009a8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b64      	cmp	r3, #100	@ 0x64
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e3b1      	b.n	8001fac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_RCC_OscConfig+0x93c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ef      	beq.n	8001834 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001858:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d10d      	bne.n	8001880 <HAL_RCC_OscConfig+0x940>
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <HAL_RCC_OscConfig+0x934>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a02      	ldr	r2, [pc, #8]	@ (8001874 <HAL_RCC_OscConfig+0x934>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e03c      	b.n	80018ec <HAL_RCC_OscConfig+0x9ac>
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000
 8001878:	10908120 	.word	0x10908120
 800187c:	40007000 	.word	0x40007000
 8001880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001884:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x96a>
 8001890:	4bc1      	ldr	r3, [pc, #772]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4ac0      	ldr	r2, [pc, #768]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	4bbe      	ldr	r3, [pc, #760]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4abd      	ldr	r2, [pc, #756]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e020      	b.n	80018ec <HAL_RCC_OscConfig+0x9ac>
 80018aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x994>
 80018ba:	4bb7      	ldr	r3, [pc, #732]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4ab6      	ldr	r2, [pc, #728]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	6213      	str	r3, [r2, #32]
 80018c6:	4bb4      	ldr	r3, [pc, #720]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4ab3      	ldr	r2, [pc, #716]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0x9ac>
 80018d4:	4bb0      	ldr	r3, [pc, #704]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4aaf      	ldr	r2, [pc, #700]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	4bad      	ldr	r3, [pc, #692]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4aac      	ldr	r2, [pc, #688]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80018e6:	f023 0304 	bic.w	r3, r3, #4
 80018ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8081 	beq.w	8001a00 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7ff f853 	bl	80009a8 <HAL_GetTick>
 8001902:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff f84e 	bl	80009a8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e345      	b.n	8001fac <HAL_RCC_OscConfig+0x106c>
 8001920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001924:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001928:	2202      	movs	r2, #2
 800192a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001930:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001948:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001954:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fa93 f2a3 	rbit	r2, r3
 800195e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001962:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001966:	601a      	str	r2, [r3, #0]
  return result;
 8001968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001970:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	095b      	lsrs	r3, r3, #5
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d102      	bne.n	800198c <HAL_RCC_OscConfig+0xa4c>
 8001986:	4b84      	ldr	r3, [pc, #528]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	e013      	b.n	80019b4 <HAL_RCC_OscConfig+0xa74>
 800198c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001990:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001994:	2202      	movs	r2, #2
 8001996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	4b79      	ldr	r3, [pc, #484]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019bc:	2102      	movs	r1, #2
 80019be:	6011      	str	r1, [r2, #0]
 80019c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019c4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	fa92 f1a2 	rbit	r1, r2
 80019ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019d2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019d6:	6011      	str	r1, [r2, #0]
  return result;
 80019d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019dc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	fab2 f282 	clz	r2, r2
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	f002 021f 	and.w	r2, r2, #31
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f202 	lsl.w	r2, r1, r2
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d084      	beq.n	8001908 <HAL_RCC_OscConfig+0x9c8>
 80019fe:	e07f      	b.n	8001b00 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a00:	f7fe ffd2 	bl	80009a8 <HAL_GetTick>
 8001a04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7fe ffcd 	bl	80009a8 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e2c4      	b.n	8001fac <HAL_RCC_OscConfig+0x106c>
 8001a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a26:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a32:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a40:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a4e:	2202      	movs	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a56:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a64:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a68:	601a      	str	r2, [r3, #0]
  return result;
 8001a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d102      	bne.n	8001a8e <HAL_RCC_OscConfig+0xb4e>
 8001a88:	4b43      	ldr	r3, [pc, #268]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	e013      	b.n	8001ab6 <HAL_RCC_OscConfig+0xb76>
 8001a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a92:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a96:	2202      	movs	r2, #2
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	4b39      	ldr	r3, [pc, #228]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aba:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001abe:	2102      	movs	r1, #2
 8001ac0:	6011      	str	r1, [r2, #0]
 8001ac2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ac6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	fa92 f1a2 	rbit	r1, r2
 8001ad0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ad4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ad8:	6011      	str	r1, [r2, #0]
  return result;
 8001ada:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ade:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f002 021f 	and.w	r2, r2, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d184      	bne.n	8001a0a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b00:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	4a22      	ldr	r2, [pc, #136]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 8001b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8242 	beq.w	8001faa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b26:	4b1c      	ldr	r3, [pc, #112]	@ (8001b98 <HAL_RCC_OscConfig+0xc58>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	f000 8213 	beq.w	8001f5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	f040 8162 	bne.w	8001e0a <HAL_RCC_OscConfig+0xeca>
 8001b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b58:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b6a:	601a      	str	r2, [r3, #0]
  return result;
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	461a      	mov	r2, r3
 8001b88:	2300      	movs	r3, #0
 8001b8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe ff0c 	bl	80009a8 <HAL_GetTick>
 8001b90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b94:	e00c      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc70>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7fe ff04 	bl	80009a8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1fd      	b.n	8001fac <HAL_RCC_OscConfig+0x106c>
 8001bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001bd4:	601a      	str	r2, [r3, #0]
  return result;
 8001bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bda:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001bde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_OscConfig+0xcba>
 8001bf4:	4bb0      	ldr	r3, [pc, #704]	@ (8001eb8 <HAL_RCC_OscConfig+0xf78>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	e027      	b.n	8001c4a <HAL_RCC_OscConfig+0xd0a>
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fa93 f2a3 	rbit	r2, r3
 8001c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c24:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c32:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	fa93 f2a3 	rbit	r2, r3
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4b9c      	ldr	r3, [pc, #624]	@ (8001eb8 <HAL_RCC_OscConfig+0xf78>)
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c4e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c52:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c56:	6011      	str	r1, [r2, #0]
 8001c58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c5c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	fa92 f1a2 	rbit	r1, r2
 8001c66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c6a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c6e:	6011      	str	r1, [r2, #0]
  return result;
 8001c70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c74:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0220 	orr.w	r2, r2, #32
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d182      	bne.n	8001b9c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c96:	4b88      	ldr	r3, [pc, #544]	@ (8001eb8 <HAL_RCC_OscConfig+0xf78>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	497f      	ldr	r1, [pc, #508]	@ (8001eb8 <HAL_RCC_OscConfig+0xf78>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
 8001cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001cc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fa93 f2a3 	rbit	r2, r3
 8001cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cde:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ce2:	601a      	str	r2, [r3, #0]
  return result;
 8001ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001cec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cf8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2301      	movs	r3, #1
 8001d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe fe50 	bl	80009a8 <HAL_GetTick>
 8001d08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	e009      	b.n	8001d22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7fe fe4b 	bl	80009a8 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e144      	b.n	8001fac <HAL_RCC_OscConfig+0x106c>
 8001d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d26:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d34:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d42:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d46:	601a      	str	r2, [r3, #0]
  return result;
 8001d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_OscConfig+0xe2c>
 8001d66:	4b54      	ldr	r3, [pc, #336]	@ (8001eb8 <HAL_RCC_OscConfig+0xf78>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	e027      	b.n	8001dbc <HAL_RCC_OscConfig+0xe7c>
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d96:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001d9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb8 <HAL_RCC_OscConfig+0xf78>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dc0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001dc4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001dc8:	6011      	str	r1, [r2, #0]
 8001dca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dce:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	fa92 f1a2 	rbit	r1, r2
 8001dd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ddc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001de0:	6011      	str	r1, [r2, #0]
  return result;
 8001de2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001de6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f002 021f 	and.w	r2, r2, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d082      	beq.n	8001d0e <HAL_RCC_OscConfig+0xdce>
 8001e08:	e0cf      	b.n	8001faa <HAL_RCC_OscConfig+0x106a>
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e2e:	601a      	str	r2, [r3, #0]
  return result;
 8001e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e34:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7fe fdaa 	bl	80009a8 <HAL_GetTick>
 8001e54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e58:	e009      	b.n	8001e6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe fda5 	bl	80009a8 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e09e      	b.n	8001fac <HAL_RCC_OscConfig+0x106c>
 8001e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e72:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e92:	601a      	str	r2, [r3, #0]
  return result;
 8001e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e98:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	095b      	lsrs	r3, r3, #5
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d104      	bne.n	8001ebc <HAL_RCC_OscConfig+0xf7c>
 8001eb2:	4b01      	ldr	r3, [pc, #4]	@ (8001eb8 <HAL_RCC_OscConfig+0xf78>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	e029      	b.n	8001f0c <HAL_RCC_OscConfig+0xfcc>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ec4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ece:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001eea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	fa93 f2a3 	rbit	r2, r3
 8001efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f02:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb8 <HAL_RCC_OscConfig+0x1078>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f10:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f14:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f18:	6011      	str	r1, [r2, #0]
 8001f1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f1e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	fa92 f1a2 	rbit	r1, r2
 8001f28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f2c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f30:	6011      	str	r1, [r2, #0]
  return result;
 8001f32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f36:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f042 0220 	orr.w	r2, r2, #32
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	f002 021f 	and.w	r2, r2, #31
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d180      	bne.n	8001e5a <HAL_RCC_OscConfig+0xf1a>
 8001f58:	e027      	b.n	8001faa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e01e      	b.n	8001fac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f6e:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_RCC_OscConfig+0x1078>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f7a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09e      	sub	sp, #120	@ 0x78
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e162      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b90      	ldr	r3, [pc, #576]	@ (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b8d      	ldr	r3, [pc, #564]	@ (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 0207 	bic.w	r2, r3, #7
 8001fea:	498b      	ldr	r1, [pc, #556]	@ (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b89      	ldr	r3, [pc, #548]	@ (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e14a      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b82      	ldr	r3, [pc, #520]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	497f      	ldr	r1, [pc, #508]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80dc 	beq.w	80021e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d13c      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xf6>
 8002038:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800203c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d102      	bne.n	8002062 <HAL_RCC_ClockConfig+0xa6>
 800205c:	4b6f      	ldr	r3, [pc, #444]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	e00f      	b.n	8002082 <HAL_RCC_ClockConfig+0xc6>
 8002062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002066:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002070:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002074:	663b      	str	r3, [r7, #96]	@ 0x60
 8002076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800207e:	4b67      	ldr	r3, [pc, #412]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002086:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002088:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800208a:	fa92 f2a2 	rbit	r2, r2
 800208e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002090:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002092:	fab2 f282 	clz	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f002 021f 	and.w	r2, r2, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d17b      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0f3      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d13c      	bne.n	8002134 <HAL_RCC_ClockConfig+0x178>
 80020ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80020c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x128>
 80020de:	4b4f      	ldr	r3, [pc, #316]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	e00f      	b.n	8002104 <HAL_RCC_ClockConfig+0x148>
 80020e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80020f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80020f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002100:	4b46      	ldr	r3, [pc, #280]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002108:	63ba      	str	r2, [r7, #56]	@ 0x38
 800210a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800210c:	fa92 f2a2 	rbit	r2, r2
 8002110:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002112:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f002 021f 	and.w	r2, r2, #31
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d13a      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b2      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
 8002134:	2302      	movs	r3, #2
 8002136:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_RCC_ClockConfig+0x1a0>
 8002156:	4b31      	ldr	r3, [pc, #196]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	e00d      	b.n	8002178 <HAL_RCC_ClockConfig+0x1bc>
 800215c:	2302      	movs	r3, #2
 800215e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
 8002168:	2302      	movs	r3, #2
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	4b29      	ldr	r3, [pc, #164]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	2202      	movs	r2, #2
 800217a:	61ba      	str	r2, [r7, #24]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	fa92 f2a2 	rbit	r2, r2
 8002182:	617a      	str	r2, [r7, #20]
  return result;
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	fab2 f282 	clz	r2, r2
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f042 0220 	orr.w	r2, r2, #32
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f002 021f 	and.w	r2, r2, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e079      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	491a      	ldr	r1, [pc, #104]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b8:	f7fe fbf6 	bl	80009a8 <HAL_GetTick>
 80021bc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7fe fbf2 	bl	80009a8 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e061      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_RCC_ClockConfig+0x260>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 020c 	and.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1eb      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <HAL_RCC_ClockConfig+0x25c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d214      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <HAL_RCC_ClockConfig+0x25c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4906      	ldr	r1, [pc, #24]	@ (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e040      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
 8002218:	40022000 	.word	0x40022000
 800221c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b1d      	ldr	r3, [pc, #116]	@ (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	491a      	ldr	r1, [pc, #104]	@ (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224a:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4912      	ldr	r1, [pc, #72]	@ (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800225e:	f000 f829 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 8002262:	4601      	mov	r1, r0
 8002264:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800226c:	22f0      	movs	r2, #240	@ 0xf0
 800226e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	fa92 f2a2 	rbit	r2, r2
 8002276:	60fa      	str	r2, [r7, #12]
  return result;
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	fab2 f282 	clz	r2, r2
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	40d3      	lsrs	r3, r2
 8002282:	4a09      	ldr	r2, [pc, #36]	@ (80022a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	fa21 f303 	lsr.w	r3, r1, r3
 800228a:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <HAL_RCC_ClockConfig+0x2f0>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800228e:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fb44 	bl	8000920 <HAL_InitTick>
  
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3778      	adds	r7, #120	@ 0x78
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08002f28 	.word	0x08002f28
 80022ac:	20001188 	.word	0x20001188
 80022b0:	2000118c 	.word	0x2000118c

080022b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x94>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x30>
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x36>
 80022e2:	e026      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e4:	4b19      	ldr	r3, [pc, #100]	@ (800234c <HAL_RCC_GetSysClockFreq+0x98>)
 80022e6:	613b      	str	r3, [r7, #16]
      break;
 80022e8:	e026      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	0c9b      	lsrs	r3, r3, #18
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	4a17      	ldr	r2, [pc, #92]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80022f8:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002302:	5cd3      	ldrb	r3, [r2, r3]
 8002304:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002310:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	fbb2 f2f3 	udiv	r2, r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	e004      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a0c      	ldr	r2, [pc, #48]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002326:	fb02 f303 	mul.w	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	613b      	str	r3, [r7, #16]
      break;
 8002330:	e002      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_RCC_GetSysClockFreq+0x98>)
 8002334:	613b      	str	r3, [r7, #16]
      break;
 8002336:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002338:	693b      	ldr	r3, [r7, #16]
}
 800233a:	4618      	mov	r0, r3
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	007a1200 	.word	0x007a1200
 8002350:	08002f38 	.word	0x08002f38
 8002354:	08002f48 	.word	0x08002f48
 8002358:	003d0900 	.word	0x003d0900

0800235c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e049      	b.n	8002402 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe f9e6 	bl	8000754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f000 fa86 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d001      	beq.n	8002424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e040      	b.n	80024a6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00e      	beq.n	8002464 <HAL_TIM_Base_Start_IT+0x58>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800244e:	d009      	beq.n	8002464 <HAL_TIM_Base_Start_IT+0x58>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <HAL_TIM_Base_Start_IT+0xac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d004      	beq.n	8002464 <HAL_TIM_Base_Start_IT+0x58>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <HAL_TIM_Base_Start_IT+0xb0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d115      	bne.n	8002490 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_TIM_Base_Start_IT+0xb4>)
 800246c:	4013      	ands	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b06      	cmp	r3, #6
 8002474:	d015      	beq.n	80024a2 <HAL_TIM_Base_Start_IT+0x96>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800247c:	d011      	beq.n	80024a2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248e:	e008      	b.n	80024a2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e000      	b.n	80024a4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40014000 	.word	0x40014000
 80024c0:	00010007 	.word	0x00010007

080024c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d020      	beq.n	8002528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0202 	mvn.w	r2, #2
 80024f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f9ad 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f99f 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f9b0 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d020      	beq.n	8002574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0204 	mvn.w	r2, #4
 8002544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2202      	movs	r2, #2
 800254a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f987 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f979 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f98a 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d020      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0208 	mvn.w	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f961 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f953 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f964 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d020      	beq.n	800260c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0210 	mvn.w	r2, #16
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2208      	movs	r2, #8
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f93b 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f92d 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f93e 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0201 	mvn.w	r2, #1
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe f824 	bl	8000678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fac2 	bl	8002bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00c      	beq.n	8002678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 faba 	bl	8002bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00c      	beq.n	800269c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8fd 	bl	8002896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0220 	mvn.w	r2, #32
 80026b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa82 	bl	8002bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_TIM_ConfigClockSource+0x1c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0b6      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x18a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002702:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800270e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002720:	d03e      	beq.n	80027a0 <HAL_TIM_ConfigClockSource+0xd8>
 8002722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002726:	f200 8087 	bhi.w	8002838 <HAL_TIM_ConfigClockSource+0x170>
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272e:	f000 8086 	beq.w	800283e <HAL_TIM_ConfigClockSource+0x176>
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002736:	d87f      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x170>
 8002738:	2b70      	cmp	r3, #112	@ 0x70
 800273a:	d01a      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0xaa>
 800273c:	2b70      	cmp	r3, #112	@ 0x70
 800273e:	d87b      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x170>
 8002740:	2b60      	cmp	r3, #96	@ 0x60
 8002742:	d050      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x11e>
 8002744:	2b60      	cmp	r3, #96	@ 0x60
 8002746:	d877      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x170>
 8002748:	2b50      	cmp	r3, #80	@ 0x50
 800274a:	d03c      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0xfe>
 800274c:	2b50      	cmp	r3, #80	@ 0x50
 800274e:	d873      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x170>
 8002750:	2b40      	cmp	r3, #64	@ 0x40
 8002752:	d058      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x13e>
 8002754:	2b40      	cmp	r3, #64	@ 0x40
 8002756:	d86f      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x170>
 8002758:	2b30      	cmp	r3, #48	@ 0x30
 800275a:	d064      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15e>
 800275c:	2b30      	cmp	r3, #48	@ 0x30
 800275e:	d86b      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x170>
 8002760:	2b20      	cmp	r3, #32
 8002762:	d060      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15e>
 8002764:	2b20      	cmp	r3, #32
 8002766:	d867      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x170>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d05c      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15e>
 800276c:	2b10      	cmp	r3, #16
 800276e:	d05a      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15e>
 8002770:	e062      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002782:	f000 f991 	bl	8002aa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
      break;
 800279e:	e04f      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027b0:	f000 f97a 	bl	8002aa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027c2:	609a      	str	r2, [r3, #8]
      break;
 80027c4:	e03c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 f8ee 	bl	80029b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2150      	movs	r1, #80	@ 0x50
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f947 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 80027e4:	e02c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f2:	461a      	mov	r2, r3
 80027f4:	f000 f90d 	bl	8002a12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2160      	movs	r1, #96	@ 0x60
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f937 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 8002804:	e01c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002812:	461a      	mov	r2, r3
 8002814:	f000 f8ce 	bl	80029b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2140      	movs	r1, #64	@ 0x40
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f927 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 8002824:	e00c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f000 f91e 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 8002836:	e003      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
      break;
 800283c:	e000      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800283e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a38      	ldr	r2, [pc, #224]	@ (80029a0 <TIM_Base_SetConfig+0xf4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x28>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x28>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a35      	ldr	r2, [pc, #212]	@ (80029a4 <TIM_Base_SetConfig+0xf8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <TIM_Base_SetConfig+0xf4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <TIM_Base_SetConfig+0x6a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f4:	d00f      	beq.n	8002916 <TIM_Base_SetConfig+0x6a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2a      	ldr	r2, [pc, #168]	@ (80029a4 <TIM_Base_SetConfig+0xf8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00b      	beq.n	8002916 <TIM_Base_SetConfig+0x6a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a29      	ldr	r2, [pc, #164]	@ (80029a8 <TIM_Base_SetConfig+0xfc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0x6a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <TIM_Base_SetConfig+0x100>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0x6a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a27      	ldr	r2, [pc, #156]	@ (80029b0 <TIM_Base_SetConfig+0x104>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a14      	ldr	r2, [pc, #80]	@ (80029a0 <TIM_Base_SetConfig+0xf4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00b      	beq.n	800296c <TIM_Base_SetConfig+0xc0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a14      	ldr	r2, [pc, #80]	@ (80029a8 <TIM_Base_SetConfig+0xfc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <TIM_Base_SetConfig+0xc0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a13      	ldr	r2, [pc, #76]	@ (80029ac <TIM_Base_SetConfig+0x100>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_Base_SetConfig+0xc0>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <TIM_Base_SetConfig+0x104>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d103      	bne.n	8002974 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d105      	bne.n	8002992 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f023 0201 	bic.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]
  }
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40014000 	.word	0x40014000
 80029ac:	40014400 	.word	0x40014400
 80029b0:	40014800 	.word	0x40014800

080029b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 030a 	bic.w	r3, r3, #10
 80029f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	621a      	str	r2, [r3, #32]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 0210 	bic.w	r2, r3, #16
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	031b      	lsls	r3, r3, #12
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f043 0307 	orr.w	r3, r3, #7
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	021a      	lsls	r2, r3, #8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e054      	b.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a24      	ldr	r2, [pc, #144]	@ (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d108      	bne.n	8002b3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002b30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a17      	ldr	r2, [pc, #92]	@ (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b68:	d009      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a11      	ldr	r2, [pc, #68]	@ (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10c      	bne.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40014000 	.word	0x40014000

08002bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <malloc>:
 8002c00:	4b02      	ldr	r3, [pc, #8]	@ (8002c0c <malloc+0xc>)
 8002c02:	4601      	mov	r1, r0
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	f000 b825 	b.w	8002c54 <_malloc_r>
 8002c0a:	bf00      	nop
 8002c0c:	20001194 	.word	0x20001194

08002c10 <sbrk_aligned>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	4e0f      	ldr	r6, [pc, #60]	@ (8002c50 <sbrk_aligned+0x40>)
 8002c14:	460c      	mov	r4, r1
 8002c16:	6831      	ldr	r1, [r6, #0]
 8002c18:	4605      	mov	r5, r0
 8002c1a:	b911      	cbnz	r1, 8002c22 <sbrk_aligned+0x12>
 8002c1c:	f000 f8ae 	bl	8002d7c <_sbrk_r>
 8002c20:	6030      	str	r0, [r6, #0]
 8002c22:	4621      	mov	r1, r4
 8002c24:	4628      	mov	r0, r5
 8002c26:	f000 f8a9 	bl	8002d7c <_sbrk_r>
 8002c2a:	1c43      	adds	r3, r0, #1
 8002c2c:	d103      	bne.n	8002c36 <sbrk_aligned+0x26>
 8002c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8002c32:	4620      	mov	r0, r4
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	1cc4      	adds	r4, r0, #3
 8002c38:	f024 0403 	bic.w	r4, r4, #3
 8002c3c:	42a0      	cmp	r0, r4
 8002c3e:	d0f8      	beq.n	8002c32 <sbrk_aligned+0x22>
 8002c40:	1a21      	subs	r1, r4, r0
 8002c42:	4628      	mov	r0, r5
 8002c44:	f000 f89a 	bl	8002d7c <_sbrk_r>
 8002c48:	3001      	adds	r0, #1
 8002c4a:	d1f2      	bne.n	8002c32 <sbrk_aligned+0x22>
 8002c4c:	e7ef      	b.n	8002c2e <sbrk_aligned+0x1e>
 8002c4e:	bf00      	nop
 8002c50:	2000125c 	.word	0x2000125c

08002c54 <_malloc_r>:
 8002c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c58:	1ccd      	adds	r5, r1, #3
 8002c5a:	f025 0503 	bic.w	r5, r5, #3
 8002c5e:	3508      	adds	r5, #8
 8002c60:	2d0c      	cmp	r5, #12
 8002c62:	bf38      	it	cc
 8002c64:	250c      	movcc	r5, #12
 8002c66:	2d00      	cmp	r5, #0
 8002c68:	4606      	mov	r6, r0
 8002c6a:	db01      	blt.n	8002c70 <_malloc_r+0x1c>
 8002c6c:	42a9      	cmp	r1, r5
 8002c6e:	d904      	bls.n	8002c7a <_malloc_r+0x26>
 8002c70:	230c      	movs	r3, #12
 8002c72:	6033      	str	r3, [r6, #0]
 8002c74:	2000      	movs	r0, #0
 8002c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d50 <_malloc_r+0xfc>
 8002c7e:	f000 f869 	bl	8002d54 <__malloc_lock>
 8002c82:	f8d8 3000 	ldr.w	r3, [r8]
 8002c86:	461c      	mov	r4, r3
 8002c88:	bb44      	cbnz	r4, 8002cdc <_malloc_r+0x88>
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f7ff ffbf 	bl	8002c10 <sbrk_aligned>
 8002c92:	1c43      	adds	r3, r0, #1
 8002c94:	4604      	mov	r4, r0
 8002c96:	d158      	bne.n	8002d4a <_malloc_r+0xf6>
 8002c98:	f8d8 4000 	ldr.w	r4, [r8]
 8002c9c:	4627      	mov	r7, r4
 8002c9e:	2f00      	cmp	r7, #0
 8002ca0:	d143      	bne.n	8002d2a <_malloc_r+0xd6>
 8002ca2:	2c00      	cmp	r4, #0
 8002ca4:	d04b      	beq.n	8002d3e <_malloc_r+0xea>
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	4639      	mov	r1, r7
 8002caa:	4630      	mov	r0, r6
 8002cac:	eb04 0903 	add.w	r9, r4, r3
 8002cb0:	f000 f864 	bl	8002d7c <_sbrk_r>
 8002cb4:	4581      	cmp	r9, r0
 8002cb6:	d142      	bne.n	8002d3e <_malloc_r+0xea>
 8002cb8:	6821      	ldr	r1, [r4, #0]
 8002cba:	1a6d      	subs	r5, r5, r1
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f7ff ffa6 	bl	8002c10 <sbrk_aligned>
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d03a      	beq.n	8002d3e <_malloc_r+0xea>
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	442b      	add	r3, r5
 8002ccc:	6023      	str	r3, [r4, #0]
 8002cce:	f8d8 3000 	ldr.w	r3, [r8]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	bb62      	cbnz	r2, 8002d30 <_malloc_r+0xdc>
 8002cd6:	f8c8 7000 	str.w	r7, [r8]
 8002cda:	e00f      	b.n	8002cfc <_malloc_r+0xa8>
 8002cdc:	6822      	ldr	r2, [r4, #0]
 8002cde:	1b52      	subs	r2, r2, r5
 8002ce0:	d420      	bmi.n	8002d24 <_malloc_r+0xd0>
 8002ce2:	2a0b      	cmp	r2, #11
 8002ce4:	d917      	bls.n	8002d16 <_malloc_r+0xc2>
 8002ce6:	1961      	adds	r1, r4, r5
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	6025      	str	r5, [r4, #0]
 8002cec:	bf18      	it	ne
 8002cee:	6059      	strne	r1, [r3, #4]
 8002cf0:	6863      	ldr	r3, [r4, #4]
 8002cf2:	bf08      	it	eq
 8002cf4:	f8c8 1000 	streq.w	r1, [r8]
 8002cf8:	5162      	str	r2, [r4, r5]
 8002cfa:	604b      	str	r3, [r1, #4]
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f000 f82f 	bl	8002d60 <__malloc_unlock>
 8002d02:	f104 000b 	add.w	r0, r4, #11
 8002d06:	1d23      	adds	r3, r4, #4
 8002d08:	f020 0007 	bic.w	r0, r0, #7
 8002d0c:	1ac2      	subs	r2, r0, r3
 8002d0e:	bf1c      	itt	ne
 8002d10:	1a1b      	subne	r3, r3, r0
 8002d12:	50a3      	strne	r3, [r4, r2]
 8002d14:	e7af      	b.n	8002c76 <_malloc_r+0x22>
 8002d16:	6862      	ldr	r2, [r4, #4]
 8002d18:	42a3      	cmp	r3, r4
 8002d1a:	bf0c      	ite	eq
 8002d1c:	f8c8 2000 	streq.w	r2, [r8]
 8002d20:	605a      	strne	r2, [r3, #4]
 8002d22:	e7eb      	b.n	8002cfc <_malloc_r+0xa8>
 8002d24:	4623      	mov	r3, r4
 8002d26:	6864      	ldr	r4, [r4, #4]
 8002d28:	e7ae      	b.n	8002c88 <_malloc_r+0x34>
 8002d2a:	463c      	mov	r4, r7
 8002d2c:	687f      	ldr	r7, [r7, #4]
 8002d2e:	e7b6      	b.n	8002c9e <_malloc_r+0x4a>
 8002d30:	461a      	mov	r2, r3
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	42a3      	cmp	r3, r4
 8002d36:	d1fb      	bne.n	8002d30 <_malloc_r+0xdc>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	6053      	str	r3, [r2, #4]
 8002d3c:	e7de      	b.n	8002cfc <_malloc_r+0xa8>
 8002d3e:	230c      	movs	r3, #12
 8002d40:	6033      	str	r3, [r6, #0]
 8002d42:	4630      	mov	r0, r6
 8002d44:	f000 f80c 	bl	8002d60 <__malloc_unlock>
 8002d48:	e794      	b.n	8002c74 <_malloc_r+0x20>
 8002d4a:	6005      	str	r5, [r0, #0]
 8002d4c:	e7d6      	b.n	8002cfc <_malloc_r+0xa8>
 8002d4e:	bf00      	nop
 8002d50:	20001260 	.word	0x20001260

08002d54 <__malloc_lock>:
 8002d54:	4801      	ldr	r0, [pc, #4]	@ (8002d5c <__malloc_lock+0x8>)
 8002d56:	f000 b84b 	b.w	8002df0 <__retarget_lock_acquire_recursive>
 8002d5a:	bf00      	nop
 8002d5c:	200013a0 	.word	0x200013a0

08002d60 <__malloc_unlock>:
 8002d60:	4801      	ldr	r0, [pc, #4]	@ (8002d68 <__malloc_unlock+0x8>)
 8002d62:	f000 b846 	b.w	8002df2 <__retarget_lock_release_recursive>
 8002d66:	bf00      	nop
 8002d68:	200013a0 	.word	0x200013a0

08002d6c <memset>:
 8002d6c:	4402      	add	r2, r0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d100      	bne.n	8002d76 <memset+0xa>
 8002d74:	4770      	bx	lr
 8002d76:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7a:	e7f9      	b.n	8002d70 <memset+0x4>

08002d7c <_sbrk_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	4d06      	ldr	r5, [pc, #24]	@ (8002d98 <_sbrk_r+0x1c>)
 8002d80:	2300      	movs	r3, #0
 8002d82:	4604      	mov	r4, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	602b      	str	r3, [r5, #0]
 8002d88:	f7fd fd42 	bl	8000810 <_sbrk>
 8002d8c:	1c43      	adds	r3, r0, #1
 8002d8e:	d102      	bne.n	8002d96 <_sbrk_r+0x1a>
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	b103      	cbz	r3, 8002d96 <_sbrk_r+0x1a>
 8002d94:	6023      	str	r3, [r4, #0]
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
 8002d98:	2000139c 	.word	0x2000139c

08002d9c <__errno>:
 8002d9c:	4b01      	ldr	r3, [pc, #4]	@ (8002da4 <__errno+0x8>)
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20001194 	.word	0x20001194

08002da8 <__libc_init_array>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	4d0d      	ldr	r5, [pc, #52]	@ (8002de0 <__libc_init_array+0x38>)
 8002dac:	4c0d      	ldr	r4, [pc, #52]	@ (8002de4 <__libc_init_array+0x3c>)
 8002dae:	1b64      	subs	r4, r4, r5
 8002db0:	10a4      	asrs	r4, r4, #2
 8002db2:	2600      	movs	r6, #0
 8002db4:	42a6      	cmp	r6, r4
 8002db6:	d109      	bne.n	8002dcc <__libc_init_array+0x24>
 8002db8:	4d0b      	ldr	r5, [pc, #44]	@ (8002de8 <__libc_init_array+0x40>)
 8002dba:	4c0c      	ldr	r4, [pc, #48]	@ (8002dec <__libc_init_array+0x44>)
 8002dbc:	f000 f828 	bl	8002e10 <_init>
 8002dc0:	1b64      	subs	r4, r4, r5
 8002dc2:	10a4      	asrs	r4, r4, #2
 8002dc4:	2600      	movs	r6, #0
 8002dc6:	42a6      	cmp	r6, r4
 8002dc8:	d105      	bne.n	8002dd6 <__libc_init_array+0x2e>
 8002dca:	bd70      	pop	{r4, r5, r6, pc}
 8002dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd0:	4798      	blx	r3
 8002dd2:	3601      	adds	r6, #1
 8002dd4:	e7ee      	b.n	8002db4 <__libc_init_array+0xc>
 8002dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dda:	4798      	blx	r3
 8002ddc:	3601      	adds	r6, #1
 8002dde:	e7f2      	b.n	8002dc6 <__libc_init_array+0x1e>
 8002de0:	08002f58 	.word	0x08002f58
 8002de4:	08002f58 	.word	0x08002f58
 8002de8:	08002f58 	.word	0x08002f58
 8002dec:	08002f5c 	.word	0x08002f5c

08002df0 <__retarget_lock_acquire_recursive>:
 8002df0:	4770      	bx	lr

08002df2 <__retarget_lock_release_recursive>:
 8002df2:	4770      	bx	lr

08002df4 <memcpy>:
 8002df4:	440a      	add	r2, r1
 8002df6:	4291      	cmp	r1, r2
 8002df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002dfc:	d100      	bne.n	8002e00 <memcpy+0xc>
 8002dfe:	4770      	bx	lr
 8002e00:	b510      	push	{r4, lr}
 8002e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e0a:	4291      	cmp	r1, r2
 8002e0c:	d1f9      	bne.n	8002e02 <memcpy+0xe>
 8002e0e:	bd10      	pop	{r4, pc}

08002e10 <_init>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr

08002e1c <_fini>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr
