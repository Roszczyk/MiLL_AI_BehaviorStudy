
NN_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007698  08003bf8  08003bf8  00004bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b290  0800b290  0000d05c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b290  0800b290  0000d05c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b290  0800b290  0000d05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b290  0800b290  0000c290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b294  0800b294  0000c294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800b298  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d05c  2**0
                  CONTENTS
 10 .bss          000001bc  2000005c  2000005c  0000d05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  0000d05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099b1  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001937  00000000  00000000  00016a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  00018378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f74d  00000000  00000000  00018dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc97  00000000  00000000  0003850d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be835  00000000  00000000  000441a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001029d9  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000007c1  00000000  00000000  00102a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f00  00000000  00000000  001031e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  001060e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003be0 	.word	0x08003be0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08003be0 	.word	0x08003be0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <relu>:
#include "func.h"
#include "weights.h"
#include "data.h"
#include <math.h>

float relu(float x) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	ed87 0a01 	vstr	s0, [r7, #4]
    return x > 0 ? x : 0;
 8000b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7a:	dd01      	ble.n	8000b80 <relu+0x1c>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	e001      	b.n	8000b84 <relu+0x20>
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	ee07 3a90 	vmov	s15, r3
}
 8000b88:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <sigmoid>:

float sigmoid(float x) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0 / (1.0 + exp(-x));
 8000ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba6:	eef1 7a67 	vneg.f32	s15, s15
 8000baa:	ee17 3a90 	vmov	r3, s15
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fc6e 	bl	8000490 <__aeabi_f2d>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	ec43 2b10 	vmov	d0, r2, r3
 8000bbc:	f002 fe04 	bl	80037c8 <exp>
 8000bc0:	ec51 0b10 	vmov	r0, r1, d0
 8000bc4:	f04f 0200 	mov.w	r2, #0
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <sigmoid+0x60>)
 8000bca:	f7ff fb03 	bl	80001d4 <__adddf3>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4908      	ldr	r1, [pc, #32]	@ (8000bf8 <sigmoid+0x60>)
 8000bd8:	f7ff fddc 	bl	8000794 <__aeabi_ddiv>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4610      	mov	r0, r2
 8000be2:	4619      	mov	r1, r3
 8000be4:	f7ff ff6e 	bl	8000ac4 <__aeabi_d2f>
 8000be8:	4603      	mov	r3, r0
 8000bea:	ee07 3a90 	vmov	s15, r3
}
 8000bee:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	3ff00000 	.word	0x3ff00000

08000bfc <softmax>:

void softmax(float* inputs, int length) {
 8000bfc:	b5b0      	push	{r4, r5, r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
    float sum = 0;
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < length; i++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	e023      	b.n	8000c5a <softmax+0x5e>
        sum += exp(inputs[i]);
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fc37 	bl	8000490 <__aeabi_f2d>
 8000c22:	4602      	mov	r2, r0
 8000c24:	460b      	mov	r3, r1
 8000c26:	ec43 2b10 	vmov	d0, r2, r3
 8000c2a:	f002 fdcd 	bl	80037c8 <exp>
 8000c2e:	ec55 4b10 	vmov	r4, r5, d0
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff fc2c 	bl	8000490 <__aeabi_f2d>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	4629      	mov	r1, r5
 8000c40:	f7ff fac8 	bl	80001d4 <__adddf3>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff ff3a 	bl	8000ac4 <__aeabi_d2f>
 8000c50:	4603      	mov	r3, r0
 8000c52:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < length; i++) {
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	3301      	adds	r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbd7      	blt.n	8000c12 <softmax+0x16>
    }
    for (int i = 0; i < length; i++) {
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	e027      	b.n	8000cb8 <softmax+0xbc>
        inputs[i] = exp(inputs[i]) / sum;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fc0c 	bl	8000490 <__aeabi_f2d>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	ec43 2b10 	vmov	d0, r2, r3
 8000c80:	f002 fda2 	bl	80037c8 <exp>
 8000c84:	ec55 4b10 	vmov	r4, r5, d0
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff fc01 	bl	8000490 <__aeabi_f2d>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4620      	mov	r0, r4
 8000c94:	4629      	mov	r1, r5
 8000c96:	f7ff fd7d 	bl	8000794 <__aeabi_ddiv>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	18d4      	adds	r4, r2, r3
 8000caa:	f7ff ff0b 	bl	8000ac4 <__aeabi_d2f>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < length; i++) {
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbd3      	blt.n	8000c68 <softmax+0x6c>
    }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ccc <dense_layer>:

void dense_layer(const float * inputs, float * outputs, int number_inputs, int number_outputs){
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	603b      	str	r3, [r7, #0]
    for (int i = 0; i<number_outputs; i++){
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e04a      	b.n	8000d76 <dense_layer+0xaa>
        outputs[i] = dense_bias[i];
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4927      	ldr	r1, [pc, #156]	@ (8000d88 <dense_layer+0xbc>)
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	440a      	add	r2, r1
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	601a      	str	r2, [r3, #0]
        for (int j=0; j<number_inputs; j++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	e024      	b.n	8000d44 <dense_layer+0x78>
            outputs[i] = outputs[i] + inputs[j]*dense_weights[j][i];
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	4413      	add	r3, r2
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	edd3 6a00 	vldr	s13, [r3]
 8000d12:	491e      	ldr	r1, [pc, #120]	@ (8000d8c <dense_layer+0xc0>)
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4613      	mov	r3, r2
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	4413      	add	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	440b      	add	r3, r1
 8000d26:	edd3 7a00 	vldr	s15, [r3]
 8000d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	4413      	add	r3, r2
 8000d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3a:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<number_inputs; j++){
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	3301      	adds	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbd6      	blt.n	8000cfa <dense_layer+0x2e>
        }
        outputs[i] = relu(outputs[i]);
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	4413      	add	r3, r2
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	18d4      	adds	r4, r2, r3
 8000d60:	eeb0 0a67 	vmov.f32	s0, s15
 8000d64:	f7ff fefe 	bl	8000b64 <relu>
 8000d68:	eef0 7a40 	vmov.f32	s15, s0
 8000d6c:	edc4 7a00 	vstr	s15, [r4]
    for (int i = 0; i<number_outputs; i++){
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbb0      	blt.n	8000ce0 <dense_layer+0x14>
    }
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	08006230 	.word	0x08006230
 8000d8c:	08004d90 	.word	0x08004d90

08000d90 <dense_1_layer>:

void dense_1_layer(float * inputs, float * outputs, int number_inputs, int number_outputs){
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
    for (int i = 0; i<number_outputs; i++){
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e04a      	b.n	8000e3a <dense_1_layer+0xaa>
        outputs[i] = dense_1_bias[i];
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	4413      	add	r3, r2
 8000dac:	4927      	ldr	r1, [pc, #156]	@ (8000e4c <dense_1_layer+0xbc>)
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	440a      	add	r2, r1
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	601a      	str	r2, [r3, #0]
        for (int j=0; j<number_inputs; j++){
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	e024      	b.n	8000e08 <dense_1_layer+0x78>
            outputs[i] = outputs[i] + inputs[j]*dense_1_weights[j][i];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	ed93 7a00 	vldr	s14, [r3]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	edd3 6a00 	vldr	s13, [r3]
 8000dd6:	491e      	ldr	r1, [pc, #120]	@ (8000e50 <dense_1_layer+0xc0>)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4413      	add	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	edd3 7a00 	vldr	s15, [r3]
 8000dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	4413      	add	r3, r2
 8000dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfe:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<number_inputs; j++){
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	3301      	adds	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbd6      	blt.n	8000dbe <dense_1_layer+0x2e>
        }
        outputs[i] = sigmoid(outputs[i]);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	4413      	add	r3, r2
 8000e18:	edd3 7a00 	vldr	s15, [r3]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	18d4      	adds	r4, r2, r3
 8000e24:	eeb0 0a67 	vmov.f32	s0, s15
 8000e28:	f7ff feb6 	bl	8000b98 <sigmoid>
 8000e2c:	eef0 7a40 	vmov.f32	s15, s0
 8000e30:	edc4 7a00 	vstr	s15, [r4]
    for (int i = 0; i<number_outputs; i++){
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dbb0      	blt.n	8000da4 <dense_1_layer+0x14>
    }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}
 8000e4c:	0800af10 	.word	0x0800af10
 8000e50:	08006410 	.word	0x08006410

08000e54 <dense_2_layer>:

void dense_2_layer(float * inputs, float * outputs, int number_inputs, int number_outputs){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
    for (int i = 0; i<number_outputs; i++){
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e035      	b.n	8000ed4 <dense_2_layer+0x80>
        outputs[i] = dense_2_bias[i];
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	4413      	add	r3, r2
 8000e70:	491e      	ldr	r1, [pc, #120]	@ (8000eec <dense_2_layer+0x98>)
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	440a      	add	r2, r1
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
        for (int j=0; j<number_inputs; j++){
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	e021      	b.n	8000ec6 <dense_2_layer+0x72>
            outputs[i] = outputs[i] + inputs[j]*dense_2_weights[j][i];
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	4413      	add	r3, r2
 8000e8a:	ed93 7a00 	vldr	s14, [r3]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	edd3 6a00 	vldr	s13, [r3]
 8000e9a:	4915      	ldr	r1, [pc, #84]	@ (8000ef0 <dense_2_layer+0x9c>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	009a      	lsls	r2, r3, #2
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ebc:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<number_inputs; j++){
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dbd9      	blt.n	8000e82 <dense_2_layer+0x2e>
    for (int i = 0; i<number_outputs; i++){
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbc5      	blt.n	8000e68 <dense_2_layer+0x14>
        }
    }
    softmax(outputs, 4);
 8000edc:	2104      	movs	r1, #4
 8000ede:	68b8      	ldr	r0, [r7, #8]
 8000ee0:	f7ff fe8c 	bl	8000bfc <softmax>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	0800b230 	.word	0x0800b230
 8000ef0:	0800afb0 	.word	0x0800afb0

08000ef4 <forward_network>:

void forward_network(const float* input, float* output) {
 8000ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef8:	b08b      	sub	sp, #44	@ 0x2c
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	466b      	mov	r3, sp
 8000f02:	461e      	mov	r6, r3
    int hidden1_number = 120;
 8000f04:	2378      	movs	r3, #120	@ 0x78
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
    int hidden2_number = 40;
 8000f08:	2328      	movs	r3, #40	@ 0x28
 8000f0a:	623b      	str	r3, [r7, #32]
    float hidden1[hidden1_number];
 8000f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f0e:	1e4b      	subs	r3, r1, #1
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	460a      	mov	r2, r1
 8000f14:	2300      	movs	r3, #0
 8000f16:	603a      	str	r2, [r7, #0]
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	0143      	lsls	r3, r0, #5
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f2c:	6838      	ldr	r0, [r7, #0]
 8000f2e:	0142      	lsls	r2, r0, #5
 8000f30:	460a      	mov	r2, r1
 8000f32:	2300      	movs	r3, #0
 8000f34:	4692      	mov	sl, r2
 8000f36:	469b      	mov	fp, r3
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000f44:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000f48:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	3307      	adds	r3, #7
 8000f52:	08db      	lsrs	r3, r3, #3
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	ebad 0d03 	sub.w	sp, sp, r3
 8000f5a:	466b      	mov	r3, sp
 8000f5c:	3303      	adds	r3, #3
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    float hidden2[hidden2_number];
 8000f64:	6a39      	ldr	r1, [r7, #32]
 8000f66:	1e4b      	subs	r3, r1, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	460a      	mov	r2, r1
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4690      	mov	r8, r2
 8000f70:	4699      	mov	r9, r3
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000f7e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000f82:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000f86:	460a      	mov	r2, r1
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4614      	mov	r4, r2
 8000f8c:	461d      	mov	r5, r3
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	016b      	lsls	r3, r5, #5
 8000f98:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000f9c:	0162      	lsls	r2, r4, #5
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	3307      	adds	r3, #7
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	ebad 0d03 	sub.w	sp, sp, r3
 8000fac:	466b      	mov	r3, sp
 8000fae:	3303      	adds	r3, #3
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	613b      	str	r3, [r7, #16]
    dense_layer(input, hidden1, INPUT_SIZE, hidden1_number);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	220b      	movs	r2, #11
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff fe85 	bl	8000ccc <dense_layer>
    dense_1_layer(hidden1, hidden2, hidden1_number, hidden2_number);
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fc6:	6939      	ldr	r1, [r7, #16]
 8000fc8:	69b8      	ldr	r0, [r7, #24]
 8000fca:	f7ff fee1 	bl	8000d90 <dense_1_layer>
    dense_2_layer(hidden2, output, hidden2_number, 4);
 8000fce:	2304      	movs	r3, #4
 8000fd0:	6a3a      	ldr	r2, [r7, #32]
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	6938      	ldr	r0, [r7, #16]
 8000fd6:	f7ff ff3d 	bl	8000e54 <dense_2_layer>
 8000fda:	46b5      	mov	sp, r6
}
 8000fdc:	bf00      	nop
 8000fde:	372c      	adds	r7, #44	@ 0x2c
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000fe6 <get_result_from_softmax>:


int get_result_from_softmax(float * result_softmax, int lenght){
 8000fe6:	b480      	push	{r7}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
    int max = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
    for (int i=1; i<lenght; i++){
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	e015      	b.n	8001026 <get_result_from_softmax+0x40>
        if (result_softmax[max] < result_softmax[i]) max = i;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	ed93 7a00 	vldr	s14, [r3]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	d501      	bpl.n	8001020 <get_result_from_softmax+0x3a>
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60fb      	str	r3, [r7, #12]
    for (int i=1; i<lenght; i++){
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	3301      	adds	r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbe5      	blt.n	8000ffa <get_result_from_softmax+0x14>
    }
    return max;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f000 f9ee 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f81e 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001048:	f000 f8a6 	bl	8001198 <MX_GPIO_Init>
  MX_TIM2_Init();
 800104c:	f000 f856 	bl	80010fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <main+0x44>)
 8001052:	f001 ff8d 	bl	8002f70 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2120      	movs	r1, #32
 800105a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105e:	f000 fced 	bl	8001a3c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001062:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001066:	f000 fa41 	bl	80014ec <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001072:	f000 fce3 	bl	8001a3c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001076:	2101      	movs	r1, #1
 8001078:	2000      	movs	r0, #0
 800107a:	f000 fcf7 	bl	8001a6c <HAL_PWR_EnterSLEEPMode>
 800107e:	e7fa      	b.n	8001076 <main+0x3a>
 8001080:	20000078 	.word	0x20000078

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	@ 0x40
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2228      	movs	r2, #40	@ 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fb66 	bl	8003764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2310      	movs	r3, #16
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fcf2 	bl	8001aa4 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010c6:	f000 f8e7 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fd1c 	bl	8002b20 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f8d3 	bl	8001298 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	@ 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800111a:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <MX_TIM2_Init+0x98>)
 800111c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001120:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001124:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_TIM2_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001130:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001132:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_TIM2_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001144:	4813      	ldr	r0, [pc, #76]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001146:	f001 febb 	bl	8002ec0 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 f8a2 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001162:	f002 f863 	bl	800322c <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800116c:	f000 f894 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <MX_TIM2_Init+0x98>)
 800117e:	f002 fa65 	bl	800364c <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001188:	f000 f886 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000078 	.word	0x20000078

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_GPIO_Init+0x5c>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <MX_GPIO_Init+0x5c>)
 80011b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b6:	6153      	str	r3, [r2, #20]
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_GPIO_Init+0x5c>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2120      	movs	r1, #32
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011cc:	f000 fc36 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011d0:	2320      	movs	r3, #32
 80011d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e8:	f000 fab6 	bl	8001758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001208:	d139      	bne.n	800127e <HAL_TIM_PeriodElapsedCallback+0x86>
    {
    	forward_network(data_array[currentData], outputs);
 800120a:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	222c      	movs	r2, #44	@ 0x2c
 8001210:	fb02 f303 	mul.w	r3, r2, r3
 8001214:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001216:	4413      	add	r3, r2
 8001218:	491d      	ldr	r1, [pc, #116]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fe6a 	bl	8000ef4 <forward_network>
    	result = get_result_from_softmax(outputs, 4);
 8001220:	2104      	movs	r1, #4
 8001222:	481b      	ldr	r0, [pc, #108]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001224:	f7ff fedf 	bl	8000fe6 <get_result_from_softmax>
 8001228:	4603      	mov	r3, r0
 800122a:	4a1a      	ldr	r2, [pc, #104]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800122c:	6013      	str	r3, [r2, #0]
    	if (currentData >= DATA_ROWS) currentData = 0;
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b65      	cmp	r3, #101	@ 0x65
 8001234:	dd03      	ble.n	800123e <HAL_TIM_PeriodElapsedCallback+0x46>
 8001236:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e004      	b.n	8001248 <HAL_TIM_PeriodElapsedCallback+0x50>
    	else currentData++;
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001246:	6013      	str	r3, [r2, #0]
  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2120      	movs	r1, #32
 800124c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001250:	f000 fbf4 	bl	8001a3c <HAL_GPIO_WritePin>
  	  for(int i=0; i<(result + 1) * 250; i++){};
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e002      	b.n	8001260 <HAL_TIM_PeriodElapsedCallback+0x68>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3301      	adds	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	22fa      	movs	r2, #250	@ 0xfa
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbf3      	blt.n	800125a <HAL_TIM_PeriodElapsedCallback+0x62>
  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2120      	movs	r1, #32
 8001276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127a:	f000 fbdf 	bl	8001a3c <HAL_GPIO_WritePin>

    }
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000d8 	.word	0x200000d8
 800128c:	08003bf8 	.word	0x08003bf8
 8001290:	200000c4 	.word	0x200000c4
 8001294:	200000d4 	.word	0x200000d4

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <Error_Handler+0x8>

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <HAL_MspInit+0x44>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a0e      	ldr	r2, [pc, #56]	@ (80012e8 <HAL_MspInit+0x44>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6193      	str	r3, [r2, #24]
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <HAL_MspInit+0x44>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <HAL_MspInit+0x44>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <HAL_MspInit+0x44>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_MspInit+0x44>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012fc:	d113      	bne.n	8001326 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <HAL_TIM_Base_MspInit+0x44>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <HAL_TIM_Base_MspInit+0x44>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_TIM_Base_MspInit+0x44>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	201c      	movs	r0, #28
 800131c:	f000 f9e5 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001320:	201c      	movs	r0, #28
 8001322:	f000 f9fe 	bl	8001722 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <NMI_Handler+0x4>

0800133c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <MemManage_Handler+0x4>

0800134c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <UsageFault_Handler+0x4>

0800135c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138a:	f000 f88f 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <TIM2_IRQHandler+0x10>)
 800139a:	f001 fe45 	bl	8003028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000078 	.word	0x20000078

080013a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001404 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	@ (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f002 f9c1 	bl	8003780 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff fe1d 	bl	800103c <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001404:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001410:	0800b298 	.word	0x0800b298
  ldr r2, =_sbss
 8001414:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001418:	20000218 	.word	0x20000218

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f94f 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff ff32 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f967 	bl	800173e <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f92f 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	200000dc 	.word	0x200000dc

080014d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d8:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200000dc 	.word	0x200000dc

080014ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	@ (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	@ (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	@ (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	@ 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	e14e      	b.n	8001a06 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8140 	beq.w	8001a00 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d005      	beq.n	8001798 <HAL_GPIO_Init+0x40>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d130      	bne.n	80017fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ce:	2201      	movs	r2, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 0201 	and.w	r2, r3, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b03      	cmp	r3, #3
 8001804:	d017      	beq.n	8001836 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d123      	bne.n	800188a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	6939      	ldr	r1, [r7, #16]
 8001886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0203 	and.w	r2, r3, #3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 809a 	beq.w	8001a00 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018cc:	4b55      	ldr	r3, [pc, #340]	@ (8001a24 <HAL_GPIO_Init+0x2cc>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a54      	ldr	r2, [pc, #336]	@ (8001a24 <HAL_GPIO_Init+0x2cc>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b52      	ldr	r3, [pc, #328]	@ (8001a24 <HAL_GPIO_Init+0x2cc>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018e4:	4a50      	ldr	r2, [pc, #320]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220f      	movs	r2, #15
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800190e:	d013      	beq.n	8001938 <HAL_GPIO_Init+0x1e0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a46      	ldr	r2, [pc, #280]	@ (8001a2c <HAL_GPIO_Init+0x2d4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00d      	beq.n	8001934 <HAL_GPIO_Init+0x1dc>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a45      	ldr	r2, [pc, #276]	@ (8001a30 <HAL_GPIO_Init+0x2d8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d007      	beq.n	8001930 <HAL_GPIO_Init+0x1d8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a44      	ldr	r2, [pc, #272]	@ (8001a34 <HAL_GPIO_Init+0x2dc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_GPIO_Init+0x1d4>
 8001928:	2303      	movs	r3, #3
 800192a:	e006      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 800192c:	2305      	movs	r3, #5
 800192e:	e004      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001930:	2302      	movs	r3, #2
 8001932:	e002      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001938:	2300      	movs	r3, #0
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	f002 0203 	and.w	r2, r2, #3
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	4093      	lsls	r3, r2
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800194a:	4937      	ldr	r1, [pc, #220]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001958:	4b37      	ldr	r3, [pc, #220]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800197c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001982:	4b2d      	ldr	r3, [pc, #180]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a6:	4a24      	ldr	r2, [pc, #144]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d6:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f aea9 	bne.w	8001768 <HAL_GPIO_Init+0x10>
  }
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	48000800 	.word	0x48000800
 8001a34:	48000c00 	.word	0x48000c00
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8001a78:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001a8a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001a8c:	e002      	b.n	8001a94 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001a8e:	bf40      	sev
    __WFE();
 8001a90:	bf20      	wfe
    __WFE();
 8001a92:	bf20      	wfe
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ab4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f001 b823 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 817d 	beq.w	8001dda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ae0:	4bbc      	ldr	r3, [pc, #752]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d00c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aec:	4bb9      	ldr	r3, [pc, #740]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d15c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x10e>
 8001af8:	4bb6      	ldr	r3, [pc, #728]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b04:	d155      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x10e>
 8001b06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b0a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x94>
 8001b32:	4ba8      	ldr	r3, [pc, #672]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e015      	b.n	8001b64 <HAL_RCC_OscConfig+0xc0>
 8001b38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b3c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b50:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001b60:	4b9c      	ldr	r3, [pc, #624]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b68:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001b6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b70:	fa92 f2a2 	rbit	r2, r2
 8001b74:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001b78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 811f 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x334>
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8116 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f000 bfaf 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
 8001bc4:	4b83      	ldr	r3, [pc, #524]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a82      	ldr	r2, [pc, #520]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e036      	b.n	8001c40 <HAL_RCC_OscConfig+0x19c>
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x158>
 8001be2:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7b      	ldr	r2, [pc, #492]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b79      	ldr	r3, [pc, #484]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a78      	ldr	r2, [pc, #480]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e021      	b.n	8001c40 <HAL_RCC_OscConfig+0x19c>
 8001bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x184>
 8001c0e:	4b71      	ldr	r3, [pc, #452]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a70      	ldr	r2, [pc, #448]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6d      	ldr	r2, [pc, #436]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0x19c>
 8001c28:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a69      	ldr	r2, [pc, #420]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b67      	ldr	r3, [pc, #412]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a66      	ldr	r2, [pc, #408]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c40:	4b64      	ldr	r3, [pc, #400]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	f023 020f 	bic.w	r2, r3, #15
 8001c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	495f      	ldr	r1, [pc, #380]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d059      	beq.n	8001d1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fc33 	bl	80014d4 <HAL_GetTick>
 8001c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fc2e 	bl	80014d4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	@ 0x64
 8001c82:	d902      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f000 bf43 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8001c8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c8e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001c9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0x218>
 8001cb6:	4b47      	ldr	r3, [pc, #284]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e015      	b.n	8001ce8 <HAL_RCC_OscConfig+0x244>
 8001cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cc0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001cd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001cd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001cf0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001cf4:	fa92 f2a2 	rbit	r2, r2
 8001cf8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001cfc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f042 0220 	orr.w	r2, r2, #32
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f002 021f 	and.w	r2, r2, #31
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ab      	beq.n	8001c74 <HAL_RCC_OscConfig+0x1d0>
 8001d1c:	e05d      	b.n	8001dda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff fbd9 	bl	80014d4 <HAL_GetTick>
 8001d22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fbd4 	bl	80014d4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	@ 0x64
 8001d36:	d902      	bls.n	8001d3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f000 bee9 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8001d3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d42:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2cc>
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e015      	b.n	8001d9c <HAL_RCC_OscConfig+0x2f8>
 8001d70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d74:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d88:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001da0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001da4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001da8:	fa92 f2a2 	rbit	r2, r2
 8001dac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001db0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001db4:	fab2 f282 	clz	r2, r2
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f002 021f 	and.w	r2, r2, #31
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ab      	bne.n	8001d28 <HAL_RCC_OscConfig+0x284>
 8001dd0:	e003      	b.n	8001dda <HAL_RCC_OscConfig+0x336>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 817d 	beq.w	80020ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001df0:	4ba6      	ldr	r3, [pc, #664]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dfc:	4ba3      	ldr	r3, [pc, #652]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d172      	bne.n	8001eee <HAL_RCC_OscConfig+0x44a>
 8001e08:	4ba0      	ldr	r3, [pc, #640]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d16c      	bne.n	8001eee <HAL_RCC_OscConfig+0x44a>
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e26:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_OscConfig+0x3a0>
 8001e3e:	4b93      	ldr	r3, [pc, #588]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e013      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c8>
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e68:	4b88      	ldr	r3, [pc, #544]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001e72:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e76:	fa92 f2a2 	rbit	r2, r2
 8001e7a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001e7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x410>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f000 be2e 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b75      	ldr	r3, [pc, #468]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	21f8      	movs	r1, #248	@ 0xf8
 8001eca:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001ed2:	fa91 f1a1 	rbit	r1, r1
 8001ed6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001eda:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001ede:	fab1 f181 	clz	r1, r1
 8001ee2:	b2c9      	uxtb	r1, r1
 8001ee4:	408b      	lsls	r3, r1
 8001ee6:	4969      	ldr	r1, [pc, #420]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eec:	e0fd      	b.n	80020ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8088 	beq.w	8002010 <HAL_RCC_OscConfig+0x56c>
 8001f00:	2301      	movs	r3, #1
 8001f02:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f12:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	2301      	movs	r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fad2 	bl	80014d4 <HAL_GetTick>
 8001f30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff facd 	bl	80014d4 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d902      	bls.n	8001f4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	f000 bde2 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4d8>
 8001f76:	4b45      	ldr	r3, [pc, #276]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	e013      	b.n	8001fa4 <HAL_RCC_OscConfig+0x500>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f94:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001faa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001fb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001fba:	fab2 f282 	clz	r2, r2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f042 0220 	orr.w	r2, r2, #32
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f002 021f 	and.w	r2, r2, #31
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0af      	beq.n	8001f36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	21f8      	movs	r1, #248	@ 0xf8
 8001fec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ff4:	fa91 f1a1 	rbit	r1, r1
 8001ff8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001ffc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002000:	fab1 f181 	clz	r1, r1
 8002004:	b2c9      	uxtb	r1, r1
 8002006:	408b      	lsls	r3, r1
 8002008:	4920      	ldr	r1, [pc, #128]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
 800200e:	e06c      	b.n	80020ea <HAL_RCC_OscConfig+0x646>
 8002010:	2301      	movs	r3, #1
 8002012:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002022:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002030:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	461a      	mov	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fa4a 	bl	80014d4 <HAL_GetTick>
 8002040:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002046:	f7ff fa45 	bl	80014d4 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	f000 bd5a 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 800205c:	2302      	movs	r3, #2
 800205e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800206e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d104      	bne.n	8002090 <HAL_RCC_OscConfig+0x5ec>
 8002086:	4b01      	ldr	r3, [pc, #4]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	e015      	b.n	80020b8 <HAL_RCC_OscConfig+0x614>
 800208c:	40021000 	.word	0x40021000
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020a2:	2302      	movs	r3, #2
 80020a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020b4:	4bc8      	ldr	r3, [pc, #800]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	2202      	movs	r2, #2
 80020ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80020be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80020c2:	fa92 f2a2 	rbit	r2, r2
 80020c6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80020ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f042 0220 	orr.w	r2, r2, #32
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f002 021f 	and.w	r2, r2, #31
 80020de:	2101      	movs	r1, #1
 80020e0:	fa01 f202 	lsl.w	r2, r1, r2
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ad      	bne.n	8002046 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8110 	beq.w	8002320 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002104:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d079      	beq.n	8002204 <HAL_RCC_OscConfig+0x760>
 8002110:	2301      	movs	r3, #1
 8002112:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4bab      	ldr	r3, [pc, #684]	@ (80023dc <HAL_RCC_OscConfig+0x938>)
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	461a      	mov	r2, r3
 8002136:	2301      	movs	r3, #1
 8002138:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7ff f9cb 	bl	80014d4 <HAL_GetTick>
 800213e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002144:	f7ff f9c6 	bl	80014d4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d902      	bls.n	800215a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	f000 bcdb 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 800215a:	2302      	movs	r3, #2
 800215c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002174:	2202      	movs	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002198:	2202      	movs	r2, #2
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b4:	4b88      	ldr	r3, [pc, #544]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80021b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021c0:	2102      	movs	r1, #2
 80021c2:	6019      	str	r1, [r3, #0]
 80021c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f1a3 	rbit	r1, r3
 80021d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021da:	6019      	str	r1, [r3, #0]
  return result;
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0a0      	beq.n	8002144 <HAL_RCC_OscConfig+0x6a0>
 8002202:	e08d      	b.n	8002320 <HAL_RCC_OscConfig+0x87c>
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002226:	601a      	str	r2, [r3, #0]
  return result;
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002230:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	4b68      	ldr	r3, [pc, #416]	@ (80023dc <HAL_RCC_OscConfig+0x938>)
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2300      	movs	r3, #0
 8002244:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff f945 	bl	80014d4 <HAL_GetTick>
 800224a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff f940 	bl	80014d4 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d902      	bls.n	8002266 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	f000 bc55 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800226e:	2202      	movs	r2, #2
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002284:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002292:	2202      	movs	r2, #2
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f2a3 	rbit	r2, r3
 80022a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80022d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	4b41      	ldr	r3, [pc, #260]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80022d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022de:	2102      	movs	r1, #2
 80022e0:	6019      	str	r1, [r3, #0]
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f1a3 	rbit	r1, r3
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022f8:	6019      	str	r1, [r3, #0]
  return result;
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d197      	bne.n	8002250 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 81a1 	beq.w	8002678 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233c:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d116      	bne.n	8002376 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800236e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <HAL_RCC_OscConfig+0x93c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11a      	bne.n	80023b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_RCC_OscConfig+0x93c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a16      	ldr	r2, [pc, #88]	@ (80023e0 <HAL_RCC_OscConfig+0x93c>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff f8a1 	bl	80014d4 <HAL_GetTick>
 8002392:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	e009      	b.n	80023ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7ff f89c 	bl	80014d4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	@ 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e3b1      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <HAL_RCC_OscConfig+0x93c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ef      	beq.n	8002398 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10d      	bne.n	80023e4 <HAL_RCC_OscConfig+0x940>
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a02      	ldr	r2, [pc, #8]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e03c      	b.n	8002450 <HAL_RCC_OscConfig+0x9ac>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	10908120 	.word	0x10908120
 80023e0:	40007000 	.word	0x40007000
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x96a>
 80023f4:	4bc1      	ldr	r3, [pc, #772]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4ac0      	ldr	r2, [pc, #768]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4bbe      	ldr	r3, [pc, #760]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4abd      	ldr	r2, [pc, #756]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e020      	b.n	8002450 <HAL_RCC_OscConfig+0x9ac>
 800240e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002412:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x994>
 800241e:	4bb7      	ldr	r3, [pc, #732]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4ab6      	ldr	r2, [pc, #728]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4bb4      	ldr	r3, [pc, #720]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4ab3      	ldr	r2, [pc, #716]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0x9ac>
 8002438:	4bb0      	ldr	r3, [pc, #704]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4aaf      	ldr	r2, [pc, #700]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4bad      	ldr	r3, [pc, #692]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4aac      	ldr	r2, [pc, #688]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800244a:	f023 0304 	bic.w	r3, r3, #4
 800244e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8081 	beq.w	8002564 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7ff f837 	bl	80014d4 <HAL_GetTick>
 8002466:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7ff f832 	bl	80014d4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e345      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800248c:	2202      	movs	r2, #2
 800248e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f2a3 	rbit	r2, r3
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024ca:	601a      	str	r2, [r3, #0]
  return result;
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0xa4c>
 80024ea:	4b84      	ldr	r3, [pc, #528]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	e013      	b.n	8002518 <HAL_RCC_OscConfig+0xa74>
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80024f8:	2202      	movs	r2, #2
 80024fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002500:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	fa93 f2a3 	rbit	r2, r3
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	4b79      	ldr	r3, [pc, #484]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800251c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002520:	2102      	movs	r1, #2
 8002522:	6011      	str	r1, [r2, #0]
 8002524:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002528:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	fa92 f1a2 	rbit	r1, r2
 8002532:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002536:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800253a:	6011      	str	r1, [r2, #0]
  return result;
 800253c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002540:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	fab2 f282 	clz	r2, r2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f002 021f 	and.w	r2, r2, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f202 	lsl.w	r2, r1, r2
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d084      	beq.n	800246c <HAL_RCC_OscConfig+0x9c8>
 8002562:	e07f      	b.n	8002664 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7fe ffb6 	bl	80014d4 <HAL_GetTick>
 8002568:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	e00b      	b.n	8002586 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe ffb1 	bl	80014d4 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e2c4      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800258e:	2202      	movs	r2, #2
 8002590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025b2:	2202      	movs	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025cc:	601a      	str	r2, [r3, #0]
  return result;
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0xb4e>
 80025ec:	4b43      	ldr	r3, [pc, #268]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	e013      	b.n	800261a <HAL_RCC_OscConfig+0xb76>
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	4b39      	ldr	r3, [pc, #228]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800261e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002622:	2102      	movs	r1, #2
 8002624:	6011      	str	r1, [r2, #0]
 8002626:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800262a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fa92 f1a2 	rbit	r1, r2
 8002634:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002638:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800263c:	6011      	str	r1, [r2, #0]
  return result;
 800263e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002642:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 021f 	and.w	r2, r2, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d184      	bne.n	800256e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002664:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b23      	ldr	r3, [pc, #140]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a22      	ldr	r2, [pc, #136]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002676:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8242 	beq.w	8002b0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800268a:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	f000 8213 	beq.w	8002abe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	f040 8162 	bne.w	800296e <HAL_RCC_OscConfig+0xeca>
 80026aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026ce:	601a      	str	r2, [r3, #0]
  return result;
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	461a      	mov	r2, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fef0 	bl	80014d4 <HAL_GetTick>
 80026f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f8:	e00c      	b.n	8002714 <HAL_RCC_OscConfig+0xc70>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe fee8 	bl	80014d4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1fd      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002718:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800271c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002738:	601a      	str	r2, [r3, #0]
  return result;
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002742:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d102      	bne.n	800275e <HAL_RCC_OscConfig+0xcba>
 8002758:	4bb0      	ldr	r3, [pc, #704]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	e027      	b.n	80027ae <HAL_RCC_OscConfig+0xd0a>
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002766:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800278c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b9c      	ldr	r3, [pc, #624]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027b2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027ba:	6011      	str	r1, [r2, #0]
 80027bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	fa92 f1a2 	rbit	r1, r2
 80027ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027d2:	6011      	str	r1, [r2, #0]
  return result;
 80027d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f042 0220 	orr.w	r2, r2, #32
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f002 021f 	and.w	r2, r2, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d182      	bne.n	8002700 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fa:	4b88      	ldr	r3, [pc, #544]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002806:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	430b      	orrs	r3, r1
 800281c:	497f      	ldr	r1, [pc, #508]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
 8002822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002826:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800282a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800282e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002834:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002842:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002846:	601a      	str	r2, [r3, #0]
  return result;
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002850:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800285c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	461a      	mov	r2, r3
 8002864:	2301      	movs	r3, #1
 8002866:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe fe34 	bl	80014d4 <HAL_GetTick>
 800286c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002870:	e009      	b.n	8002886 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002872:	f7fe fe2f 	bl	80014d4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e144      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800288e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002898:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028aa:	601a      	str	r2, [r3, #0]
  return result;
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_OscConfig+0xe2c>
 80028ca:	4b54      	ldr	r3, [pc, #336]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	e027      	b.n	8002920 <HAL_RCC_OscConfig+0xe7c>
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002908:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fa93 f2a3 	rbit	r2, r3
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002924:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002928:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800292c:	6011      	str	r1, [r2, #0]
 800292e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002932:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fa92 f1a2 	rbit	r1, r2
 800293c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002940:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002944:	6011      	str	r1, [r2, #0]
  return result;
 8002946:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800294a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f042 0220 	orr.w	r2, r2, #32
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f002 021f 	and.w	r2, r2, #31
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d082      	beq.n	8002872 <HAL_RCC_OscConfig+0xdce>
 800296c:	e0cf      	b.n	8002b0e <HAL_RCC_OscConfig+0x106a>
 800296e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002972:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002976:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800297a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	fa93 f2a3 	rbit	r2, r3
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002992:	601a      	str	r2, [r3, #0]
  return result;
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800299c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	2300      	movs	r3, #0
 80029b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fd8e 	bl	80014d4 <HAL_GetTick>
 80029b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	e009      	b.n	80029d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe fd89 	bl	80014d4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e09e      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029f6:	601a      	str	r2, [r3, #0]
  return result;
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d104      	bne.n	8002a20 <HAL_RCC_OscConfig+0xf7c>
 8002a16:	4b01      	ldr	r3, [pc, #4]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e029      	b.n	8002a70 <HAL_RCC_OscConfig+0xfcc>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a40:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <HAL_RCC_OscConfig+0x1078>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a74:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a7c:	6011      	str	r1, [r2, #0]
 8002a7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a82:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	fa92 f1a2 	rbit	r1, r2
 8002a8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a90:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a94:	6011      	str	r1, [r2, #0]
  return result;
 8002a96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a9a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f042 0220 	orr.w	r2, r2, #32
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	f002 021f 	and.w	r2, r2, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d180      	bne.n	80029be <HAL_RCC_OscConfig+0xf1a>
 8002abc:	e027      	b.n	8002b0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e01e      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad2:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_RCC_OscConfig+0x1078>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ada:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ade:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d10b      	bne.n	8002b0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002af2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002af6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b09e      	sub	sp, #120	@ 0x78
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e162      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b90      	ldr	r3, [pc, #576]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b8d      	ldr	r3, [pc, #564]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	498b      	ldr	r1, [pc, #556]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b89      	ldr	r3, [pc, #548]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e14a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b82      	ldr	r3, [pc, #520]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	497f      	ldr	r1, [pc, #508]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80dc 	beq.w	8002d4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d13c      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xf6>
 8002b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ba0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d102      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xa6>
 8002bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e00f      	b.n	8002be6 <HAL_RCC_ClockConfig+0xc6>
 8002bc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002be2:	4b67      	ldr	r3, [pc, #412]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bee:	fa92 f2a2 	rbit	r2, r2
 8002bf2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002bf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d17b      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0f3      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d13c      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x178>
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x128>
 8002c42:	4b4f      	ldr	r3, [pc, #316]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e00f      	b.n	8002c68 <HAL_RCC_ClockConfig+0x148>
 8002c48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c64:	4b46      	ldr	r3, [pc, #280]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c6c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c78:	fab2 f282 	clz	r2, r2
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f042 0220 	orr.w	r2, r2, #32
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	f002 021f 	and.w	r2, r2, #31
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d13a      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b2      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
 8002cba:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e00d      	b.n	8002cdc <HAL_RCC_ClockConfig+0x1bc>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	4b29      	ldr	r3, [pc, #164]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	2202      	movs	r2, #2
 8002cde:	61ba      	str	r2, [r7, #24]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	617a      	str	r2, [r7, #20]
  return result;
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f002 021f 	and.w	r2, r2, #31
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e079      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	491a      	ldr	r1, [pc, #104]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fbda 	bl	80014d4 <HAL_GetTick>
 8002d20:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fe fbd6 	bl	80014d4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e061      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d214      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4906      	ldr	r1, [pc, #24]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b04      	ldr	r3, [pc, #16]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e040      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b1d      	ldr	r3, [pc, #116]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	491a      	ldr	r1, [pc, #104]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4912      	ldr	r1, [pc, #72]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dc2:	f000 f829 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd0:	22f0      	movs	r2, #240	@ 0xf0
 8002dd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	60fa      	str	r2, [r7, #12]
  return result;
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	40d3      	lsrs	r3, r2
 8002de6:	4a09      	ldr	r2, [pc, #36]	@ (8002e0c <HAL_RCC_ClockConfig+0x2ec>)
 8002de8:	5cd3      	ldrb	r3, [r2, r3]
 8002dea:	fa21 f303 	lsr.w	r3, r1, r3
 8002dee:	4a08      	ldr	r2, [pc, #32]	@ (8002e10 <HAL_RCC_ClockConfig+0x2f0>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <HAL_RCC_ClockConfig+0x2f4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fb28 	bl	800144c <HAL_InitTick>
  
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3778      	adds	r7, #120	@ 0x78
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08004d80 	.word	0x08004d80
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e32:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x94>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x30>
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x36>
 8002e46:	e026      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e48:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e4a:	613b      	str	r3, [r7, #16]
      break;
 8002e4c:	e026      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	4a17      	ldr	r2, [pc, #92]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e58:	5cd3      	ldrb	r3, [r2, r3]
 8002e5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x94>)
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e66:	5cd3      	ldrb	r3, [r2, r3]
 8002e68:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e74:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e004      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a0c      	ldr	r2, [pc, #48]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	613b      	str	r3, [r7, #16]
      break;
 8002e94:	e002      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e96:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e98:	613b      	str	r3, [r7, #16]
      break;
 8002e9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9c:	693b      	ldr	r3, [r7, #16]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	007a1200 	.word	0x007a1200
 8002eb4:	0800b240 	.word	0x0800b240
 8002eb8:	0800b250 	.word	0x0800b250
 8002ebc:	003d0900 	.word	0x003d0900

08002ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e049      	b.n	8002f66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe fa00 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f000 fa86 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d001      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e040      	b.n	800300a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003018 <HAL_TIM_Base_Start_IT+0xa8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x58>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x58>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	@ (800301c <HAL_TIM_Base_Start_IT+0xac>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x58>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a17      	ldr	r2, [pc, #92]	@ (8003020 <HAL_TIM_Base_Start_IT+0xb0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d115      	bne.n	8002ff4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <HAL_TIM_Base_Start_IT+0xb4>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d015      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0x96>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe0:	d011      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	e008      	b.n	8003006 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e000      	b.n	8003008 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400
 8003020:	40014000 	.word	0x40014000
 8003024:	00010007 	.word	0x00010007

08003028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d020      	beq.n	800308c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01b      	beq.n	800308c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0202 	mvn.w	r2, #2
 800305c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9ad 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f99f 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f9b0 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d020      	beq.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01b      	beq.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0204 	mvn.w	r2, #4
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f987 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f979 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f98a 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0208 	mvn.w	r2, #8
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2204      	movs	r2, #4
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f961 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f953 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f964 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0210 	mvn.w	r2, #16
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2208      	movs	r2, #8
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f93b 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f92d 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f93e 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0201 	mvn.w	r2, #1
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe f832 	bl	80011f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fac2 	bl	800373c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 faba 	bl	8003750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8fd 	bl	80033fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00c      	beq.n	8003224 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0220 	mvn.w	r2, #32
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa82 	bl	8003728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_TIM_ConfigClockSource+0x1c>
 8003244:	2302      	movs	r3, #2
 8003246:	e0b6      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x18a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003266:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800326a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003284:	d03e      	beq.n	8003304 <HAL_TIM_ConfigClockSource+0xd8>
 8003286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800328a:	f200 8087 	bhi.w	800339c <HAL_TIM_ConfigClockSource+0x170>
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	f000 8086 	beq.w	80033a2 <HAL_TIM_ConfigClockSource+0x176>
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329a:	d87f      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x170>
 800329c:	2b70      	cmp	r3, #112	@ 0x70
 800329e:	d01a      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0xaa>
 80032a0:	2b70      	cmp	r3, #112	@ 0x70
 80032a2:	d87b      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x170>
 80032a4:	2b60      	cmp	r3, #96	@ 0x60
 80032a6:	d050      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x11e>
 80032a8:	2b60      	cmp	r3, #96	@ 0x60
 80032aa:	d877      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x170>
 80032ac:	2b50      	cmp	r3, #80	@ 0x50
 80032ae:	d03c      	beq.n	800332a <HAL_TIM_ConfigClockSource+0xfe>
 80032b0:	2b50      	cmp	r3, #80	@ 0x50
 80032b2:	d873      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x170>
 80032b4:	2b40      	cmp	r3, #64	@ 0x40
 80032b6:	d058      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x13e>
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	d86f      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x170>
 80032bc:	2b30      	cmp	r3, #48	@ 0x30
 80032be:	d064      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15e>
 80032c0:	2b30      	cmp	r3, #48	@ 0x30
 80032c2:	d86b      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x170>
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d060      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15e>
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d867      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x170>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05c      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15e>
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d05a      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15e>
 80032d4:	e062      	b.n	800339c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032e6:	f000 f991 	bl	800360c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	609a      	str	r2, [r3, #8]
      break;
 8003302:	e04f      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003314:	f000 f97a 	bl	800360c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003326:	609a      	str	r2, [r3, #8]
      break;
 8003328:	e03c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	461a      	mov	r2, r3
 8003338:	f000 f8ee 	bl	8003518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2150      	movs	r1, #80	@ 0x50
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f947 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8003348:	e02c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003356:	461a      	mov	r2, r3
 8003358:	f000 f90d 	bl	8003576 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2160      	movs	r1, #96	@ 0x60
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f937 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8003368:	e01c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	461a      	mov	r2, r3
 8003378:	f000 f8ce 	bl	8003518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2140      	movs	r1, #64	@ 0x40
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f927 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8003388:	e00c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f000 f91e 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 800339a:	e003      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      break;
 80033a0:	e000      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80033a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a38      	ldr	r2, [pc, #224]	@ (8003504 <TIM_Base_SetConfig+0xf4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <TIM_Base_SetConfig+0x28>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0x28>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a35      	ldr	r2, [pc, #212]	@ (8003508 <TIM_Base_SetConfig+0xf8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2d      	ldr	r2, [pc, #180]	@ (8003504 <TIM_Base_SetConfig+0xf4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <TIM_Base_SetConfig+0x6a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003458:	d00f      	beq.n	800347a <TIM_Base_SetConfig+0x6a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2a      	ldr	r2, [pc, #168]	@ (8003508 <TIM_Base_SetConfig+0xf8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00b      	beq.n	800347a <TIM_Base_SetConfig+0x6a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a29      	ldr	r2, [pc, #164]	@ (800350c <TIM_Base_SetConfig+0xfc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_Base_SetConfig+0x6a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a28      	ldr	r2, [pc, #160]	@ (8003510 <TIM_Base_SetConfig+0x100>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_Base_SetConfig+0x6a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a27      	ldr	r2, [pc, #156]	@ (8003514 <TIM_Base_SetConfig+0x104>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d108      	bne.n	800348c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a14      	ldr	r2, [pc, #80]	@ (8003504 <TIM_Base_SetConfig+0xf4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <TIM_Base_SetConfig+0xc0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a14      	ldr	r2, [pc, #80]	@ (800350c <TIM_Base_SetConfig+0xfc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <TIM_Base_SetConfig+0xc0>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a13      	ldr	r2, [pc, #76]	@ (8003510 <TIM_Base_SetConfig+0x100>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d003      	beq.n	80034d0 <TIM_Base_SetConfig+0xc0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <TIM_Base_SetConfig+0x104>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d103      	bne.n	80034d8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	611a      	str	r2, [r3, #16]
  }
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40000400 	.word	0x40000400
 800350c:	40014000 	.word	0x40014000
 8003510:	40014400 	.word	0x40014400
 8003514:	40014800 	.word	0x40014800

08003518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f023 0201 	bic.w	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f023 030a 	bic.w	r3, r3, #10
 8003554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003576:	b480      	push	{r7}
 8003578:	b087      	sub	sp, #28
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f023 0210 	bic.w	r2, r3, #16
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	031b      	lsls	r3, r3, #12
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	621a      	str	r2, [r3, #32]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f043 0307 	orr.w	r3, r3, #7
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	431a      	orrs	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003660:	2302      	movs	r3, #2
 8003662:	e054      	b.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a24      	ldr	r2, [pc, #144]	@ (800371c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d108      	bne.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003694:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a17      	ldr	r2, [pc, #92]	@ (800371c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00e      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036cc:	d009      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a13      	ldr	r2, [pc, #76]	@ (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10c      	bne.n	80036fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40000400 	.word	0x40000400
 8003724:	40014000 	.word	0x40014000

08003728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <memset>:
 8003764:	4402      	add	r2, r0
 8003766:	4603      	mov	r3, r0
 8003768:	4293      	cmp	r3, r2
 800376a:	d100      	bne.n	800376e <memset+0xa>
 800376c:	4770      	bx	lr
 800376e:	f803 1b01 	strb.w	r1, [r3], #1
 8003772:	e7f9      	b.n	8003768 <memset+0x4>

08003774 <__errno>:
 8003774:	4b01      	ldr	r3, [pc, #4]	@ (800377c <__errno+0x8>)
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	2000000c 	.word	0x2000000c

08003780 <__libc_init_array>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	4d0d      	ldr	r5, [pc, #52]	@ (80037b8 <__libc_init_array+0x38>)
 8003784:	4c0d      	ldr	r4, [pc, #52]	@ (80037bc <__libc_init_array+0x3c>)
 8003786:	1b64      	subs	r4, r4, r5
 8003788:	10a4      	asrs	r4, r4, #2
 800378a:	2600      	movs	r6, #0
 800378c:	42a6      	cmp	r6, r4
 800378e:	d109      	bne.n	80037a4 <__libc_init_array+0x24>
 8003790:	4d0b      	ldr	r5, [pc, #44]	@ (80037c0 <__libc_init_array+0x40>)
 8003792:	4c0c      	ldr	r4, [pc, #48]	@ (80037c4 <__libc_init_array+0x44>)
 8003794:	f000 fa24 	bl	8003be0 <_init>
 8003798:	1b64      	subs	r4, r4, r5
 800379a:	10a4      	asrs	r4, r4, #2
 800379c:	2600      	movs	r6, #0
 800379e:	42a6      	cmp	r6, r4
 80037a0:	d105      	bne.n	80037ae <__libc_init_array+0x2e>
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a8:	4798      	blx	r3
 80037aa:	3601      	adds	r6, #1
 80037ac:	e7ee      	b.n	800378c <__libc_init_array+0xc>
 80037ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b2:	4798      	blx	r3
 80037b4:	3601      	adds	r6, #1
 80037b6:	e7f2      	b.n	800379e <__libc_init_array+0x1e>
 80037b8:	0800b290 	.word	0x0800b290
 80037bc:	0800b290 	.word	0x0800b290
 80037c0:	0800b290 	.word	0x0800b290
 80037c4:	0800b294 	.word	0x0800b294

080037c8 <exp>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	ed2d 8b02 	vpush	{d8}
 80037ce:	ec55 4b10 	vmov	r4, r5, d0
 80037d2:	f000 f84d 	bl	8003870 <__ieee754_exp>
 80037d6:	eeb0 8a40 	vmov.f32	s16, s0
 80037da:	eef0 8a60 	vmov.f32	s17, s1
 80037de:	ec45 4b10 	vmov	d0, r4, r5
 80037e2:	f000 f839 	bl	8003858 <finite>
 80037e6:	b168      	cbz	r0, 8003804 <exp+0x3c>
 80037e8:	a317      	add	r3, pc, #92	@ (adr r3, 8003848 <exp+0x80>)
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	4620      	mov	r0, r4
 80037f0:	4629      	mov	r1, r5
 80037f2:	f7fd f935 	bl	8000a60 <__aeabi_dcmpgt>
 80037f6:	b160      	cbz	r0, 8003812 <exp+0x4a>
 80037f8:	f7ff ffbc 	bl	8003774 <__errno>
 80037fc:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8003838 <exp+0x70>
 8003800:	2322      	movs	r3, #34	@ 0x22
 8003802:	6003      	str	r3, [r0, #0]
 8003804:	eeb0 0a48 	vmov.f32	s0, s16
 8003808:	eef0 0a68 	vmov.f32	s1, s17
 800380c:	ecbd 8b02 	vpop	{d8}
 8003810:	bd38      	pop	{r3, r4, r5, pc}
 8003812:	a30f      	add	r3, pc, #60	@ (adr r3, 8003850 <exp+0x88>)
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	4620      	mov	r0, r4
 800381a:	4629      	mov	r1, r5
 800381c:	f7fd f902 	bl	8000a24 <__aeabi_dcmplt>
 8003820:	2800      	cmp	r0, #0
 8003822:	d0ef      	beq.n	8003804 <exp+0x3c>
 8003824:	f7ff ffa6 	bl	8003774 <__errno>
 8003828:	2322      	movs	r3, #34	@ 0x22
 800382a:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8003840 <exp+0x78>
 800382e:	6003      	str	r3, [r0, #0]
 8003830:	e7e8      	b.n	8003804 <exp+0x3c>
 8003832:	bf00      	nop
 8003834:	f3af 8000 	nop.w
 8003838:	00000000 	.word	0x00000000
 800383c:	7ff00000 	.word	0x7ff00000
	...
 8003848:	fefa39ef 	.word	0xfefa39ef
 800384c:	40862e42 	.word	0x40862e42
 8003850:	d52d3051 	.word	0xd52d3051
 8003854:	c0874910 	.word	0xc0874910

08003858 <finite>:
 8003858:	b082      	sub	sp, #8
 800385a:	ed8d 0b00 	vstr	d0, [sp]
 800385e:	9801      	ldr	r0, [sp, #4]
 8003860:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003864:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003868:	0fc0      	lsrs	r0, r0, #31
 800386a:	b002      	add	sp, #8
 800386c:	4770      	bx	lr
	...

08003870 <__ieee754_exp>:
 8003870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003874:	ec55 4b10 	vmov	r4, r5, d0
 8003878:	49b1      	ldr	r1, [pc, #708]	@ (8003b40 <__ieee754_exp+0x2d0>)
 800387a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800387e:	428a      	cmp	r2, r1
 8003880:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8003884:	d936      	bls.n	80038f4 <__ieee754_exp+0x84>
 8003886:	49af      	ldr	r1, [pc, #700]	@ (8003b44 <__ieee754_exp+0x2d4>)
 8003888:	428a      	cmp	r2, r1
 800388a:	d914      	bls.n	80038b6 <__ieee754_exp+0x46>
 800388c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003890:	4323      	orrs	r3, r4
 8003892:	4622      	mov	r2, r4
 8003894:	d007      	beq.n	80038a6 <__ieee754_exp+0x36>
 8003896:	462b      	mov	r3, r5
 8003898:	4620      	mov	r0, r4
 800389a:	4629      	mov	r1, r5
 800389c:	f7fc fc9a 	bl	80001d4 <__adddf3>
 80038a0:	4604      	mov	r4, r0
 80038a2:	460d      	mov	r5, r1
 80038a4:	e002      	b.n	80038ac <__ieee754_exp+0x3c>
 80038a6:	2e00      	cmp	r6, #0
 80038a8:	f040 8118 	bne.w	8003adc <__ieee754_exp+0x26c>
 80038ac:	ec45 4b10 	vmov	d0, r4, r5
 80038b0:	b004      	add	sp, #16
 80038b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b6:	a38c      	add	r3, pc, #560	@ (adr r3, 8003ae8 <__ieee754_exp+0x278>)
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	4620      	mov	r0, r4
 80038be:	4629      	mov	r1, r5
 80038c0:	f7fd f8ce 	bl	8000a60 <__aeabi_dcmpgt>
 80038c4:	4607      	mov	r7, r0
 80038c6:	b128      	cbz	r0, 80038d4 <__ieee754_exp+0x64>
 80038c8:	2000      	movs	r0, #0
 80038ca:	b004      	add	sp, #16
 80038cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d0:	f000 b97e 	b.w	8003bd0 <__math_oflow>
 80038d4:	a386      	add	r3, pc, #536	@ (adr r3, 8003af0 <__ieee754_exp+0x280>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	4620      	mov	r0, r4
 80038dc:	4629      	mov	r1, r5
 80038de:	f7fd f8a1 	bl	8000a24 <__aeabi_dcmplt>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	f000 8087 	beq.w	80039f6 <__ieee754_exp+0x186>
 80038e8:	4638      	mov	r0, r7
 80038ea:	b004      	add	sp, #16
 80038ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f0:	f000 b966 	b.w	8003bc0 <__math_uflow>
 80038f4:	4b94      	ldr	r3, [pc, #592]	@ (8003b48 <__ieee754_exp+0x2d8>)
 80038f6:	429a      	cmp	r2, r3
 80038f8:	f240 80a9 	bls.w	8003a4e <__ieee754_exp+0x1de>
 80038fc:	4b93      	ldr	r3, [pc, #588]	@ (8003b4c <__ieee754_exp+0x2dc>)
 80038fe:	429a      	cmp	r2, r3
 8003900:	d879      	bhi.n	80039f6 <__ieee754_exp+0x186>
 8003902:	4b93      	ldr	r3, [pc, #588]	@ (8003b50 <__ieee754_exp+0x2e0>)
 8003904:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	4620      	mov	r0, r4
 800390e:	4629      	mov	r1, r5
 8003910:	f7fc fc5e 	bl	80001d0 <__aeabi_dsub>
 8003914:	4b8f      	ldr	r3, [pc, #572]	@ (8003b54 <__ieee754_exp+0x2e4>)
 8003916:	00f7      	lsls	r7, r6, #3
 8003918:	443b      	add	r3, r7
 800391a:	ed93 7b00 	vldr	d7, [r3]
 800391e:	ed8d 7b00 	vstr	d7, [sp]
 8003922:	f1c6 0a01 	rsb	sl, r6, #1
 8003926:	4680      	mov	r8, r0
 8003928:	4689      	mov	r9, r1
 800392a:	ebaa 0a06 	sub.w	sl, sl, r6
 800392e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003932:	4640      	mov	r0, r8
 8003934:	4649      	mov	r1, r9
 8003936:	f7fc fc4b 	bl	80001d0 <__aeabi_dsub>
 800393a:	4604      	mov	r4, r0
 800393c:	460d      	mov	r5, r1
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	4620      	mov	r0, r4
 8003944:	4629      	mov	r1, r5
 8003946:	f7fc fdfb 	bl	8000540 <__aeabi_dmul>
 800394a:	a36b      	add	r3, pc, #428	@ (adr r3, 8003af8 <__ieee754_exp+0x288>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	4606      	mov	r6, r0
 8003952:	460f      	mov	r7, r1
 8003954:	f7fc fdf4 	bl	8000540 <__aeabi_dmul>
 8003958:	a369      	add	r3, pc, #420	@ (adr r3, 8003b00 <__ieee754_exp+0x290>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f7fc fc37 	bl	80001d0 <__aeabi_dsub>
 8003962:	4632      	mov	r2, r6
 8003964:	463b      	mov	r3, r7
 8003966:	f7fc fdeb 	bl	8000540 <__aeabi_dmul>
 800396a:	a367      	add	r3, pc, #412	@ (adr r3, 8003b08 <__ieee754_exp+0x298>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f7fc fc30 	bl	80001d4 <__adddf3>
 8003974:	4632      	mov	r2, r6
 8003976:	463b      	mov	r3, r7
 8003978:	f7fc fde2 	bl	8000540 <__aeabi_dmul>
 800397c:	a364      	add	r3, pc, #400	@ (adr r3, 8003b10 <__ieee754_exp+0x2a0>)
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	f7fc fc25 	bl	80001d0 <__aeabi_dsub>
 8003986:	4632      	mov	r2, r6
 8003988:	463b      	mov	r3, r7
 800398a:	f7fc fdd9 	bl	8000540 <__aeabi_dmul>
 800398e:	a362      	add	r3, pc, #392	@ (adr r3, 8003b18 <__ieee754_exp+0x2a8>)
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f7fc fc1e 	bl	80001d4 <__adddf3>
 8003998:	4632      	mov	r2, r6
 800399a:	463b      	mov	r3, r7
 800399c:	f7fc fdd0 	bl	8000540 <__aeabi_dmul>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4620      	mov	r0, r4
 80039a6:	4629      	mov	r1, r5
 80039a8:	f7fc fc12 	bl	80001d0 <__aeabi_dsub>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4606      	mov	r6, r0
 80039b2:	460f      	mov	r7, r1
 80039b4:	4620      	mov	r0, r4
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7fc fdc2 	bl	8000540 <__aeabi_dmul>
 80039bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039c0:	f1ba 0f00 	cmp.w	sl, #0
 80039c4:	d15c      	bne.n	8003a80 <__ieee754_exp+0x210>
 80039c6:	2200      	movs	r2, #0
 80039c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039cc:	4630      	mov	r0, r6
 80039ce:	4639      	mov	r1, r7
 80039d0:	f7fc fbfe 	bl	80001d0 <__aeabi_dsub>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039dc:	f7fc feda 	bl	8000794 <__aeabi_ddiv>
 80039e0:	4622      	mov	r2, r4
 80039e2:	462b      	mov	r3, r5
 80039e4:	f7fc fbf4 	bl	80001d0 <__aeabi_dsub>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	2000      	movs	r0, #0
 80039ee:	495a      	ldr	r1, [pc, #360]	@ (8003b58 <__ieee754_exp+0x2e8>)
 80039f0:	f7fc fbee 	bl	80001d0 <__aeabi_dsub>
 80039f4:	e754      	b.n	80038a0 <__ieee754_exp+0x30>
 80039f6:	4b59      	ldr	r3, [pc, #356]	@ (8003b5c <__ieee754_exp+0x2ec>)
 80039f8:	4620      	mov	r0, r4
 80039fa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80039fe:	4629      	mov	r1, r5
 8003a00:	a347      	add	r3, pc, #284	@ (adr r3, 8003b20 <__ieee754_exp+0x2b0>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fd9b 	bl	8000540 <__aeabi_dmul>
 8003a0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a0e:	f7fc fbe1 	bl	80001d4 <__adddf3>
 8003a12:	f7fd f82f 	bl	8000a74 <__aeabi_d2iz>
 8003a16:	4682      	mov	sl, r0
 8003a18:	f7fc fd28 	bl	800046c <__aeabi_i2d>
 8003a1c:	a342      	add	r3, pc, #264	@ (adr r3, 8003b28 <__ieee754_exp+0x2b8>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	4606      	mov	r6, r0
 8003a24:	460f      	mov	r7, r1
 8003a26:	f7fc fd8b 	bl	8000540 <__aeabi_dmul>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4620      	mov	r0, r4
 8003a30:	4629      	mov	r1, r5
 8003a32:	f7fc fbcd 	bl	80001d0 <__aeabi_dsub>
 8003a36:	a33e      	add	r3, pc, #248	@ (adr r3, 8003b30 <__ieee754_exp+0x2c0>)
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	4680      	mov	r8, r0
 8003a3e:	4689      	mov	r9, r1
 8003a40:	4630      	mov	r0, r6
 8003a42:	4639      	mov	r1, r7
 8003a44:	f7fc fd7c 	bl	8000540 <__aeabi_dmul>
 8003a48:	e9cd 0100 	strd	r0, r1, [sp]
 8003a4c:	e76f      	b.n	800392e <__ieee754_exp+0xbe>
 8003a4e:	4b44      	ldr	r3, [pc, #272]	@ (8003b60 <__ieee754_exp+0x2f0>)
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d810      	bhi.n	8003a76 <__ieee754_exp+0x206>
 8003a54:	a338      	add	r3, pc, #224	@ (adr r3, 8003b38 <__ieee754_exp+0x2c8>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	f7fc fbb9 	bl	80001d4 <__adddf3>
 8003a62:	4b3d      	ldr	r3, [pc, #244]	@ (8003b58 <__ieee754_exp+0x2e8>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	f7fc fffb 	bl	8000a60 <__aeabi_dcmpgt>
 8003a6a:	b138      	cbz	r0, 8003a7c <__ieee754_exp+0x20c>
 8003a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b58 <__ieee754_exp+0x2e8>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4620      	mov	r0, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	e712      	b.n	800389c <__ieee754_exp+0x2c>
 8003a76:	f04f 0a00 	mov.w	sl, #0
 8003a7a:	e760      	b.n	800393e <__ieee754_exp+0xce>
 8003a7c:	4682      	mov	sl, r0
 8003a7e:	e75e      	b.n	800393e <__ieee754_exp+0xce>
 8003a80:	4632      	mov	r2, r6
 8003a82:	463b      	mov	r3, r7
 8003a84:	2000      	movs	r0, #0
 8003a86:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003a8a:	f7fc fba1 	bl	80001d0 <__aeabi_dsub>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a96:	f7fc fe7d 	bl	8000794 <__aeabi_ddiv>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003aa2:	f7fc fb95 	bl	80001d0 <__aeabi_dsub>
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	f7fc fb91 	bl	80001d0 <__aeabi_dsub>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	4928      	ldr	r1, [pc, #160]	@ (8003b58 <__ieee754_exp+0x2e8>)
 8003ab6:	f7fc fb8b 	bl	80001d0 <__aeabi_dsub>
 8003aba:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8003abe:	4592      	cmp	sl, r2
 8003ac0:	db02      	blt.n	8003ac8 <__ieee754_exp+0x258>
 8003ac2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8003ac6:	e6eb      	b.n	80038a0 <__ieee754_exp+0x30>
 8003ac8:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8003acc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8003ad6:	f7fc fd33 	bl	8000540 <__aeabi_dmul>
 8003ada:	e6e1      	b.n	80038a0 <__ieee754_exp+0x30>
 8003adc:	2400      	movs	r4, #0
 8003ade:	2500      	movs	r5, #0
 8003ae0:	e6e4      	b.n	80038ac <__ieee754_exp+0x3c>
 8003ae2:	bf00      	nop
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	fefa39ef 	.word	0xfefa39ef
 8003aec:	40862e42 	.word	0x40862e42
 8003af0:	d52d3051 	.word	0xd52d3051
 8003af4:	c0874910 	.word	0xc0874910
 8003af8:	72bea4d0 	.word	0x72bea4d0
 8003afc:	3e663769 	.word	0x3e663769
 8003b00:	c5d26bf1 	.word	0xc5d26bf1
 8003b04:	3ebbbd41 	.word	0x3ebbbd41
 8003b08:	af25de2c 	.word	0xaf25de2c
 8003b0c:	3f11566a 	.word	0x3f11566a
 8003b10:	16bebd93 	.word	0x16bebd93
 8003b14:	3f66c16c 	.word	0x3f66c16c
 8003b18:	5555553e 	.word	0x5555553e
 8003b1c:	3fc55555 	.word	0x3fc55555
 8003b20:	652b82fe 	.word	0x652b82fe
 8003b24:	3ff71547 	.word	0x3ff71547
 8003b28:	fee00000 	.word	0xfee00000
 8003b2c:	3fe62e42 	.word	0x3fe62e42
 8003b30:	35793c76 	.word	0x35793c76
 8003b34:	3dea39ef 	.word	0x3dea39ef
 8003b38:	8800759c 	.word	0x8800759c
 8003b3c:	7e37e43c 	.word	0x7e37e43c
 8003b40:	40862e41 	.word	0x40862e41
 8003b44:	7fefffff 	.word	0x7fefffff
 8003b48:	3fd62e42 	.word	0x3fd62e42
 8003b4c:	3ff0a2b1 	.word	0x3ff0a2b1
 8003b50:	0800b270 	.word	0x0800b270
 8003b54:	0800b260 	.word	0x0800b260
 8003b58:	3ff00000 	.word	0x3ff00000
 8003b5c:	0800b280 	.word	0x0800b280
 8003b60:	3defffff 	.word	0x3defffff

08003b64 <with_errno>:
 8003b64:	b510      	push	{r4, lr}
 8003b66:	ed2d 8b02 	vpush	{d8}
 8003b6a:	eeb0 8a40 	vmov.f32	s16, s0
 8003b6e:	eef0 8a60 	vmov.f32	s17, s1
 8003b72:	4604      	mov	r4, r0
 8003b74:	f7ff fdfe 	bl	8003774 <__errno>
 8003b78:	eeb0 0a48 	vmov.f32	s0, s16
 8003b7c:	eef0 0a68 	vmov.f32	s1, s17
 8003b80:	ecbd 8b02 	vpop	{d8}
 8003b84:	6004      	str	r4, [r0, #0]
 8003b86:	bd10      	pop	{r4, pc}

08003b88 <xflow>:
 8003b88:	4603      	mov	r3, r0
 8003b8a:	b507      	push	{r0, r1, r2, lr}
 8003b8c:	ec51 0b10 	vmov	r0, r1, d0
 8003b90:	b183      	cbz	r3, 8003bb4 <xflow+0x2c>
 8003b92:	4602      	mov	r2, r0
 8003b94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003b98:	e9cd 2300 	strd	r2, r3, [sp]
 8003b9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ba0:	f7fc fcce 	bl	8000540 <__aeabi_dmul>
 8003ba4:	ec41 0b10 	vmov	d0, r0, r1
 8003ba8:	2022      	movs	r0, #34	@ 0x22
 8003baa:	b003      	add	sp, #12
 8003bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bb0:	f7ff bfd8 	b.w	8003b64 <with_errno>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	e7ee      	b.n	8003b98 <xflow+0x10>
 8003bba:	0000      	movs	r0, r0
 8003bbc:	0000      	movs	r0, r0
	...

08003bc0 <__math_uflow>:
 8003bc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003bc8 <__math_uflow+0x8>
 8003bc4:	f7ff bfe0 	b.w	8003b88 <xflow>
 8003bc8:	00000000 	.word	0x00000000
 8003bcc:	10000000 	.word	0x10000000

08003bd0 <__math_oflow>:
 8003bd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003bd8 <__math_oflow+0x8>
 8003bd4:	f7ff bfd8 	b.w	8003b88 <xflow>
 8003bd8:	00000000 	.word	0x00000000
 8003bdc:	70000000 	.word	0x70000000

08003be0 <_init>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	bf00      	nop
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr

08003bec <_fini>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr
